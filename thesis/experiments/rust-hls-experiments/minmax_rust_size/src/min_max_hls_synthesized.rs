// This file was generated by rust_hls. Please do not edit it manually.
// rust_hls hash: "819a53a772e56846aca509942d75542"

extern crate verilated;
use ::rust_hdl::prelude::*;
#[allow(dead_code, unused)]
mod min_max_verilated {
    use std::path::Path;
    mod ffi {
        #[allow(non_camel_case_types)]
        pub enum min_max {}
        extern {
            pub fn min_max_new() -> *mut min_max;
            pub fn min_max_delete(min_max: *mut min_max);
            pub fn min_max_eval(min_max: *mut min_max);
            pub fn min_max_final(min_max: *mut min_max);
            pub fn min_max_set_clk(min_max: *mut min_max, v: ::std::os::raw::c_uchar);
            pub fn min_max_set_reset(min_max: *mut min_max, v: ::std::os::raw::c_uchar);
            pub fn min_max_set_start_port(
                min_max: *mut min_max,
                v: ::std::os::raw::c_uchar,
            );
            pub fn min_max_set_Pd61(min_max: *mut min_max, v: ::std::os::raw::c_uint);
            pub fn min_max_set_Pd62(min_max: *mut min_max, v: ::std::os::raw::c_uint);
            pub fn min_max_set_Pd63(min_max: *mut min_max, v: ::std::os::raw::c_uint);
            pub fn min_max_set_Pd64(min_max: *mut min_max, v: ::std::os::raw::c_uint);
            pub fn min_max_set_M_Rdata_ram(
                min_max: *mut min_max,
                v: ::std::os::raw::c_uint,
            );
            pub fn min_max_set_M_DataRdy(
                min_max: *mut min_max,
                v: ::std::os::raw::c_uchar,
            );
            pub fn min_max_get_done_port(
                min_max: *mut min_max,
            ) -> ::std::os::raw::c_uchar;
            pub fn min_max_get_Mout_oe_ram(
                min_max: *mut min_max,
            ) -> ::std::os::raw::c_uchar;
            pub fn min_max_get_Mout_we_ram(
                min_max: *mut min_max,
            ) -> ::std::os::raw::c_uchar;
            pub fn min_max_get_Mout_addr_ram(
                min_max: *mut min_max,
            ) -> ::std::os::raw::c_uint;
            pub fn min_max_get_Mout_Wdata_ram(
                min_max: *mut min_max,
            ) -> ::std::os::raw::c_uint;
            pub fn min_max_get_Mout_data_ram_size(
                min_max: *mut min_max,
            ) -> ::std::os::raw::c_uchar;
        }
    }
    pub struct MinMaxVerilated(*mut ffi::min_max, Option<u32>);
    impl Default for MinMaxVerilated {
        fn default() -> Self {
            let ptr = unsafe { ffi::min_max_new() };
            assert!(! ptr.is_null());
            MinMaxVerilated(ptr, None)
        }
    }
    impl Drop for MinMaxVerilated {
        fn drop(&mut self) {
            unsafe {
                ffi::min_max_delete(self.0);
            }
        }
    }
    #[allow(dead_code, non_snake_case)]
    impl MinMaxVerilated {
        pub fn set_clk(&mut self, v: u8) {
            unsafe {
                ffi::min_max_set_clk(self.0, v);
            }
        }
        pub fn set_reset(&mut self, v: u8) {
            unsafe {
                ffi::min_max_set_reset(self.0, v);
            }
        }
        pub fn set_start_port(&mut self, v: u8) {
            unsafe {
                ffi::min_max_set_start_port(self.0, v);
            }
        }
        pub fn set_Pd61(&mut self, v: u32) {
            unsafe {
                ffi::min_max_set_Pd61(self.0, v);
            }
        }
        pub fn set_Pd62(&mut self, v: u32) {
            unsafe {
                ffi::min_max_set_Pd62(self.0, v);
            }
        }
        pub fn set_Pd63(&mut self, v: u32) {
            unsafe {
                ffi::min_max_set_Pd63(self.0, v);
            }
        }
        pub fn set_Pd64(&mut self, v: u32) {
            unsafe {
                ffi::min_max_set_Pd64(self.0, v);
            }
        }
        pub fn set_M_Rdata_ram(&mut self, v: u32) {
            unsafe {
                ffi::min_max_set_M_Rdata_ram(self.0, v);
            }
        }
        pub fn set_M_DataRdy(&mut self, v: u8) {
            unsafe {
                ffi::min_max_set_M_DataRdy(self.0, v);
            }
        }
        pub fn done_port(&self) -> u8 {
            unsafe { ffi::min_max_get_done_port(self.0) }
        }
        pub fn Mout_oe_ram(&self) -> u8 {
            unsafe { ffi::min_max_get_Mout_oe_ram(self.0) }
        }
        pub fn Mout_we_ram(&self) -> u8 {
            unsafe { ffi::min_max_get_Mout_we_ram(self.0) }
        }
        pub fn Mout_addr_ram(&self) -> u32 {
            unsafe { ffi::min_max_get_Mout_addr_ram(self.0) }
        }
        pub fn Mout_Wdata_ram(&self) -> u32 {
            unsafe { ffi::min_max_get_Mout_Wdata_ram(self.0) }
        }
        pub fn Mout_data_ram_size(&self) -> u8 {
            unsafe { ffi::min_max_get_Mout_data_ram_size(self.0) }
        }
        pub fn eval(&mut self) {
            unsafe {
                ffi::min_max_eval(self.0);
            }
        }
        pub fn finish(&mut self) {
            unsafe {
                ffi::min_max_final(self.0);
            }
        }
        pub fn clock_toggle(&mut self) {
            unimplemented!();
        }
        fn reset_up(&mut self) {
            unimplemented!();
        }
        fn reset_down(&mut self) {
            unimplemented!();
        }
    }
}
#[derive(::std::default::Default)]
pub struct MinMax {
    pub clk: rust_hdl::prelude::Signal<
        ::rust_hdl::prelude::In,
        ::rust_hdl::prelude::Clock,
    >,
    pub reset: rust_hdl::prelude::Signal<::rust_hdl::prelude::In, bool>,
    pub start_port: rust_hdl::prelude::Signal<::rust_hdl::prelude::In, bool>,
    pub elements: rust_hdl::prelude::Signal<
        ::rust_hdl::prelude::In,
        ::rust_hdl::prelude::Bits<32usize>,
    >,
    pub elements_length: rust_hdl::prelude::Signal<
        ::rust_hdl::prelude::In,
        ::rust_hdl::prelude::Bits<32usize>,
    >,
    pub out_max: rust_hdl::prelude::Signal<
        ::rust_hdl::prelude::In,
        ::rust_hdl::prelude::Bits<32usize>,
    >,
    pub out_min: rust_hdl::prelude::Signal<
        ::rust_hdl::prelude::In,
        ::rust_hdl::prelude::Bits<32usize>,
    >,
    pub m_rdata_ram: rust_hdl::prelude::Signal<
        ::rust_hdl::prelude::In,
        ::rust_hdl::prelude::Bits<32usize>,
    >,
    pub m_data_rdy: rust_hdl::prelude::Signal<::rust_hdl::prelude::In, bool>,
    pub done_port: rust_hdl::prelude::Signal<::rust_hdl::prelude::Out, bool>,
    pub mout_oe_ram: rust_hdl::prelude::Signal<::rust_hdl::prelude::Out, bool>,
    pub mout_we_ram: rust_hdl::prelude::Signal<::rust_hdl::prelude::Out, bool>,
    pub mout_addr_ram: rust_hdl::prelude::Signal<
        ::rust_hdl::prelude::Out,
        ::rust_hdl::prelude::Bits<32usize>,
    >,
    pub mout_wdata_ram: rust_hdl::prelude::Signal<
        ::rust_hdl::prelude::Out,
        ::rust_hdl::prelude::Bits<32usize>,
    >,
    pub mout_data_ram_size: rust_hdl::prelude::Signal<
        ::rust_hdl::prelude::Out,
        ::rust_hdl::prelude::Bits<6usize>,
    >,
    verilated_module: ::std::sync::Arc<
        ::std::sync::Mutex<self::min_max_verilated::MinMaxVerilated>,
    >,
}
unsafe impl Send for MinMax {}
#[automatically_derived]
impl ::rust_hdl::prelude::block::Block for MinMax {
    fn connect_all(&mut self) {
        self.connect();
        self.clk.connect_all();
        self.reset.connect_all();
        self.start_port.connect_all();
        self.elements.connect_all();
        self.elements_length.connect_all();
        self.out_max.connect_all();
        self.out_min.connect_all();
        self.m_rdata_ram.connect_all();
        self.m_data_rdy.connect_all();
        self.done_port.connect_all();
        self.mout_oe_ram.connect_all();
        self.mout_we_ram.connect_all();
        self.mout_addr_ram.connect_all();
        self.mout_wdata_ram.connect_all();
        self.mout_data_ram_size.connect_all();
    }
    fn update_all(&mut self) {
        self.update();
        self.clk.update_all();
        self.reset.update_all();
        self.start_port.update_all();
        self.elements.update_all();
        self.elements_length.update_all();
        self.out_max.update_all();
        self.out_min.update_all();
        self.m_rdata_ram.update_all();
        self.m_data_rdy.update_all();
        self.done_port.update_all();
        self.mout_oe_ram.update_all();
        self.mout_we_ram.update_all();
        self.mout_addr_ram.update_all();
        self.mout_wdata_ram.update_all();
        self.mout_data_ram_size.update_all();
    }
    fn has_changed(&self) -> bool {
        self.clk.has_changed() || self.reset.has_changed()
            || self.start_port.has_changed() || self.elements.has_changed()
            || self.elements_length.has_changed() || self.out_max.has_changed()
            || self.out_min.has_changed() || self.m_rdata_ram.has_changed()
            || self.m_data_rdy.has_changed() || self.done_port.has_changed()
            || self.mout_oe_ram.has_changed() || self.mout_we_ram.has_changed()
            || self.mout_addr_ram.has_changed() || self.mout_wdata_ram.has_changed()
            || self.mout_data_ram_size.has_changed() || false || false
    }
    fn accept(&self, name: &str, probe: &mut dyn probe::Probe) {
        probe.visit_start_scope(name, self);
        self.clk.accept("clk", probe);
        self.reset.accept("reset", probe);
        self.start_port.accept("start_port", probe);
        self.elements.accept("elements", probe);
        self.elements_length.accept("elements_length", probe);
        self.out_max.accept("out_max", probe);
        self.out_min.accept("out_min", probe);
        self.m_rdata_ram.accept("m_rdata_ram", probe);
        self.m_data_rdy.accept("m_data_rdy", probe);
        self.done_port.accept("done_port", probe);
        self.mout_oe_ram.accept("mout_oe_ram", probe);
        self.mout_we_ram.accept("mout_we_ram", probe);
        self.mout_addr_ram.accept("mout_addr_ram", probe);
        self.mout_wdata_ram.accept("mout_wdata_ram", probe);
        self.mout_data_ram_size.accept("mout_data_ram_size", probe);
        probe.visit_end_scope(name, self);
    }
}
#[automatically_derived]
impl MinMax {
    #[allow(unused)]
    pub fn new() -> Self {
        Self::default()
    }
}
#[automatically_derived]
impl ::rust_hdl::prelude::Logic for MinMax {
    fn update(&mut self) {
        let mut verilated_module = match self.verilated_module.lock() {
            Ok(verilated_module) => verilated_module,
            Err(e) => panic!("Failed to aquire verilated_module lock: {}", e),
        };
        verilated_module.set_clk(if self.clk.val().clk { 1u8 } else { 0u8 });
        verilated_module.set_reset(if self.reset.val() { 1u8 } else { 0u8 });
        verilated_module.set_start_port(if self.start_port.val() { 1u8 } else { 0u8 });
        verilated_module.set_Pd61(self.elements.val().to_u32());
        verilated_module.set_Pd62(self.elements_length.val().to_u32());
        verilated_module.set_Pd63(self.out_max.val().to_u32());
        verilated_module.set_Pd64(self.out_min.val().to_u32());
        verilated_module.set_M_Rdata_ram(self.m_rdata_ram.val().to_u32());
        verilated_module.set_M_DataRdy(if self.m_data_rdy.val() { 1u8 } else { 0u8 });
        verilated_module.eval();
        self.done_port.next = verilated_module.done_port() != 0;
        self.mout_oe_ram.next = verilated_module.Mout_oe_ram() != 0;
        self.mout_we_ram.next = verilated_module.Mout_we_ram() != 0;
        self
            .mout_addr_ram
            .next = rust_hdl::prelude::ToBits::to_bits::<
            32usize,
        >(verilated_module.Mout_addr_ram() & 4294967295u32);
        self
            .mout_wdata_ram
            .next = rust_hdl::prelude::ToBits::to_bits::<
            32usize,
        >(verilated_module.Mout_Wdata_ram() & 4294967295u32);
        self
            .mout_data_ram_size
            .next = rust_hdl::prelude::ToBits::to_bits::<
            6usize,
        >(verilated_module.Mout_data_ram_size() & 63u8);
    }
    fn connect(&mut self) {
        self.done_port.connect();
        self.mout_oe_ram.connect();
        self.mout_we_ram.connect();
        self.mout_addr_ram.connect();
        self.mout_wdata_ram.connect();
        self.mout_data_ram_size.connect();
    }
    fn hdl(&self) -> ::rust_hdl::prelude::Verilog {
        ::rust_hdl::prelude::Verilog::Wrapper(::rust_hdl::prelude::Wrapper {
            code: "min_max min_max_inst(.clk(clk), .reset(reset), .start_port(start_port), .Pd61(elements), .Pd62(elements_length), .Pd63(out_max), .Pd64(out_min), .M_Rdata_ram(m_rdata_ram), .M_DataRdy(m_data_rdy), .done_port(done_port), .Mout_oe_ram(mout_oe_ram), .Mout_we_ram(mout_we_ram), .Mout_addr_ram(mout_addr_ram), .Mout_Wdata_ram(mout_wdata_ram), .Mout_data_ram_size(mout_data_ram_size));"
                .into(),
            cores: "// \n// Politecnico di Milano\n// Code created using PandA - Version: PandA 2023.2 - Revision 891ec3caed502474cab0813cc4a9fc678deabaa5 - Date 2023-06-30T16:26:21\n// /nix/store/9c5lz0md936sjhs9hw1ya6kghvkfc4zg-bambu-wrapped/bin/bambu executed with: /nix/store/9c5lz0md936sjhs9hw1ya6kghvkfc4zg-bambu-wrapped/bin/bambu --simulator=VERILATOR --top-fname=min_max --clock-name=clk --compiler=I386_CLANG16 --channels-type=MEM_ACC_11 --channels-number=1 -Os --target=/home/lennart/Documents/bachelor-thesis/thesis/experiments/device.xml result.ll \n// \n// Send any bug to: panda-info@polimi.it\n// ************************************************************************\n// The following text holds for all the components tagged with PANDA_LGPLv3.\n// They are all part of the BAMBU/PANDA IP LIBRARY.\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3 of the License, or (at your option) any later version.\n// \n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n// \n// You should have received a copy of the GNU Lesser General Public\n// License along with the PandA framework; see the files COPYING.LIB\n// If not, see <http://www.gnu.org/licenses/>.\n// ************************************************************************\n\n`ifdef __ICARUS__\n  `define _SIM_HAVE_CLOG2\n`endif\n`ifdef VERILATOR\n  `define _SIM_HAVE_CLOG2\n`endif\n`ifdef MODEL_TECH\n  `define _SIM_HAVE_CLOG2\n`endif\n`ifdef VCS\n  `define _SIM_HAVE_CLOG2\n`endif\n`ifdef NCVERILOG\n  `define _SIM_HAVE_CLOG2\n`endif\n`ifdef XILINX_SIMULATOR\n  `define _SIM_HAVE_CLOG2\n`endif\n`ifdef XILINX_ISIM\n  `define _SIM_HAVE_CLOG2\n`endif\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>, Christian Pilato <christian.pilato@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule constant_value(out1);\n  parameter BITSIZE_out1=1,\n    value=1'b0;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  assign out1 = value;\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule register_SE(clock,\n  reset,\n  in1,\n  wenable,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_out1=1;\n  // IN\n  input clock;\n  input reset;\n  input [BITSIZE_in1-1:0] in1;\n  input wenable;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  \n  reg [BITSIZE_out1-1:0] reg_out1 =0;\n  assign out1 = reg_out1;\n  always @(posedge clock)\n    if (wenable)\n      reg_out1 <= in1;\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule register_STD(clock,\n  reset,\n  in1,\n  wenable,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_out1=1;\n  // IN\n  input clock;\n  input reset;\n  input [BITSIZE_in1-1:0] in1;\n  input wenable;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  reg [BITSIZE_out1-1:0] reg_out1 =0;\n  assign out1 = reg_out1;\n  always @(posedge clock)\n    reg_out1 <= in1;\n\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule UIdata_converter_FU(in1,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_out1=1;\n  // IN\n  input [BITSIZE_in1-1:0] in1;\n  // OUT\n  output signed [BITSIZE_out1-1:0] out1;\n  generate\n  if (BITSIZE_out1 <= BITSIZE_in1)\n  begin\n    assign out1 = in1[BITSIZE_out1-1:0];\n  end\n  else\n  begin\n    assign out1 = {{(BITSIZE_out1-BITSIZE_in1){1'b0}},in1};\n  end\n  endgenerate\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule IUdata_converter_FU(in1,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_out1=1;\n  // IN\n  input signed [BITSIZE_in1-1:0] in1;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  generate\n  if (BITSIZE_out1 <= BITSIZE_in1)\n  begin\n    assign out1 = in1[BITSIZE_out1-1:0];\n  end\n  else\n  begin\n    assign out1 = {{(BITSIZE_out1-BITSIZE_in1){in1[BITSIZE_in1-1]}},in1};\n  end\n  endgenerate\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule UUdata_converter_FU(in1,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_out1=1;\n  // IN\n  input [BITSIZE_in1-1:0] in1;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  generate\n  if (BITSIZE_out1 <= BITSIZE_in1)\n  begin\n    assign out1 = in1[BITSIZE_out1-1:0];\n  end\n  else\n  begin\n    assign out1 = {{(BITSIZE_out1-BITSIZE_in1){1'b0}},in1};\n  end\n  endgenerate\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule read_cond_FU(in1,\n  out1);\n  parameter BITSIZE_in1=1;\n  // IN\n  input [BITSIZE_in1-1:0] in1;\n  // OUT\n  output out1;\n  assign out1 = in1 != {BITSIZE_in1{1'b0}};\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule BMEMORY_CTRL(clock,\n  in1,\n  in2,\n  in3,\n  in4,\n  sel_LOAD,\n  sel_STORE,\n  out1,\n  Min_oe_ram,\n  Mout_oe_ram,\n  Min_we_ram,\n  Mout_we_ram,\n  Min_addr_ram,\n  Mout_addr_ram,\n  M_Rdata_ram,\n  Min_Wdata_ram,\n  Mout_Wdata_ram,\n  Min_data_ram_size,\n  Mout_data_ram_size,\n  M_DataRdy);\n  parameter BITSIZE_in1=1,\n    BITSIZE_in2=1,\n    BITSIZE_in3=1,\n    BITSIZE_out1=1,\n    BITSIZE_Min_addr_ram=1,\n    BITSIZE_Mout_addr_ram=1,\n    BITSIZE_M_Rdata_ram=8,\n    BITSIZE_Min_Wdata_ram=8,\n    BITSIZE_Mout_Wdata_ram=8,\n    BITSIZE_Min_data_ram_size=1,\n    BITSIZE_Mout_data_ram_size=1;\n  // IN\n  input clock;\n  input [BITSIZE_in1-1:0] in1;\n  input [BITSIZE_in2-1:0] in2;\n  input [BITSIZE_in3-1:0] in3;\n  input in4;\n  input sel_LOAD;\n  input sel_STORE;\n  input Min_oe_ram;\n  input Min_we_ram;\n  input [BITSIZE_Min_addr_ram-1:0] Min_addr_ram;\n  input [BITSIZE_M_Rdata_ram-1:0] M_Rdata_ram;\n  input [BITSIZE_Min_Wdata_ram-1:0] Min_Wdata_ram;\n  input [BITSIZE_Min_data_ram_size-1:0] Min_data_ram_size;\n  input M_DataRdy;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  output Mout_oe_ram;\n  output Mout_we_ram;\n  output [BITSIZE_Mout_addr_ram-1:0] Mout_addr_ram;\n  output [BITSIZE_Mout_Wdata_ram-1:0] Mout_Wdata_ram;\n  output [BITSIZE_Mout_data_ram_size-1:0] Mout_data_ram_size;\n  \n  wire  [BITSIZE_in2-1:0] tmp_addr;\n  wire int_sel_LOAD;\n  wire int_sel_STORE;\n  assign tmp_addr = in2;\n  assign Mout_addr_ram = (int_sel_LOAD || int_sel_STORE) ? tmp_addr : Min_addr_ram;\n  assign Mout_oe_ram = int_sel_LOAD ? 1'b1 : Min_oe_ram;\n  assign Mout_we_ram = int_sel_STORE ? 1'b1 : Min_we_ram;\n  assign out1 = M_Rdata_ram[BITSIZE_out1-1:0];\n  assign Mout_Wdata_ram = int_sel_STORE ? in1 : Min_Wdata_ram;\n  assign Mout_data_ram_size = int_sel_STORE || int_sel_LOAD ? in3[BITSIZE_in3-1:0] : Min_data_ram_size;\n  assign int_sel_LOAD = sel_LOAD & in4;\n  assign int_sel_STORE = sel_STORE & in4;\n  // Add assertion here\n  // psl default clock = (posedge clock);\n  // psl ERROR_LOAD_Min_oe_ram: assert never {sel_LOAD && Min_oe_ram};\n  // psl ERROR_STORE_Min_we_ram: assert never {sel_STORE && Min_we_ram};\n  // psl ERROR_STORE_LOAD: assert never {sel_STORE && sel_LOAD};\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule lt_expr_FU(in1,\n  in2,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_in2=1,\n    BITSIZE_out1=1;\n  // IN\n  input signed [BITSIZE_in1-1:0] in1;\n  input signed [BITSIZE_in2-1:0] in2;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  assign out1 = in1 < in2;\n\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule max_expr_FU(in1,\n  in2,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_in2=1,\n    BITSIZE_out1=1;\n  // IN\n  input signed [BITSIZE_in1-1:0] in1;\n  input signed [BITSIZE_in2-1:0] in2;\n  // OUT\n  output signed [BITSIZE_out1-1:0] out1;\n  assign out1 = in1 > in2 ? in1 : in2;\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule min_expr_FU(in1,\n  in2,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_in2=1,\n    BITSIZE_out1=1;\n  // IN\n  input signed [BITSIZE_in1-1:0] in1;\n  input signed [BITSIZE_in2-1:0] in2;\n  // OUT\n  output signed [BITSIZE_out1-1:0] out1;\n  assign out1 = in1 < in2 ? in1 : in2;\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule ui_eq_expr_FU(in1,\n  in2,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_in2=1,\n    BITSIZE_out1=1;\n  // IN\n  input [BITSIZE_in1-1:0] in1;\n  input [BITSIZE_in2-1:0] in2;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  assign out1 = in1 == in2;\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule ui_lshift_expr_FU(in1,\n  in2,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_in2=1,\n    BITSIZE_out1=1,\n    PRECISION=1;\n  // IN\n  input [BITSIZE_in1-1:0] in1;\n  input [BITSIZE_in2-1:0] in2;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  `ifndef _SIM_HAVE_CLOG2\n    function integer log2;\n       input integer value;\n       integer temp_value;\n      begin\n        temp_value = value-1;\n        for (log2=0; temp_value>0; log2=log2+1)\n          temp_value = temp_value>>1;\n      end\n    endfunction\n  `endif\n  `ifdef _SIM_HAVE_CLOG2\n    parameter arg2_bitsize = $clog2(PRECISION);\n  `else\n    parameter arg2_bitsize = log2(PRECISION);\n  `endif\n  generate\n    if(BITSIZE_in2 > arg2_bitsize)\n      assign out1 = in1 << in2[arg2_bitsize-1:0];\n    else\n      assign out1 = in1 << in2;\n  endgenerate\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule ui_plus_expr_FU(in1,\n  in2,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_in2=1,\n    BITSIZE_out1=1;\n  // IN\n  input [BITSIZE_in1-1:0] in1;\n  input [BITSIZE_in2-1:0] in2;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  assign out1 = in1 + in2;\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule ui_pointer_plus_expr_FU(in1,\n  in2,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_in2=1,\n    BITSIZE_out1=1,\n    LSB_PARAMETER=-1;\n  // IN\n  input [BITSIZE_in1-1:0] in1;\n  input [BITSIZE_in2-1:0] in2;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  wire [BITSIZE_out1-1:0] in1_tmp;\n  wire [BITSIZE_out1-1:0] in2_tmp;\n  assign in1_tmp = in1;\n  assign in2_tmp = in2;generate if (BITSIZE_out1 > LSB_PARAMETER) assign out1[BITSIZE_out1-1:LSB_PARAMETER] = (in1_tmp[BITSIZE_out1-1:LSB_PARAMETER] + in2_tmp[BITSIZE_out1-1:LSB_PARAMETER]); else assign out1 = 0; endgenerate\n  generate if (LSB_PARAMETER != 0 && BITSIZE_out1 > LSB_PARAMETER) assign out1[LSB_PARAMETER-1:0] = 0; endgenerate\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>, Christian Pilato <christian.pilato@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule MUX_GATE(sel,\n  in1,\n  in2,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_in2=1,\n    BITSIZE_out1=1;\n  // IN\n  input sel;\n  input [BITSIZE_in1-1:0] in1;\n  input [BITSIZE_in2-1:0] in2;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  assign out1 = sel ? in1 : in2;\nendmodule\n\n// Datapath RTL description for min_max\n// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.\n// Author(s): Component automatically generated by bambu\n// License: THIS COMPONENT IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n`timescale 1ns / 1ps\nmodule datapath_min_max(clock,\n  reset,\n  in_port_Pd61,\n  in_port_Pd62,\n  in_port_Pd63,\n  in_port_Pd64,\n  M_Rdata_ram,\n  M_DataRdy,\n  Min_oe_ram,\n  Min_we_ram,\n  Min_addr_ram,\n  Min_Wdata_ram,\n  Min_data_ram_size,\n  Mout_oe_ram,\n  Mout_we_ram,\n  Mout_addr_ram,\n  Mout_Wdata_ram,\n  Mout_data_ram_size,\n  fuselector_BMEMORY_CTRL_23_i0_LOAD,\n  fuselector_BMEMORY_CTRL_23_i0_STORE,\n  selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0,\n  selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0,\n  selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1,\n  selector_MUX_30_reg_1_0_0_0,\n  selector_MUX_31_reg_2_0_0_0,\n  selector_MUX_32_reg_3_0_0_0,\n  selector_MUX_36_reg_7_0_0_0,\n  selector_MUX_37_reg_8_0_0_0,\n  wrenable_reg_0,\n  wrenable_reg_1,\n  wrenable_reg_2,\n  wrenable_reg_3,\n  wrenable_reg_4,\n  wrenable_reg_5,\n  wrenable_reg_6,\n  wrenable_reg_7,\n  wrenable_reg_8,\n  OUT_CONDITION_min_max_423521_423584,\n  OUT_CONDITION_min_max_423521_423660);\n  // IN\n  input clock;\n  input reset;\n  input [31:0] in_port_Pd61;\n  input [31:0] in_port_Pd62;\n  input [31:0] in_port_Pd63;\n  input [31:0] in_port_Pd64;\n  input [31:0] M_Rdata_ram;\n  input M_DataRdy;\n  input Min_oe_ram;\n  input Min_we_ram;\n  input [31:0] Min_addr_ram;\n  input [31:0] Min_Wdata_ram;\n  input [5:0] Min_data_ram_size;\n  input fuselector_BMEMORY_CTRL_23_i0_LOAD;\n  input fuselector_BMEMORY_CTRL_23_i0_STORE;\n  input selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0;\n  input selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0;\n  input selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1;\n  input selector_MUX_30_reg_1_0_0_0;\n  input selector_MUX_31_reg_2_0_0_0;\n  input selector_MUX_32_reg_3_0_0_0;\n  input selector_MUX_36_reg_7_0_0_0;\n  input selector_MUX_37_reg_8_0_0_0;\n  input wrenable_reg_0;\n  input wrenable_reg_1;\n  input wrenable_reg_2;\n  input wrenable_reg_3;\n  input wrenable_reg_4;\n  input wrenable_reg_5;\n  input wrenable_reg_6;\n  input wrenable_reg_7;\n  input wrenable_reg_8;\n  // OUT\n  output Mout_oe_ram;\n  output Mout_we_ram;\n  output [31:0] Mout_addr_ram;\n  output [31:0] Mout_Wdata_ram;\n  output [5:0] Mout_data_ram_size;\n  output OUT_CONDITION_min_max_423521_423584;\n  output OUT_CONDITION_min_max_423521_423660;\n  // Component and signal declarations\n  wire [31:0] out_BMEMORY_CTRL_23_i0_BMEMORY_CTRL_23_i0;\n  wire [31:0] out_IUdata_converter_FU_18_i0_fu_min_max_423521_423678;\n  wire [31:0] out_IUdata_converter_FU_19_i0_fu_min_max_423521_423681;\n  wire [31:0] out_IUdata_converter_FU_20_i0_fu_min_max_423521_423684;\n  wire [31:0] out_IUdata_converter_FU_21_i0_fu_min_max_423521_423687;\n  wire [30:0] out_IUdata_converter_FU_3_i0_fu_min_max_423521_423693;\n  wire [31:0] out_MUX_0_BMEMORY_CTRL_23_i0_0_0_0;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_23_i0_1_0_0;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_23_i0_1_0_1;\n  wire [63:0] out_MUX_30_reg_1_0_0_0;\n  wire [31:0] out_MUX_31_reg_2_0_0_0;\n  wire [31:0] out_MUX_32_reg_3_0_0_0;\n  wire [31:0] out_MUX_36_reg_7_0_0_0;\n  wire [31:0] out_MUX_37_reg_8_0_0_0;\n  wire signed [31:0] out_UIdata_converter_FU_14_i0_fu_min_max_423521_423713;\n  wire signed [31:0] out_UIdata_converter_FU_15_i0_fu_min_max_423521_423715;\n  wire signed [31:0] out_UIdata_converter_FU_16_i0_fu_min_max_423521_423718;\n  wire signed [31:0] out_UIdata_converter_FU_17_i0_fu_min_max_423521_423720;\n  wire signed [31:0] out_UIdata_converter_FU_2_i0_fu_min_max_423521_423690;\n  wire signed [31:0] out_UIdata_converter_FU_5_i0_fu_min_max_423521_423696;\n  wire [29:0] out_UUdata_converter_FU_13_i0_fu_min_max_423521_423629;\n  wire [30:0] out_UUdata_converter_FU_4_i0_fu_min_max_423521_423582;\n  wire out_const_0;\n  wire [1:0] out_const_1;\n  wire [6:0] out_const_2;\n  wire out_const_3;\n  wire [1:0] out_const_4;\n  wire [31:0] out_const_5;\n  wire [30:0] out_const_6;\n  wire [63:0] out_conv_out_const_0_1_64;\n  wire [5:0] out_conv_out_const_2_7_6;\n  wire [31:0] out_conv_out_const_6_31_32;\n  wire out_lt_expr_FU_32_0_32_24_i0_fu_min_max_423521_423702;\n  wire signed [31:0] out_max_expr_FU_32_0_32_25_i0_fu_min_max_423521_423581;\n  wire signed [31:0] out_max_expr_FU_32_32_32_26_i0_fu_min_max_423521_423644;\n  wire signed [31:0] out_min_expr_FU_32_32_32_27_i0_fu_min_max_423521_423612;\n  wire out_read_cond_FU_22_i0_fu_min_max_423521_423660;\n  wire out_read_cond_FU_6_i0_fu_min_max_423521_423584;\n  wire [30:0] out_reg_0_reg_0;\n  wire [63:0] out_reg_1_reg_1;\n  wire [31:0] out_reg_2_reg_2;\n  wire [31:0] out_reg_3_reg_3;\n  wire [31:0] out_reg_4_reg_4;\n  wire [31:0] out_reg_5_reg_5;\n  wire out_reg_6_reg_6;\n  wire [31:0] out_reg_7_reg_7;\n  wire [31:0] out_reg_8_reg_8;\n  wire out_ui_eq_expr_FU_64_64_64_28_i0_fu_min_max_423521_423722;\n  wire [31:0] out_ui_lshift_expr_FU_32_0_32_29_i0_fu_min_max_423521_423710;\n  wire [63:0] out_ui_plus_expr_FU_64_0_64_30_i0_fu_min_max_423521_423634;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_32_32_31_i0_fu_min_max_423521_423622;\n  wire [31:0] out_uu_conv_conn_obj_0_UUdata_converter_FU_uu_conv_0;\n  wire [31:0] out_uu_conv_conn_obj_1_UUdata_converter_FU_uu_conv_1;\n  wire [31:0] out_uu_conv_conn_obj_2_UUdata_converter_FU_uu_conv_2;\n  wire [63:0] out_uu_conv_conn_obj_3_UUdata_converter_FU_uu_conv_3;\n  wire [31:0] sig_out_bus_mergerMout_Wdata_ram0_;\n  wire [31:0] sig_out_bus_mergerMout_addr_ram1_;\n  wire [5:0] sig_out_bus_mergerMout_data_ram_size2_;\n  wire sig_out_bus_mergerMout_oe_ram3_;\n  wire sig_out_bus_mergerMout_we_ram4_;\n  \n  BMEMORY_CTRL #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_in3(6),\n    .BITSIZE_out1(32),\n    .BITSIZE_Min_addr_ram(32),\n    .BITSIZE_Mout_addr_ram(32),\n    .BITSIZE_M_Rdata_ram(32),\n    .BITSIZE_Min_Wdata_ram(32),\n    .BITSIZE_Mout_Wdata_ram(32),\n    .BITSIZE_Min_data_ram_size(6),\n    .BITSIZE_Mout_data_ram_size(6)) BMEMORY_CTRL_23_i0 (.out1(out_BMEMORY_CTRL_23_i0_BMEMORY_CTRL_23_i0),\n    .Mout_oe_ram(sig_out_bus_mergerMout_oe_ram3_),\n    .Mout_we_ram(sig_out_bus_mergerMout_we_ram4_),\n    .Mout_addr_ram(sig_out_bus_mergerMout_addr_ram1_),\n    .Mout_Wdata_ram(sig_out_bus_mergerMout_Wdata_ram0_),\n    .Mout_data_ram_size(sig_out_bus_mergerMout_data_ram_size2_),\n    .clock(clock),\n    .in1(out_MUX_0_BMEMORY_CTRL_23_i0_0_0_0),\n    .in2(out_MUX_1_BMEMORY_CTRL_23_i0_1_0_1),\n    .in3(out_conv_out_const_2_7_6),\n    .in4(out_const_3),\n    .sel_LOAD(fuselector_BMEMORY_CTRL_23_i0_LOAD),\n    .sel_STORE(fuselector_BMEMORY_CTRL_23_i0_STORE),\n    .Min_oe_ram(Min_oe_ram),\n    .Min_we_ram(Min_we_ram),\n    .Min_addr_ram(Min_addr_ram),\n    .M_Rdata_ram(M_Rdata_ram),\n    .Min_Wdata_ram(Min_Wdata_ram),\n    .Min_data_ram_size(Min_data_ram_size),\n    .M_DataRdy(M_DataRdy));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_0_BMEMORY_CTRL_23_i0_0_0_0 (.out1(out_MUX_0_BMEMORY_CTRL_23_i0_0_0_0),\n    .sel(selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0),\n    .in1(out_uu_conv_conn_obj_1_UUdata_converter_FU_uu_conv_1),\n    .in2(out_uu_conv_conn_obj_2_UUdata_converter_FU_uu_conv_2));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_23_i0_1_0_0 (.out1(out_MUX_1_BMEMORY_CTRL_23_i0_1_0_0),\n    .sel(selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0),\n    .in1(in_port_Pd63),\n    .in2(in_port_Pd64));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_23_i0_1_0_1 (.out1(out_MUX_1_BMEMORY_CTRL_23_i0_1_0_1),\n    .sel(selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1),\n    .in1(out_ui_pointer_plus_expr_FU_32_32_32_31_i0_fu_min_max_423521_423622),\n    .in2(out_MUX_1_BMEMORY_CTRL_23_i0_1_0_0));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_30_reg_1_0_0_0 (.out1(out_MUX_30_reg_1_0_0_0),\n    .sel(selector_MUX_30_reg_1_0_0_0),\n    .in1(out_ui_plus_expr_FU_64_0_64_30_i0_fu_min_max_423521_423634),\n    .in2(out_uu_conv_conn_obj_3_UUdata_converter_FU_uu_conv_3));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_31_reg_2_0_0_0 (.out1(out_MUX_31_reg_2_0_0_0),\n    .sel(selector_MUX_31_reg_2_0_0_0),\n    .in1(out_IUdata_converter_FU_21_i0_fu_min_max_423521_423687),\n    .in2(out_uu_conv_conn_obj_0_UUdata_converter_FU_uu_conv_0));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_32_reg_3_0_0_0 (.out1(out_MUX_32_reg_3_0_0_0),\n    .sel(selector_MUX_32_reg_3_0_0_0),\n    .in1(out_const_5),\n    .in2(out_IUdata_converter_FU_20_i0_fu_min_max_423521_423684));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_36_reg_7_0_0_0 (.out1(out_MUX_36_reg_7_0_0_0),\n    .sel(selector_MUX_36_reg_7_0_0_0),\n    .in1(out_IUdata_converter_FU_18_i0_fu_min_max_423521_423678),\n    .in2(out_uu_conv_conn_obj_0_UUdata_converter_FU_uu_conv_0));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_37_reg_8_0_0_0 (.out1(out_MUX_37_reg_8_0_0_0),\n    .sel(selector_MUX_37_reg_8_0_0_0),\n    .in1(out_const_5),\n    .in2(out_IUdata_converter_FU_19_i0_fu_min_max_423521_423681));\n  UUdata_converter_FU #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) UUdata_converter_FU_uu_conv_0 (.out1(out_uu_conv_conn_obj_0_UUdata_converter_FU_uu_conv_0),\n    .in1(out_conv_out_const_6_31_32));\n  UUdata_converter_FU #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) UUdata_converter_FU_uu_conv_1 (.out1(out_uu_conv_conn_obj_1_UUdata_converter_FU_uu_conv_1),\n    .in1(out_reg_8_reg_8));\n  UUdata_converter_FU #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) UUdata_converter_FU_uu_conv_2 (.out1(out_uu_conv_conn_obj_2_UUdata_converter_FU_uu_conv_2),\n    .in1(out_reg_7_reg_7));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_3 (.out1(out_uu_conv_conn_obj_3_UUdata_converter_FU_uu_conv_3),\n    .in1(out_conv_out_const_0_1_64));\n  constant_value #(.BITSIZE_out1(1),\n    .value(1'b0)) const_0 (.out1(out_const_0));\n  constant_value #(.BITSIZE_out1(2),\n    .value(2'b01)) const_1 (.out1(out_const_1));\n  constant_value #(.BITSIZE_out1(7),\n    .value(7'b0100000)) const_2 (.out1(out_const_2));\n  constant_value #(.BITSIZE_out1(1),\n    .value(1'b1)) const_3 (.out1(out_const_3));\n  constant_value #(.BITSIZE_out1(2),\n    .value(2'b10)) const_4 (.out1(out_const_4));\n  constant_value #(.BITSIZE_out1(32),\n    .value(32'b10000000000000000000000000000000)) const_5 (.out1(out_const_5));\n  constant_value #(.BITSIZE_out1(31),\n    .value(31'b1111111111111111111111111111111)) const_6 (.out1(out_const_6));\n  UUdata_converter_FU #(.BITSIZE_in1(1),\n    .BITSIZE_out1(64)) conv_out_const_0_1_64 (.out1(out_conv_out_const_0_1_64),\n    .in1(out_const_0));\n  UUdata_converter_FU #(.BITSIZE_in1(7),\n    .BITSIZE_out1(6)) conv_out_const_2_7_6 (.out1(out_conv_out_const_2_7_6),\n    .in1(out_const_2));\n  UUdata_converter_FU #(.BITSIZE_in1(31),\n    .BITSIZE_out1(32)) conv_out_const_6_31_32 (.out1(out_conv_out_const_6_31_32),\n    .in1(out_const_6));\n  max_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(1),\n    .BITSIZE_out1(32)) fu_min_max_423521_423581 (.out1(out_max_expr_FU_32_0_32_25_i0_fu_min_max_423521_423581),\n    .in1(out_UIdata_converter_FU_2_i0_fu_min_max_423521_423690),\n    .in2(out_const_0));\n  UUdata_converter_FU #(.BITSIZE_in1(31),\n    .BITSIZE_out1(31)) fu_min_max_423521_423582 (.out1(out_UUdata_converter_FU_4_i0_fu_min_max_423521_423582),\n    .in1(out_IUdata_converter_FU_3_i0_fu_min_max_423521_423693));\n  read_cond_FU #(.BITSIZE_in1(1)) fu_min_max_423521_423584 (.out1(out_read_cond_FU_6_i0_fu_min_max_423521_423584),\n    .in1(out_lt_expr_FU_32_0_32_24_i0_fu_min_max_423521_423702));\n  min_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) fu_min_max_423521_423612 (.out1(out_min_expr_FU_32_32_32_27_i0_fu_min_max_423521_423612),\n    .in1(out_UIdata_converter_FU_16_i0_fu_min_max_423521_423718),\n    .in2(out_reg_5_reg_5));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_min_max_423521_423622 (.out1(out_ui_pointer_plus_expr_FU_32_32_32_31_i0_fu_min_max_423521_423622),\n    .in1(in_port_Pd61),\n    .in2(out_ui_lshift_expr_FU_32_0_32_29_i0_fu_min_max_423521_423710));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(30)) fu_min_max_423521_423629 (.out1(out_UUdata_converter_FU_13_i0_fu_min_max_423521_423629),\n    .in1(out_reg_1_reg_1));\n  ui_plus_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(1),\n    .BITSIZE_out1(64)) fu_min_max_423521_423634 (.out1(out_ui_plus_expr_FU_64_0_64_30_i0_fu_min_max_423521_423634),\n    .in1(out_reg_1_reg_1),\n    .in2(out_const_3));\n  max_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) fu_min_max_423521_423644 (.out1(out_max_expr_FU_32_32_32_26_i0_fu_min_max_423521_423644),\n    .in1(out_UIdata_converter_FU_14_i0_fu_min_max_423521_423713),\n    .in2(out_reg_4_reg_4));\n  read_cond_FU #(.BITSIZE_in1(1)) fu_min_max_423521_423660 (.out1(out_read_cond_FU_22_i0_fu_min_max_423521_423660),\n    .in1(out_reg_6_reg_6));\n  IUdata_converter_FU #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) fu_min_max_423521_423678 (.out1(out_IUdata_converter_FU_18_i0_fu_min_max_423521_423678),\n    .in1(out_min_expr_FU_32_32_32_27_i0_fu_min_max_423521_423612));\n  IUdata_converter_FU #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) fu_min_max_423521_423681 (.out1(out_IUdata_converter_FU_19_i0_fu_min_max_423521_423681),\n    .in1(out_max_expr_FU_32_32_32_26_i0_fu_min_max_423521_423644));\n  IUdata_converter_FU #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) fu_min_max_423521_423684 (.out1(out_IUdata_converter_FU_20_i0_fu_min_max_423521_423684),\n    .in1(out_max_expr_FU_32_32_32_26_i0_fu_min_max_423521_423644));\n  IUdata_converter_FU #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) fu_min_max_423521_423687 (.out1(out_IUdata_converter_FU_21_i0_fu_min_max_423521_423687),\n    .in1(out_min_expr_FU_32_32_32_27_i0_fu_min_max_423521_423612));\n  UIdata_converter_FU #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) fu_min_max_423521_423690 (.out1(out_UIdata_converter_FU_2_i0_fu_min_max_423521_423690),\n    .in1(in_port_Pd62));\n  IUdata_converter_FU #(.BITSIZE_in1(32),\n    .BITSIZE_out1(31)) fu_min_max_423521_423693 (.out1(out_IUdata_converter_FU_3_i0_fu_min_max_423521_423693),\n    .in1(out_max_expr_FU_32_0_32_25_i0_fu_min_max_423521_423581));\n  UIdata_converter_FU #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) fu_min_max_423521_423696 (.out1(out_UIdata_converter_FU_5_i0_fu_min_max_423521_423696),\n    .in1(in_port_Pd62));\n  lt_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(2),\n    .BITSIZE_out1(1)) fu_min_max_423521_423702 (.out1(out_lt_expr_FU_32_0_32_24_i0_fu_min_max_423521_423702),\n    .in1(out_UIdata_converter_FU_5_i0_fu_min_max_423521_423696),\n    .in2(out_const_1));\n  ui_lshift_expr_FU #(.BITSIZE_in1(30),\n    .BITSIZE_in2(2),\n    .BITSIZE_out1(32),\n    .PRECISION(32)) fu_min_max_423521_423710 (.out1(out_ui_lshift_expr_FU_32_0_32_29_i0_fu_min_max_423521_423710),\n    .in1(out_UUdata_converter_FU_13_i0_fu_min_max_423521_423629),\n    .in2(out_const_4));\n  UIdata_converter_FU #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) fu_min_max_423521_423713 (.out1(out_UIdata_converter_FU_14_i0_fu_min_max_423521_423713),\n    .in1(out_BMEMORY_CTRL_23_i0_BMEMORY_CTRL_23_i0));\n  UIdata_converter_FU #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) fu_min_max_423521_423715 (.out1(out_UIdata_converter_FU_15_i0_fu_min_max_423521_423715),\n    .in1(out_reg_3_reg_3));\n  UIdata_converter_FU #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) fu_min_max_423521_423718 (.out1(out_UIdata_converter_FU_16_i0_fu_min_max_423521_423718),\n    .in1(out_BMEMORY_CTRL_23_i0_BMEMORY_CTRL_23_i0));\n  UIdata_converter_FU #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) fu_min_max_423521_423720 (.out1(out_UIdata_converter_FU_17_i0_fu_min_max_423521_423720),\n    .in1(out_reg_2_reg_2));\n  ui_eq_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(31),\n    .BITSIZE_out1(1)) fu_min_max_423521_423722 (.out1(out_ui_eq_expr_FU_64_64_64_28_i0_fu_min_max_423521_423722),\n    .in1(out_ui_plus_expr_FU_64_0_64_30_i0_fu_min_max_423521_423634),\n    .in2(out_reg_0_reg_0));\n  register_SE #(.BITSIZE_in1(31),\n    .BITSIZE_out1(31)) reg_0 (.out1(out_reg_0_reg_0),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_UUdata_converter_FU_4_i0_fu_min_max_423521_423582),\n    .wenable(wrenable_reg_0));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_1 (.out1(out_reg_1_reg_1),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_30_reg_1_0_0_0),\n    .wenable(wrenable_reg_1));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_2 (.out1(out_reg_2_reg_2),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_31_reg_2_0_0_0),\n    .wenable(wrenable_reg_2));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_3 (.out1(out_reg_3_reg_3),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_32_reg_3_0_0_0),\n    .wenable(wrenable_reg_3));\n  register_STD #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_4 (.out1(out_reg_4_reg_4),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_UIdata_converter_FU_15_i0_fu_min_max_423521_423715),\n    .wenable(wrenable_reg_4));\n  register_STD #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_5 (.out1(out_reg_5_reg_5),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_UIdata_converter_FU_17_i0_fu_min_max_423521_423720),\n    .wenable(wrenable_reg_5));\n  register_STD #(.BITSIZE_in1(1),\n    .BITSIZE_out1(1)) reg_6 (.out1(out_reg_6_reg_6),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_eq_expr_FU_64_64_64_28_i0_fu_min_max_423521_423722),\n    .wenable(wrenable_reg_6));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_7 (.out1(out_reg_7_reg_7),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_36_reg_7_0_0_0),\n    .wenable(wrenable_reg_7));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_8 (.out1(out_reg_8_reg_8),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_37_reg_8_0_0_0),\n    .wenable(wrenable_reg_8));\n  // io-signal post fix\n  assign Mout_oe_ram = sig_out_bus_mergerMout_oe_ram3_;\n  assign Mout_we_ram = sig_out_bus_mergerMout_we_ram4_;\n  assign Mout_addr_ram = sig_out_bus_mergerMout_addr_ram1_;\n  assign Mout_Wdata_ram = sig_out_bus_mergerMout_Wdata_ram0_;\n  assign Mout_data_ram_size = sig_out_bus_mergerMout_data_ram_size2_;\n  assign OUT_CONDITION_min_max_423521_423584 = out_read_cond_FU_6_i0_fu_min_max_423521_423584;\n  assign OUT_CONDITION_min_max_423521_423660 = out_read_cond_FU_22_i0_fu_min_max_423521_423660;\n\nendmodule\n\n// FSM based controller description for min_max\n// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.\n// Author(s): Component automatically generated by bambu\n// License: THIS COMPONENT IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n`timescale 1ns / 1ps\nmodule controller_min_max(done_port,\n  fuselector_BMEMORY_CTRL_23_i0_LOAD,\n  fuselector_BMEMORY_CTRL_23_i0_STORE,\n  selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0,\n  selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0,\n  selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1,\n  selector_MUX_30_reg_1_0_0_0,\n  selector_MUX_31_reg_2_0_0_0,\n  selector_MUX_32_reg_3_0_0_0,\n  selector_MUX_36_reg_7_0_0_0,\n  selector_MUX_37_reg_8_0_0_0,\n  wrenable_reg_0,\n  wrenable_reg_1,\n  wrenable_reg_2,\n  wrenable_reg_3,\n  wrenable_reg_4,\n  wrenable_reg_5,\n  wrenable_reg_6,\n  wrenable_reg_7,\n  wrenable_reg_8,\n  OUT_CONDITION_min_max_423521_423584,\n  OUT_CONDITION_min_max_423521_423660,\n  clock,\n  reset,\n  start_port);\n  // IN\n  input OUT_CONDITION_min_max_423521_423584;\n  input OUT_CONDITION_min_max_423521_423660;\n  input clock;\n  input reset;\n  input start_port;\n  // OUT\n  output done_port;\n  output fuselector_BMEMORY_CTRL_23_i0_LOAD;\n  output fuselector_BMEMORY_CTRL_23_i0_STORE;\n  output selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0;\n  output selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0;\n  output selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1;\n  output selector_MUX_30_reg_1_0_0_0;\n  output selector_MUX_31_reg_2_0_0_0;\n  output selector_MUX_32_reg_3_0_0_0;\n  output selector_MUX_36_reg_7_0_0_0;\n  output selector_MUX_37_reg_8_0_0_0;\n  output wrenable_reg_0;\n  output wrenable_reg_1;\n  output wrenable_reg_2;\n  output wrenable_reg_3;\n  output wrenable_reg_4;\n  output wrenable_reg_5;\n  output wrenable_reg_6;\n  output wrenable_reg_7;\n  output wrenable_reg_8;\n  parameter [2:0] S_0 = 3'd0,\n    S_4 = 3'd4,\n    S_5 = 3'd5,\n    S_1 = 3'd1,\n    S_2 = 3'd2,\n    S_3 = 3'd3;\n  reg [2:0] _present_state=S_0, _next_state;\n  reg done_port;\n  reg fuselector_BMEMORY_CTRL_23_i0_LOAD;\n  reg fuselector_BMEMORY_CTRL_23_i0_STORE;\n  reg selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0;\n  reg selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0;\n  reg selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1;\n  reg selector_MUX_30_reg_1_0_0_0;\n  reg selector_MUX_31_reg_2_0_0_0;\n  reg selector_MUX_32_reg_3_0_0_0;\n  reg selector_MUX_36_reg_7_0_0_0;\n  reg selector_MUX_37_reg_8_0_0_0;\n  reg wrenable_reg_0;\n  reg wrenable_reg_1;\n  reg wrenable_reg_2;\n  reg wrenable_reg_3;\n  reg wrenable_reg_4;\n  reg wrenable_reg_5;\n  reg wrenable_reg_6;\n  reg wrenable_reg_7;\n  reg wrenable_reg_8;\n  \n  always @(posedge clock)\n    if (reset == 1'b0) _present_state <= S_0;\n    else _present_state <= _next_state;\n  \n  always @(*)\n  begin\n    done_port = 1'b0;\n    fuselector_BMEMORY_CTRL_23_i0_LOAD = 1'b0;\n    fuselector_BMEMORY_CTRL_23_i0_STORE = 1'b0;\n    selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1 = 1'b0;\n    selector_MUX_30_reg_1_0_0_0 = 1'b0;\n    selector_MUX_31_reg_2_0_0_0 = 1'b0;\n    selector_MUX_32_reg_3_0_0_0 = 1'b0;\n    selector_MUX_36_reg_7_0_0_0 = 1'b0;\n    selector_MUX_37_reg_8_0_0_0 = 1'b0;\n    wrenable_reg_0 = 1'b0;\n    wrenable_reg_1 = 1'b0;\n    wrenable_reg_2 = 1'b0;\n    wrenable_reg_3 = 1'b0;\n    wrenable_reg_4 = 1'b0;\n    wrenable_reg_5 = 1'b0;\n    wrenable_reg_6 = 1'b0;\n    wrenable_reg_7 = 1'b0;\n    wrenable_reg_8 = 1'b0;\n    case (_present_state)\n      S_0 :\n        if(start_port == 1'b1)\n        begin\n          selector_MUX_32_reg_3_0_0_0 = 1'b1;\n          selector_MUX_37_reg_8_0_0_0 = 1'b1;\n          wrenable_reg_0 = 1'b1;\n          wrenable_reg_1 = 1'b1;\n          wrenable_reg_2 = 1'b1;\n          wrenable_reg_3 = 1'b1;\n          wrenable_reg_7 = 1'b1;\n          wrenable_reg_8 = 1'b1;\n          if (OUT_CONDITION_min_max_423521_423584 == 1'b1)\n            begin\n              _next_state = S_1;\n              selector_MUX_32_reg_3_0_0_0 = 1'b0;\n              wrenable_reg_0 = 1'b0;\n              wrenable_reg_1 = 1'b0;\n              wrenable_reg_2 = 1'b0;\n              wrenable_reg_3 = 1'b0;\n            end\n          else\n            begin\n              _next_state = S_4;\n              selector_MUX_37_reg_8_0_0_0 = 1'b0;\n              wrenable_reg_7 = 1'b0;\n              wrenable_reg_8 = 1'b0;\n            end\n        end\n        else\n        begin\n          _next_state = S_0;\n        end\n      S_4 :\n        begin\n          fuselector_BMEMORY_CTRL_23_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1 = 1'b1;\n          selector_MUX_30_reg_1_0_0_0 = 1'b1;\n          wrenable_reg_1 = 1'b1;\n          wrenable_reg_4 = 1'b1;\n          wrenable_reg_5 = 1'b1;\n          wrenable_reg_6 = 1'b1;\n          _next_state = S_5;\n        end\n      S_5 :\n        begin\n          selector_MUX_31_reg_2_0_0_0 = 1'b1;\n          selector_MUX_36_reg_7_0_0_0 = 1'b1;\n          wrenable_reg_2 = 1'b1;\n          wrenable_reg_3 = 1'b1;\n          wrenable_reg_7 = 1'b1;\n          wrenable_reg_8 = 1'b1;\n          if (OUT_CONDITION_min_max_423521_423660 == 1'b1)\n            begin\n              _next_state = S_1;\n              selector_MUX_31_reg_2_0_0_0 = 1'b0;\n              wrenable_reg_2 = 1'b0;\n              wrenable_reg_3 = 1'b0;\n            end\n          else\n            begin\n              _next_state = S_4;\n              selector_MUX_36_reg_7_0_0_0 = 1'b0;\n              wrenable_reg_7 = 1'b0;\n              wrenable_reg_8 = 1'b0;\n            end\n        end\n      S_1 :\n        begin\n          fuselector_BMEMORY_CTRL_23_i0_STORE = 1'b1;\n          _next_state = S_2;\n        end\n      S_2 :\n        begin\n          fuselector_BMEMORY_CTRL_23_i0_STORE = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0 = 1'b1;\n          _next_state = S_3;\n          done_port = 1'b1;\n        end\n      S_3 :\n        begin\n          _next_state = S_0;\n        end\n      default :\n        begin\n          _next_state = S_0;\n        end\n    endcase\n  end\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Marco Lattuada <marco.lattuada@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule flipflop_AR(clock,\n  reset,\n  in1,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_out1=1;\n  // IN\n  input clock;\n  input reset;\n  input in1;\n  // OUT\n  output out1;\n  \n  reg reg_out1 =0;\n  assign out1 = reg_out1;\n  always @(posedge clock )\n    if (reset == 1'b0)\n      reg_out1 <= {BITSIZE_out1{1'b0}};\n    else\n      reg_out1 <= in1;\nendmodule\n\n// Top component for min_max\n// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.\n// Author(s): Component automatically generated by bambu\n// License: THIS COMPONENT IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n`timescale 1ns / 1ps\nmodule _min_max(clock,\n  reset,\n  start_port,\n  done_port,\n  Pd61,\n  Pd62,\n  Pd63,\n  Pd64,\n  M_Rdata_ram,\n  M_DataRdy,\n  Min_oe_ram,\n  Min_we_ram,\n  Min_addr_ram,\n  Min_Wdata_ram,\n  Min_data_ram_size,\n  Mout_oe_ram,\n  Mout_we_ram,\n  Mout_addr_ram,\n  Mout_Wdata_ram,\n  Mout_data_ram_size);\n  // IN\n  input clock;\n  input reset;\n  input start_port;\n  input [31:0] Pd61;\n  input [31:0] Pd62;\n  input [31:0] Pd63;\n  input [31:0] Pd64;\n  input [31:0] M_Rdata_ram;\n  input M_DataRdy;\n  input Min_oe_ram;\n  input Min_we_ram;\n  input [31:0] Min_addr_ram;\n  input [31:0] Min_Wdata_ram;\n  input [5:0] Min_data_ram_size;\n  // OUT\n  output done_port;\n  output Mout_oe_ram;\n  output Mout_we_ram;\n  output [31:0] Mout_addr_ram;\n  output [31:0] Mout_Wdata_ram;\n  output [5:0] Mout_data_ram_size;\n  // Component and signal declarations\n  wire OUT_CONDITION_min_max_423521_423584;\n  wire OUT_CONDITION_min_max_423521_423660;\n  wire done_delayed_REG_signal_in;\n  wire done_delayed_REG_signal_out;\n  wire fuselector_BMEMORY_CTRL_23_i0_LOAD;\n  wire fuselector_BMEMORY_CTRL_23_i0_STORE;\n  wire selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0;\n  wire selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0;\n  wire selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1;\n  wire selector_MUX_30_reg_1_0_0_0;\n  wire selector_MUX_31_reg_2_0_0_0;\n  wire selector_MUX_32_reg_3_0_0_0;\n  wire selector_MUX_36_reg_7_0_0_0;\n  wire selector_MUX_37_reg_8_0_0_0;\n  wire wrenable_reg_0;\n  wire wrenable_reg_1;\n  wire wrenable_reg_2;\n  wire wrenable_reg_3;\n  wire wrenable_reg_4;\n  wire wrenable_reg_5;\n  wire wrenable_reg_6;\n  wire wrenable_reg_7;\n  wire wrenable_reg_8;\n  \n  controller_min_max Controller_i (.done_port(done_delayed_REG_signal_in),\n    .fuselector_BMEMORY_CTRL_23_i0_LOAD(fuselector_BMEMORY_CTRL_23_i0_LOAD),\n    .fuselector_BMEMORY_CTRL_23_i0_STORE(fuselector_BMEMORY_CTRL_23_i0_STORE),\n    .selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0(selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0),\n    .selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0(selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0),\n    .selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1(selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1),\n    .selector_MUX_30_reg_1_0_0_0(selector_MUX_30_reg_1_0_0_0),\n    .selector_MUX_31_reg_2_0_0_0(selector_MUX_31_reg_2_0_0_0),\n    .selector_MUX_32_reg_3_0_0_0(selector_MUX_32_reg_3_0_0_0),\n    .selector_MUX_36_reg_7_0_0_0(selector_MUX_36_reg_7_0_0_0),\n    .selector_MUX_37_reg_8_0_0_0(selector_MUX_37_reg_8_0_0_0),\n    .wrenable_reg_0(wrenable_reg_0),\n    .wrenable_reg_1(wrenable_reg_1),\n    .wrenable_reg_2(wrenable_reg_2),\n    .wrenable_reg_3(wrenable_reg_3),\n    .wrenable_reg_4(wrenable_reg_4),\n    .wrenable_reg_5(wrenable_reg_5),\n    .wrenable_reg_6(wrenable_reg_6),\n    .wrenable_reg_7(wrenable_reg_7),\n    .wrenable_reg_8(wrenable_reg_8),\n    .OUT_CONDITION_min_max_423521_423584(OUT_CONDITION_min_max_423521_423584),\n    .OUT_CONDITION_min_max_423521_423660(OUT_CONDITION_min_max_423521_423660),\n    .clock(clock),\n    .reset(reset),\n    .start_port(start_port));\n  datapath_min_max Datapath_i (.Mout_oe_ram(Mout_oe_ram),\n    .Mout_we_ram(Mout_we_ram),\n    .Mout_addr_ram(Mout_addr_ram),\n    .Mout_Wdata_ram(Mout_Wdata_ram),\n    .Mout_data_ram_size(Mout_data_ram_size),\n    .OUT_CONDITION_min_max_423521_423584(OUT_CONDITION_min_max_423521_423584),\n    .OUT_CONDITION_min_max_423521_423660(OUT_CONDITION_min_max_423521_423660),\n    .clock(clock),\n    .reset(reset),\n    .in_port_Pd61(Pd61),\n    .in_port_Pd62(Pd62),\n    .in_port_Pd63(Pd63),\n    .in_port_Pd64(Pd64),\n    .M_Rdata_ram(M_Rdata_ram),\n    .M_DataRdy(M_DataRdy),\n    .Min_oe_ram(Min_oe_ram),\n    .Min_we_ram(Min_we_ram),\n    .Min_addr_ram(Min_addr_ram),\n    .Min_Wdata_ram(Min_Wdata_ram),\n    .Min_data_ram_size(Min_data_ram_size),\n    .fuselector_BMEMORY_CTRL_23_i0_LOAD(fuselector_BMEMORY_CTRL_23_i0_LOAD),\n    .fuselector_BMEMORY_CTRL_23_i0_STORE(fuselector_BMEMORY_CTRL_23_i0_STORE),\n    .selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0(selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0),\n    .selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0(selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0),\n    .selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1(selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1),\n    .selector_MUX_30_reg_1_0_0_0(selector_MUX_30_reg_1_0_0_0),\n    .selector_MUX_31_reg_2_0_0_0(selector_MUX_31_reg_2_0_0_0),\n    .selector_MUX_32_reg_3_0_0_0(selector_MUX_32_reg_3_0_0_0),\n    .selector_MUX_36_reg_7_0_0_0(selector_MUX_36_reg_7_0_0_0),\n    .selector_MUX_37_reg_8_0_0_0(selector_MUX_37_reg_8_0_0_0),\n    .wrenable_reg_0(wrenable_reg_0),\n    .wrenable_reg_1(wrenable_reg_1),\n    .wrenable_reg_2(wrenable_reg_2),\n    .wrenable_reg_3(wrenable_reg_3),\n    .wrenable_reg_4(wrenable_reg_4),\n    .wrenable_reg_5(wrenable_reg_5),\n    .wrenable_reg_6(wrenable_reg_6),\n    .wrenable_reg_7(wrenable_reg_7),\n    .wrenable_reg_8(wrenable_reg_8));\n  flipflop_AR #(.BITSIZE_in1(1),\n    .BITSIZE_out1(1)) done_delayed_REG (.out1(done_delayed_REG_signal_out),\n    .clock(clock),\n    .reset(reset),\n    .in1(done_delayed_REG_signal_in));\n  // io-signal post fix\n  assign done_port = done_delayed_REG_signal_out;\n\nendmodule\n\n// Minimal interface for function: min_max\n// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.\n// Author(s): Component automatically generated by bambu\n// License: THIS COMPONENT IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n`timescale 1ns / 1ps\nmodule min_max(clk,\n  reset,\n  start_port,\n  Pd61,\n  Pd62,\n  Pd63,\n  Pd64,\n  M_Rdata_ram,\n  M_DataRdy,\n  done_port,\n  Mout_oe_ram,\n  Mout_we_ram,\n  Mout_addr_ram,\n  Mout_Wdata_ram,\n  Mout_data_ram_size);\n  // IN\n  input clk;\n  input reset;\n  input start_port;\n  input [31:0] Pd61;\n  input [31:0] Pd62;\n  input [31:0] Pd63;\n  input [31:0] Pd64;\n  input [31:0] M_Rdata_ram;\n  input M_DataRdy;\n  // OUT\n  output done_port;\n  output Mout_oe_ram;\n  output Mout_we_ram;\n  output [31:0] Mout_addr_ram;\n  output [31:0] Mout_Wdata_ram;\n  output [5:0] Mout_data_ram_size;\n  // Component and signal declarations\n  \n  _min_max _min_max_i0 (.done_port(done_port),\n    .Mout_oe_ram(Mout_oe_ram),\n    .Mout_we_ram(Mout_we_ram),\n    .Mout_addr_ram(Mout_addr_ram),\n    .Mout_Wdata_ram(Mout_Wdata_ram),\n    .Mout_data_ram_size(Mout_data_ram_size),\n    .clock(clk),\n    .reset(reset),\n    .start_port(start_port),\n    .Pd61(Pd61),\n    .Pd62(Pd62),\n    .Pd63(Pd63),\n    .Pd64(Pd64),\n    .M_Rdata_ram(M_Rdata_ram),\n    .M_DataRdy(M_DataRdy),\n    .Min_oe_ram(1'b0),\n    .Min_we_ram(1'b0),\n    .Min_addr_ram(32'b00000000000000000000000000000000),\n    .Min_Wdata_ram(32'b00000000000000000000000000000000),\n    .Min_data_ram_size(6'b000000));\n\nendmodule\n\n\n"
                .into(),
        })
    }
}


#[allow(dead_code)]
const VERILOG: &str = r#"// 
// Politecnico di Milano
// Code created using PandA - Version: PandA 2023.2 - Revision 891ec3caed502474cab0813cc4a9fc678deabaa5 - Date 2023-06-30T16:26:21
// /nix/store/9c5lz0md936sjhs9hw1ya6kghvkfc4zg-bambu-wrapped/bin/bambu executed with: /nix/store/9c5lz0md936sjhs9hw1ya6kghvkfc4zg-bambu-wrapped/bin/bambu --simulator=VERILATOR --top-fname=min_max --clock-name=clk --compiler=I386_CLANG16 --channels-type=MEM_ACC_11 --channels-number=1 -Os --target=/home/lennart/Documents/bachelor-thesis/thesis/experiments/device.xml result.ll 
// 
// Send any bug to: panda-info@polimi.it
// ************************************************************************
// The following text holds for all the components tagged with PANDA_LGPLv3.
// They are all part of the BAMBU/PANDA IP LIBRARY.
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with the PandA framework; see the files COPYING.LIB
// If not, see <http://www.gnu.org/licenses/>.
// ************************************************************************

`ifdef __ICARUS__
  `define _SIM_HAVE_CLOG2
`endif
`ifdef VERILATOR
  `define _SIM_HAVE_CLOG2
`endif
`ifdef MODEL_TECH
  `define _SIM_HAVE_CLOG2
`endif
`ifdef VCS
  `define _SIM_HAVE_CLOG2
`endif
`ifdef NCVERILOG
  `define _SIM_HAVE_CLOG2
`endif
`ifdef XILINX_SIMULATOR
  `define _SIM_HAVE_CLOG2
`endif
`ifdef XILINX_ISIM
  `define _SIM_HAVE_CLOG2
`endif

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>, Christian Pilato <christian.pilato@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module constant_value(out1);
  parameter BITSIZE_out1=1,
    value=1'b0;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = value;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module register_SE(clock,
  reset,
  in1,
  wenable,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_out1=1;
  // IN
  input clock;
  input reset;
  input [BITSIZE_in1-1:0] in1;
  input wenable;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  
  reg [BITSIZE_out1-1:0] reg_out1 =0;
  assign out1 = reg_out1;
  always @(posedge clock)
    if (wenable)
      reg_out1 <= in1;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module register_STD(clock,
  reset,
  in1,
  wenable,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_out1=1;
  // IN
  input clock;
  input reset;
  input [BITSIZE_in1-1:0] in1;
  input wenable;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  reg [BITSIZE_out1-1:0] reg_out1 =0;
  assign out1 = reg_out1;
  always @(posedge clock)
    reg_out1 <= in1;

endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module UIdata_converter_FU(in1,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  // OUT
  output signed [BITSIZE_out1-1:0] out1;
  generate
  if (BITSIZE_out1 <= BITSIZE_in1)
  begin
    assign out1 = in1[BITSIZE_out1-1:0];
  end
  else
  begin
    assign out1 = {{(BITSIZE_out1-BITSIZE_in1){1'b0}},in1};
  end
  endgenerate
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module IUdata_converter_FU(in1,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_out1=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  generate
  if (BITSIZE_out1 <= BITSIZE_in1)
  begin
    assign out1 = in1[BITSIZE_out1-1:0];
  end
  else
  begin
    assign out1 = {{(BITSIZE_out1-BITSIZE_in1){in1[BITSIZE_in1-1]}},in1};
  end
  endgenerate
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module UUdata_converter_FU(in1,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  generate
  if (BITSIZE_out1 <= BITSIZE_in1)
  begin
    assign out1 = in1[BITSIZE_out1-1:0];
  end
  else
  begin
    assign out1 = {{(BITSIZE_out1-BITSIZE_in1){1'b0}},in1};
  end
  endgenerate
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module read_cond_FU(in1,
  out1);
  parameter BITSIZE_in1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  // OUT
  output out1;
  assign out1 = in1 != {BITSIZE_in1{1'b0}};
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module BMEMORY_CTRL(clock,
  in1,
  in2,
  in3,
  in4,
  sel_LOAD,
  sel_STORE,
  out1,
  Min_oe_ram,
  Mout_oe_ram,
  Min_we_ram,
  Mout_we_ram,
  Min_addr_ram,
  Mout_addr_ram,
  M_Rdata_ram,
  Min_Wdata_ram,
  Mout_Wdata_ram,
  Min_data_ram_size,
  Mout_data_ram_size,
  M_DataRdy);
  parameter BITSIZE_in1=1,
    BITSIZE_in2=1,
    BITSIZE_in3=1,
    BITSIZE_out1=1,
    BITSIZE_Min_addr_ram=1,
    BITSIZE_Mout_addr_ram=1,
    BITSIZE_M_Rdata_ram=8,
    BITSIZE_Min_Wdata_ram=8,
    BITSIZE_Mout_Wdata_ram=8,
    BITSIZE_Min_data_ram_size=1,
    BITSIZE_Mout_data_ram_size=1;
  // IN
  input clock;
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  input [BITSIZE_in3-1:0] in3;
  input in4;
  input sel_LOAD;
  input sel_STORE;
  input Min_oe_ram;
  input Min_we_ram;
  input [BITSIZE_Min_addr_ram-1:0] Min_addr_ram;
  input [BITSIZE_M_Rdata_ram-1:0] M_Rdata_ram;
  input [BITSIZE_Min_Wdata_ram-1:0] Min_Wdata_ram;
  input [BITSIZE_Min_data_ram_size-1:0] Min_data_ram_size;
  input M_DataRdy;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  output Mout_oe_ram;
  output Mout_we_ram;
  output [BITSIZE_Mout_addr_ram-1:0] Mout_addr_ram;
  output [BITSIZE_Mout_Wdata_ram-1:0] Mout_Wdata_ram;
  output [BITSIZE_Mout_data_ram_size-1:0] Mout_data_ram_size;
  
  wire  [BITSIZE_in2-1:0] tmp_addr;
  wire int_sel_LOAD;
  wire int_sel_STORE;
  assign tmp_addr = in2;
  assign Mout_addr_ram = (int_sel_LOAD || int_sel_STORE) ? tmp_addr : Min_addr_ram;
  assign Mout_oe_ram = int_sel_LOAD ? 1'b1 : Min_oe_ram;
  assign Mout_we_ram = int_sel_STORE ? 1'b1 : Min_we_ram;
  assign out1 = M_Rdata_ram[BITSIZE_out1-1:0];
  assign Mout_Wdata_ram = int_sel_STORE ? in1 : Min_Wdata_ram;
  assign Mout_data_ram_size = int_sel_STORE || int_sel_LOAD ? in3[BITSIZE_in3-1:0] : Min_data_ram_size;
  assign int_sel_LOAD = sel_LOAD & in4;
  assign int_sel_STORE = sel_STORE & in4;
  // Add assertion here
  // psl default clock = (posedge clock);
  // psl ERROR_LOAD_Min_oe_ram: assert never {sel_LOAD && Min_oe_ram};
  // psl ERROR_STORE_Min_we_ram: assert never {sel_STORE && Min_we_ram};
  // psl ERROR_STORE_LOAD: assert never {sel_STORE && sel_LOAD};
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module lt_expr_FU(in1,
  in2,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_in2=1,
    BITSIZE_out1=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  input signed [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 < in2;

endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module max_expr_FU(in1,
  in2,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_in2=1,
    BITSIZE_out1=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  input signed [BITSIZE_in2-1:0] in2;
  // OUT
  output signed [BITSIZE_out1-1:0] out1;
  assign out1 = in1 > in2 ? in1 : in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module min_expr_FU(in1,
  in2,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_in2=1,
    BITSIZE_out1=1;
  // IN
  input signed [BITSIZE_in1-1:0] in1;
  input signed [BITSIZE_in2-1:0] in2;
  // OUT
  output signed [BITSIZE_out1-1:0] out1;
  assign out1 = in1 < in2 ? in1 : in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_eq_expr_FU(in1,
  in2,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_in2=1,
    BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 == in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_lshift_expr_FU(in1,
  in2,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_in2=1,
    BITSIZE_out1=1,
    PRECISION=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  `ifndef _SIM_HAVE_CLOG2
    function integer log2;
       input integer value;
       integer temp_value;
      begin
        temp_value = value-1;
        for (log2=0; temp_value>0; log2=log2+1)
          temp_value = temp_value>>1;
      end
    endfunction
  `endif
  `ifdef _SIM_HAVE_CLOG2
    parameter arg2_bitsize = $clog2(PRECISION);
  `else
    parameter arg2_bitsize = log2(PRECISION);
  `endif
  generate
    if(BITSIZE_in2 > arg2_bitsize)
      assign out1 = in1 << in2[arg2_bitsize-1:0];
    else
      assign out1 = in1 << in2;
  endgenerate
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_plus_expr_FU(in1,
  in2,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_in2=1,
    BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 + in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_pointer_plus_expr_FU(in1,
  in2,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_in2=1,
    BITSIZE_out1=1,
    LSB_PARAMETER=-1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  wire [BITSIZE_out1-1:0] in1_tmp;
  wire [BITSIZE_out1-1:0] in2_tmp;
  assign in1_tmp = in1;
  assign in2_tmp = in2;generate if (BITSIZE_out1 > LSB_PARAMETER) assign out1[BITSIZE_out1-1:LSB_PARAMETER] = (in1_tmp[BITSIZE_out1-1:LSB_PARAMETER] + in2_tmp[BITSIZE_out1-1:LSB_PARAMETER]); else assign out1 = 0; endgenerate
  generate if (LSB_PARAMETER != 0 && BITSIZE_out1 > LSB_PARAMETER) assign out1[LSB_PARAMETER-1:0] = 0; endgenerate
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>, Christian Pilato <christian.pilato@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module MUX_GATE(sel,
  in1,
  in2,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_in2=1,
    BITSIZE_out1=1;
  // IN
  input sel;
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = sel ? in1 : in2;
endmodule

// Datapath RTL description for min_max
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module datapath_min_max(clock,
  reset,
  in_port_Pd61,
  in_port_Pd62,
  in_port_Pd63,
  in_port_Pd64,
  M_Rdata_ram,
  M_DataRdy,
  Min_oe_ram,
  Min_we_ram,
  Min_addr_ram,
  Min_Wdata_ram,
  Min_data_ram_size,
  Mout_oe_ram,
  Mout_we_ram,
  Mout_addr_ram,
  Mout_Wdata_ram,
  Mout_data_ram_size,
  fuselector_BMEMORY_CTRL_23_i0_LOAD,
  fuselector_BMEMORY_CTRL_23_i0_STORE,
  selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0,
  selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0,
  selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1,
  selector_MUX_30_reg_1_0_0_0,
  selector_MUX_31_reg_2_0_0_0,
  selector_MUX_32_reg_3_0_0_0,
  selector_MUX_36_reg_7_0_0_0,
  selector_MUX_37_reg_8_0_0_0,
  wrenable_reg_0,
  wrenable_reg_1,
  wrenable_reg_2,
  wrenable_reg_3,
  wrenable_reg_4,
  wrenable_reg_5,
  wrenable_reg_6,
  wrenable_reg_7,
  wrenable_reg_8,
  OUT_CONDITION_min_max_423521_423584,
  OUT_CONDITION_min_max_423521_423660);
  // IN
  input clock;
  input reset;
  input [31:0] in_port_Pd61;
  input [31:0] in_port_Pd62;
  input [31:0] in_port_Pd63;
  input [31:0] in_port_Pd64;
  input [31:0] M_Rdata_ram;
  input M_DataRdy;
  input Min_oe_ram;
  input Min_we_ram;
  input [31:0] Min_addr_ram;
  input [31:0] Min_Wdata_ram;
  input [5:0] Min_data_ram_size;
  input fuselector_BMEMORY_CTRL_23_i0_LOAD;
  input fuselector_BMEMORY_CTRL_23_i0_STORE;
  input selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0;
  input selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0;
  input selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1;
  input selector_MUX_30_reg_1_0_0_0;
  input selector_MUX_31_reg_2_0_0_0;
  input selector_MUX_32_reg_3_0_0_0;
  input selector_MUX_36_reg_7_0_0_0;
  input selector_MUX_37_reg_8_0_0_0;
  input wrenable_reg_0;
  input wrenable_reg_1;
  input wrenable_reg_2;
  input wrenable_reg_3;
  input wrenable_reg_4;
  input wrenable_reg_5;
  input wrenable_reg_6;
  input wrenable_reg_7;
  input wrenable_reg_8;
  // OUT
  output Mout_oe_ram;
  output Mout_we_ram;
  output [31:0] Mout_addr_ram;
  output [31:0] Mout_Wdata_ram;
  output [5:0] Mout_data_ram_size;
  output OUT_CONDITION_min_max_423521_423584;
  output OUT_CONDITION_min_max_423521_423660;
  // Component and signal declarations
  wire [31:0] out_BMEMORY_CTRL_23_i0_BMEMORY_CTRL_23_i0;
  wire [31:0] out_IUdata_converter_FU_18_i0_fu_min_max_423521_423678;
  wire [31:0] out_IUdata_converter_FU_19_i0_fu_min_max_423521_423681;
  wire [31:0] out_IUdata_converter_FU_20_i0_fu_min_max_423521_423684;
  wire [31:0] out_IUdata_converter_FU_21_i0_fu_min_max_423521_423687;
  wire [30:0] out_IUdata_converter_FU_3_i0_fu_min_max_423521_423693;
  wire [31:0] out_MUX_0_BMEMORY_CTRL_23_i0_0_0_0;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_23_i0_1_0_0;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_23_i0_1_0_1;
  wire [63:0] out_MUX_30_reg_1_0_0_0;
  wire [31:0] out_MUX_31_reg_2_0_0_0;
  wire [31:0] out_MUX_32_reg_3_0_0_0;
  wire [31:0] out_MUX_36_reg_7_0_0_0;
  wire [31:0] out_MUX_37_reg_8_0_0_0;
  wire signed [31:0] out_UIdata_converter_FU_14_i0_fu_min_max_423521_423713;
  wire signed [31:0] out_UIdata_converter_FU_15_i0_fu_min_max_423521_423715;
  wire signed [31:0] out_UIdata_converter_FU_16_i0_fu_min_max_423521_423718;
  wire signed [31:0] out_UIdata_converter_FU_17_i0_fu_min_max_423521_423720;
  wire signed [31:0] out_UIdata_converter_FU_2_i0_fu_min_max_423521_423690;
  wire signed [31:0] out_UIdata_converter_FU_5_i0_fu_min_max_423521_423696;
  wire [29:0] out_UUdata_converter_FU_13_i0_fu_min_max_423521_423629;
  wire [30:0] out_UUdata_converter_FU_4_i0_fu_min_max_423521_423582;
  wire out_const_0;
  wire [1:0] out_const_1;
  wire [6:0] out_const_2;
  wire out_const_3;
  wire [1:0] out_const_4;
  wire [31:0] out_const_5;
  wire [30:0] out_const_6;
  wire [63:0] out_conv_out_const_0_1_64;
  wire [5:0] out_conv_out_const_2_7_6;
  wire [31:0] out_conv_out_const_6_31_32;
  wire out_lt_expr_FU_32_0_32_24_i0_fu_min_max_423521_423702;
  wire signed [31:0] out_max_expr_FU_32_0_32_25_i0_fu_min_max_423521_423581;
  wire signed [31:0] out_max_expr_FU_32_32_32_26_i0_fu_min_max_423521_423644;
  wire signed [31:0] out_min_expr_FU_32_32_32_27_i0_fu_min_max_423521_423612;
  wire out_read_cond_FU_22_i0_fu_min_max_423521_423660;
  wire out_read_cond_FU_6_i0_fu_min_max_423521_423584;
  wire [30:0] out_reg_0_reg_0;
  wire [63:0] out_reg_1_reg_1;
  wire [31:0] out_reg_2_reg_2;
  wire [31:0] out_reg_3_reg_3;
  wire [31:0] out_reg_4_reg_4;
  wire [31:0] out_reg_5_reg_5;
  wire out_reg_6_reg_6;
  wire [31:0] out_reg_7_reg_7;
  wire [31:0] out_reg_8_reg_8;
  wire out_ui_eq_expr_FU_64_64_64_28_i0_fu_min_max_423521_423722;
  wire [31:0] out_ui_lshift_expr_FU_32_0_32_29_i0_fu_min_max_423521_423710;
  wire [63:0] out_ui_plus_expr_FU_64_0_64_30_i0_fu_min_max_423521_423634;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_32_32_31_i0_fu_min_max_423521_423622;
  wire [31:0] out_uu_conv_conn_obj_0_UUdata_converter_FU_uu_conv_0;
  wire [31:0] out_uu_conv_conn_obj_1_UUdata_converter_FU_uu_conv_1;
  wire [31:0] out_uu_conv_conn_obj_2_UUdata_converter_FU_uu_conv_2;
  wire [63:0] out_uu_conv_conn_obj_3_UUdata_converter_FU_uu_conv_3;
  wire [31:0] sig_out_bus_mergerMout_Wdata_ram0_;
  wire [31:0] sig_out_bus_mergerMout_addr_ram1_;
  wire [5:0] sig_out_bus_mergerMout_data_ram_size2_;
  wire sig_out_bus_mergerMout_oe_ram3_;
  wire sig_out_bus_mergerMout_we_ram4_;
  
  BMEMORY_CTRL #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_in3(6),
    .BITSIZE_out1(32),
    .BITSIZE_Min_addr_ram(32),
    .BITSIZE_Mout_addr_ram(32),
    .BITSIZE_M_Rdata_ram(32),
    .BITSIZE_Min_Wdata_ram(32),
    .BITSIZE_Mout_Wdata_ram(32),
    .BITSIZE_Min_data_ram_size(6),
    .BITSIZE_Mout_data_ram_size(6)) BMEMORY_CTRL_23_i0 (.out1(out_BMEMORY_CTRL_23_i0_BMEMORY_CTRL_23_i0),
    .Mout_oe_ram(sig_out_bus_mergerMout_oe_ram3_),
    .Mout_we_ram(sig_out_bus_mergerMout_we_ram4_),
    .Mout_addr_ram(sig_out_bus_mergerMout_addr_ram1_),
    .Mout_Wdata_ram(sig_out_bus_mergerMout_Wdata_ram0_),
    .Mout_data_ram_size(sig_out_bus_mergerMout_data_ram_size2_),
    .clock(clock),
    .in1(out_MUX_0_BMEMORY_CTRL_23_i0_0_0_0),
    .in2(out_MUX_1_BMEMORY_CTRL_23_i0_1_0_1),
    .in3(out_conv_out_const_2_7_6),
    .in4(out_const_3),
    .sel_LOAD(fuselector_BMEMORY_CTRL_23_i0_LOAD),
    .sel_STORE(fuselector_BMEMORY_CTRL_23_i0_STORE),
    .Min_oe_ram(Min_oe_ram),
    .Min_we_ram(Min_we_ram),
    .Min_addr_ram(Min_addr_ram),
    .M_Rdata_ram(M_Rdata_ram),
    .Min_Wdata_ram(Min_Wdata_ram),
    .Min_data_ram_size(Min_data_ram_size),
    .M_DataRdy(M_DataRdy));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_0_BMEMORY_CTRL_23_i0_0_0_0 (.out1(out_MUX_0_BMEMORY_CTRL_23_i0_0_0_0),
    .sel(selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0),
    .in1(out_uu_conv_conn_obj_1_UUdata_converter_FU_uu_conv_1),
    .in2(out_uu_conv_conn_obj_2_UUdata_converter_FU_uu_conv_2));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_23_i0_1_0_0 (.out1(out_MUX_1_BMEMORY_CTRL_23_i0_1_0_0),
    .sel(selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0),
    .in1(in_port_Pd63),
    .in2(in_port_Pd64));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_23_i0_1_0_1 (.out1(out_MUX_1_BMEMORY_CTRL_23_i0_1_0_1),
    .sel(selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1),
    .in1(out_ui_pointer_plus_expr_FU_32_32_32_31_i0_fu_min_max_423521_423622),
    .in2(out_MUX_1_BMEMORY_CTRL_23_i0_1_0_0));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_30_reg_1_0_0_0 (.out1(out_MUX_30_reg_1_0_0_0),
    .sel(selector_MUX_30_reg_1_0_0_0),
    .in1(out_ui_plus_expr_FU_64_0_64_30_i0_fu_min_max_423521_423634),
    .in2(out_uu_conv_conn_obj_3_UUdata_converter_FU_uu_conv_3));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_31_reg_2_0_0_0 (.out1(out_MUX_31_reg_2_0_0_0),
    .sel(selector_MUX_31_reg_2_0_0_0),
    .in1(out_IUdata_converter_FU_21_i0_fu_min_max_423521_423687),
    .in2(out_uu_conv_conn_obj_0_UUdata_converter_FU_uu_conv_0));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_32_reg_3_0_0_0 (.out1(out_MUX_32_reg_3_0_0_0),
    .sel(selector_MUX_32_reg_3_0_0_0),
    .in1(out_const_5),
    .in2(out_IUdata_converter_FU_20_i0_fu_min_max_423521_423684));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_36_reg_7_0_0_0 (.out1(out_MUX_36_reg_7_0_0_0),
    .sel(selector_MUX_36_reg_7_0_0_0),
    .in1(out_IUdata_converter_FU_18_i0_fu_min_max_423521_423678),
    .in2(out_uu_conv_conn_obj_0_UUdata_converter_FU_uu_conv_0));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_37_reg_8_0_0_0 (.out1(out_MUX_37_reg_8_0_0_0),
    .sel(selector_MUX_37_reg_8_0_0_0),
    .in1(out_const_5),
    .in2(out_IUdata_converter_FU_19_i0_fu_min_max_423521_423681));
  UUdata_converter_FU #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) UUdata_converter_FU_uu_conv_0 (.out1(out_uu_conv_conn_obj_0_UUdata_converter_FU_uu_conv_0),
    .in1(out_conv_out_const_6_31_32));
  UUdata_converter_FU #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) UUdata_converter_FU_uu_conv_1 (.out1(out_uu_conv_conn_obj_1_UUdata_converter_FU_uu_conv_1),
    .in1(out_reg_8_reg_8));
  UUdata_converter_FU #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) UUdata_converter_FU_uu_conv_2 (.out1(out_uu_conv_conn_obj_2_UUdata_converter_FU_uu_conv_2),
    .in1(out_reg_7_reg_7));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_3 (.out1(out_uu_conv_conn_obj_3_UUdata_converter_FU_uu_conv_3),
    .in1(out_conv_out_const_0_1_64));
  constant_value #(.BITSIZE_out1(1),
    .value(1'b0)) const_0 (.out1(out_const_0));
  constant_value #(.BITSIZE_out1(2),
    .value(2'b01)) const_1 (.out1(out_const_1));
  constant_value #(.BITSIZE_out1(7),
    .value(7'b0100000)) const_2 (.out1(out_const_2));
  constant_value #(.BITSIZE_out1(1),
    .value(1'b1)) const_3 (.out1(out_const_3));
  constant_value #(.BITSIZE_out1(2),
    .value(2'b10)) const_4 (.out1(out_const_4));
  constant_value #(.BITSIZE_out1(32),
    .value(32'b10000000000000000000000000000000)) const_5 (.out1(out_const_5));
  constant_value #(.BITSIZE_out1(31),
    .value(31'b1111111111111111111111111111111)) const_6 (.out1(out_const_6));
  UUdata_converter_FU #(.BITSIZE_in1(1),
    .BITSIZE_out1(64)) conv_out_const_0_1_64 (.out1(out_conv_out_const_0_1_64),
    .in1(out_const_0));
  UUdata_converter_FU #(.BITSIZE_in1(7),
    .BITSIZE_out1(6)) conv_out_const_2_7_6 (.out1(out_conv_out_const_2_7_6),
    .in1(out_const_2));
  UUdata_converter_FU #(.BITSIZE_in1(31),
    .BITSIZE_out1(32)) conv_out_const_6_31_32 (.out1(out_conv_out_const_6_31_32),
    .in1(out_const_6));
  max_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(1),
    .BITSIZE_out1(32)) fu_min_max_423521_423581 (.out1(out_max_expr_FU_32_0_32_25_i0_fu_min_max_423521_423581),
    .in1(out_UIdata_converter_FU_2_i0_fu_min_max_423521_423690),
    .in2(out_const_0));
  UUdata_converter_FU #(.BITSIZE_in1(31),
    .BITSIZE_out1(31)) fu_min_max_423521_423582 (.out1(out_UUdata_converter_FU_4_i0_fu_min_max_423521_423582),
    .in1(out_IUdata_converter_FU_3_i0_fu_min_max_423521_423693));
  read_cond_FU #(.BITSIZE_in1(1)) fu_min_max_423521_423584 (.out1(out_read_cond_FU_6_i0_fu_min_max_423521_423584),
    .in1(out_lt_expr_FU_32_0_32_24_i0_fu_min_max_423521_423702));
  min_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) fu_min_max_423521_423612 (.out1(out_min_expr_FU_32_32_32_27_i0_fu_min_max_423521_423612),
    .in1(out_UIdata_converter_FU_16_i0_fu_min_max_423521_423718),
    .in2(out_reg_5_reg_5));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_min_max_423521_423622 (.out1(out_ui_pointer_plus_expr_FU_32_32_32_31_i0_fu_min_max_423521_423622),
    .in1(in_port_Pd61),
    .in2(out_ui_lshift_expr_FU_32_0_32_29_i0_fu_min_max_423521_423710));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(30)) fu_min_max_423521_423629 (.out1(out_UUdata_converter_FU_13_i0_fu_min_max_423521_423629),
    .in1(out_reg_1_reg_1));
  ui_plus_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(1),
    .BITSIZE_out1(64)) fu_min_max_423521_423634 (.out1(out_ui_plus_expr_FU_64_0_64_30_i0_fu_min_max_423521_423634),
    .in1(out_reg_1_reg_1),
    .in2(out_const_3));
  max_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) fu_min_max_423521_423644 (.out1(out_max_expr_FU_32_32_32_26_i0_fu_min_max_423521_423644),
    .in1(out_UIdata_converter_FU_14_i0_fu_min_max_423521_423713),
    .in2(out_reg_4_reg_4));
  read_cond_FU #(.BITSIZE_in1(1)) fu_min_max_423521_423660 (.out1(out_read_cond_FU_22_i0_fu_min_max_423521_423660),
    .in1(out_reg_6_reg_6));
  IUdata_converter_FU #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) fu_min_max_423521_423678 (.out1(out_IUdata_converter_FU_18_i0_fu_min_max_423521_423678),
    .in1(out_min_expr_FU_32_32_32_27_i0_fu_min_max_423521_423612));
  IUdata_converter_FU #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) fu_min_max_423521_423681 (.out1(out_IUdata_converter_FU_19_i0_fu_min_max_423521_423681),
    .in1(out_max_expr_FU_32_32_32_26_i0_fu_min_max_423521_423644));
  IUdata_converter_FU #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) fu_min_max_423521_423684 (.out1(out_IUdata_converter_FU_20_i0_fu_min_max_423521_423684),
    .in1(out_max_expr_FU_32_32_32_26_i0_fu_min_max_423521_423644));
  IUdata_converter_FU #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) fu_min_max_423521_423687 (.out1(out_IUdata_converter_FU_21_i0_fu_min_max_423521_423687),
    .in1(out_min_expr_FU_32_32_32_27_i0_fu_min_max_423521_423612));
  UIdata_converter_FU #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) fu_min_max_423521_423690 (.out1(out_UIdata_converter_FU_2_i0_fu_min_max_423521_423690),
    .in1(in_port_Pd62));
  IUdata_converter_FU #(.BITSIZE_in1(32),
    .BITSIZE_out1(31)) fu_min_max_423521_423693 (.out1(out_IUdata_converter_FU_3_i0_fu_min_max_423521_423693),
    .in1(out_max_expr_FU_32_0_32_25_i0_fu_min_max_423521_423581));
  UIdata_converter_FU #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) fu_min_max_423521_423696 (.out1(out_UIdata_converter_FU_5_i0_fu_min_max_423521_423696),
    .in1(in_port_Pd62));
  lt_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(2),
    .BITSIZE_out1(1)) fu_min_max_423521_423702 (.out1(out_lt_expr_FU_32_0_32_24_i0_fu_min_max_423521_423702),
    .in1(out_UIdata_converter_FU_5_i0_fu_min_max_423521_423696),
    .in2(out_const_1));
  ui_lshift_expr_FU #(.BITSIZE_in1(30),
    .BITSIZE_in2(2),
    .BITSIZE_out1(32),
    .PRECISION(32)) fu_min_max_423521_423710 (.out1(out_ui_lshift_expr_FU_32_0_32_29_i0_fu_min_max_423521_423710),
    .in1(out_UUdata_converter_FU_13_i0_fu_min_max_423521_423629),
    .in2(out_const_4));
  UIdata_converter_FU #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) fu_min_max_423521_423713 (.out1(out_UIdata_converter_FU_14_i0_fu_min_max_423521_423713),
    .in1(out_BMEMORY_CTRL_23_i0_BMEMORY_CTRL_23_i0));
  UIdata_converter_FU #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) fu_min_max_423521_423715 (.out1(out_UIdata_converter_FU_15_i0_fu_min_max_423521_423715),
    .in1(out_reg_3_reg_3));
  UIdata_converter_FU #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) fu_min_max_423521_423718 (.out1(out_UIdata_converter_FU_16_i0_fu_min_max_423521_423718),
    .in1(out_BMEMORY_CTRL_23_i0_BMEMORY_CTRL_23_i0));
  UIdata_converter_FU #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) fu_min_max_423521_423720 (.out1(out_UIdata_converter_FU_17_i0_fu_min_max_423521_423720),
    .in1(out_reg_2_reg_2));
  ui_eq_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(31),
    .BITSIZE_out1(1)) fu_min_max_423521_423722 (.out1(out_ui_eq_expr_FU_64_64_64_28_i0_fu_min_max_423521_423722),
    .in1(out_ui_plus_expr_FU_64_0_64_30_i0_fu_min_max_423521_423634),
    .in2(out_reg_0_reg_0));
  register_SE #(.BITSIZE_in1(31),
    .BITSIZE_out1(31)) reg_0 (.out1(out_reg_0_reg_0),
    .clock(clock),
    .reset(reset),
    .in1(out_UUdata_converter_FU_4_i0_fu_min_max_423521_423582),
    .wenable(wrenable_reg_0));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_1 (.out1(out_reg_1_reg_1),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_30_reg_1_0_0_0),
    .wenable(wrenable_reg_1));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_2 (.out1(out_reg_2_reg_2),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_31_reg_2_0_0_0),
    .wenable(wrenable_reg_2));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_3 (.out1(out_reg_3_reg_3),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_32_reg_3_0_0_0),
    .wenable(wrenable_reg_3));
  register_STD #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_4 (.out1(out_reg_4_reg_4),
    .clock(clock),
    .reset(reset),
    .in1(out_UIdata_converter_FU_15_i0_fu_min_max_423521_423715),
    .wenable(wrenable_reg_4));
  register_STD #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_5 (.out1(out_reg_5_reg_5),
    .clock(clock),
    .reset(reset),
    .in1(out_UIdata_converter_FU_17_i0_fu_min_max_423521_423720),
    .wenable(wrenable_reg_5));
  register_STD #(.BITSIZE_in1(1),
    .BITSIZE_out1(1)) reg_6 (.out1(out_reg_6_reg_6),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_eq_expr_FU_64_64_64_28_i0_fu_min_max_423521_423722),
    .wenable(wrenable_reg_6));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_7 (.out1(out_reg_7_reg_7),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_36_reg_7_0_0_0),
    .wenable(wrenable_reg_7));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_8 (.out1(out_reg_8_reg_8),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_37_reg_8_0_0_0),
    .wenable(wrenable_reg_8));
  // io-signal post fix
  assign Mout_oe_ram = sig_out_bus_mergerMout_oe_ram3_;
  assign Mout_we_ram = sig_out_bus_mergerMout_we_ram4_;
  assign Mout_addr_ram = sig_out_bus_mergerMout_addr_ram1_;
  assign Mout_Wdata_ram = sig_out_bus_mergerMout_Wdata_ram0_;
  assign Mout_data_ram_size = sig_out_bus_mergerMout_data_ram_size2_;
  assign OUT_CONDITION_min_max_423521_423584 = out_read_cond_FU_6_i0_fu_min_max_423521_423584;
  assign OUT_CONDITION_min_max_423521_423660 = out_read_cond_FU_22_i0_fu_min_max_423521_423660;

endmodule

// FSM based controller description for min_max
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module controller_min_max(done_port,
  fuselector_BMEMORY_CTRL_23_i0_LOAD,
  fuselector_BMEMORY_CTRL_23_i0_STORE,
  selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0,
  selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0,
  selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1,
  selector_MUX_30_reg_1_0_0_0,
  selector_MUX_31_reg_2_0_0_0,
  selector_MUX_32_reg_3_0_0_0,
  selector_MUX_36_reg_7_0_0_0,
  selector_MUX_37_reg_8_0_0_0,
  wrenable_reg_0,
  wrenable_reg_1,
  wrenable_reg_2,
  wrenable_reg_3,
  wrenable_reg_4,
  wrenable_reg_5,
  wrenable_reg_6,
  wrenable_reg_7,
  wrenable_reg_8,
  OUT_CONDITION_min_max_423521_423584,
  OUT_CONDITION_min_max_423521_423660,
  clock,
  reset,
  start_port);
  // IN
  input OUT_CONDITION_min_max_423521_423584;
  input OUT_CONDITION_min_max_423521_423660;
  input clock;
  input reset;
  input start_port;
  // OUT
  output done_port;
  output fuselector_BMEMORY_CTRL_23_i0_LOAD;
  output fuselector_BMEMORY_CTRL_23_i0_STORE;
  output selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0;
  output selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0;
  output selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1;
  output selector_MUX_30_reg_1_0_0_0;
  output selector_MUX_31_reg_2_0_0_0;
  output selector_MUX_32_reg_3_0_0_0;
  output selector_MUX_36_reg_7_0_0_0;
  output selector_MUX_37_reg_8_0_0_0;
  output wrenable_reg_0;
  output wrenable_reg_1;
  output wrenable_reg_2;
  output wrenable_reg_3;
  output wrenable_reg_4;
  output wrenable_reg_5;
  output wrenable_reg_6;
  output wrenable_reg_7;
  output wrenable_reg_8;
  parameter [2:0] S_0 = 3'd0,
    S_4 = 3'd4,
    S_5 = 3'd5,
    S_1 = 3'd1,
    S_2 = 3'd2,
    S_3 = 3'd3;
  reg [2:0] _present_state=S_0, _next_state;
  reg done_port;
  reg fuselector_BMEMORY_CTRL_23_i0_LOAD;
  reg fuselector_BMEMORY_CTRL_23_i0_STORE;
  reg selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0;
  reg selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0;
  reg selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1;
  reg selector_MUX_30_reg_1_0_0_0;
  reg selector_MUX_31_reg_2_0_0_0;
  reg selector_MUX_32_reg_3_0_0_0;
  reg selector_MUX_36_reg_7_0_0_0;
  reg selector_MUX_37_reg_8_0_0_0;
  reg wrenable_reg_0;
  reg wrenable_reg_1;
  reg wrenable_reg_2;
  reg wrenable_reg_3;
  reg wrenable_reg_4;
  reg wrenable_reg_5;
  reg wrenable_reg_6;
  reg wrenable_reg_7;
  reg wrenable_reg_8;
  
  always @(posedge clock)
    if (reset == 1'b0) _present_state <= S_0;
    else _present_state <= _next_state;
  
  always @(*)
  begin
    done_port = 1'b0;
    fuselector_BMEMORY_CTRL_23_i0_LOAD = 1'b0;
    fuselector_BMEMORY_CTRL_23_i0_STORE = 1'b0;
    selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1 = 1'b0;
    selector_MUX_30_reg_1_0_0_0 = 1'b0;
    selector_MUX_31_reg_2_0_0_0 = 1'b0;
    selector_MUX_32_reg_3_0_0_0 = 1'b0;
    selector_MUX_36_reg_7_0_0_0 = 1'b0;
    selector_MUX_37_reg_8_0_0_0 = 1'b0;
    wrenable_reg_0 = 1'b0;
    wrenable_reg_1 = 1'b0;
    wrenable_reg_2 = 1'b0;
    wrenable_reg_3 = 1'b0;
    wrenable_reg_4 = 1'b0;
    wrenable_reg_5 = 1'b0;
    wrenable_reg_6 = 1'b0;
    wrenable_reg_7 = 1'b0;
    wrenable_reg_8 = 1'b0;
    case (_present_state)
      S_0 :
        if(start_port == 1'b1)
        begin
          selector_MUX_32_reg_3_0_0_0 = 1'b1;
          selector_MUX_37_reg_8_0_0_0 = 1'b1;
          wrenable_reg_0 = 1'b1;
          wrenable_reg_1 = 1'b1;
          wrenable_reg_2 = 1'b1;
          wrenable_reg_3 = 1'b1;
          wrenable_reg_7 = 1'b1;
          wrenable_reg_8 = 1'b1;
          if (OUT_CONDITION_min_max_423521_423584 == 1'b1)
            begin
              _next_state = S_1;
              selector_MUX_32_reg_3_0_0_0 = 1'b0;
              wrenable_reg_0 = 1'b0;
              wrenable_reg_1 = 1'b0;
              wrenable_reg_2 = 1'b0;
              wrenable_reg_3 = 1'b0;
            end
          else
            begin
              _next_state = S_4;
              selector_MUX_37_reg_8_0_0_0 = 1'b0;
              wrenable_reg_7 = 1'b0;
              wrenable_reg_8 = 1'b0;
            end
        end
        else
        begin
          _next_state = S_0;
        end
      S_4 :
        begin
          fuselector_BMEMORY_CTRL_23_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1 = 1'b1;
          selector_MUX_30_reg_1_0_0_0 = 1'b1;
          wrenable_reg_1 = 1'b1;
          wrenable_reg_4 = 1'b1;
          wrenable_reg_5 = 1'b1;
          wrenable_reg_6 = 1'b1;
          _next_state = S_5;
        end
      S_5 :
        begin
          selector_MUX_31_reg_2_0_0_0 = 1'b1;
          selector_MUX_36_reg_7_0_0_0 = 1'b1;
          wrenable_reg_2 = 1'b1;
          wrenable_reg_3 = 1'b1;
          wrenable_reg_7 = 1'b1;
          wrenable_reg_8 = 1'b1;
          if (OUT_CONDITION_min_max_423521_423660 == 1'b1)
            begin
              _next_state = S_1;
              selector_MUX_31_reg_2_0_0_0 = 1'b0;
              wrenable_reg_2 = 1'b0;
              wrenable_reg_3 = 1'b0;
            end
          else
            begin
              _next_state = S_4;
              selector_MUX_36_reg_7_0_0_0 = 1'b0;
              wrenable_reg_7 = 1'b0;
              wrenable_reg_8 = 1'b0;
            end
        end
      S_1 :
        begin
          fuselector_BMEMORY_CTRL_23_i0_STORE = 1'b1;
          _next_state = S_2;
        end
      S_2 :
        begin
          fuselector_BMEMORY_CTRL_23_i0_STORE = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0 = 1'b1;
          _next_state = S_3;
          done_port = 1'b1;
        end
      S_3 :
        begin
          _next_state = S_0;
        end
      default :
        begin
          _next_state = S_0;
        end
    endcase
  end
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Marco Lattuada <marco.lattuada@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module flipflop_AR(clock,
  reset,
  in1,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_out1=1;
  // IN
  input clock;
  input reset;
  input in1;
  // OUT
  output out1;
  
  reg reg_out1 =0;
  assign out1 = reg_out1;
  always @(posedge clock )
    if (reset == 1'b0)
      reg_out1 <= {BITSIZE_out1{1'b0}};
    else
      reg_out1 <= in1;
endmodule

// Top component for min_max
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module _min_max(clock,
  reset,
  start_port,
  done_port,
  Pd61,
  Pd62,
  Pd63,
  Pd64,
  M_Rdata_ram,
  M_DataRdy,
  Min_oe_ram,
  Min_we_ram,
  Min_addr_ram,
  Min_Wdata_ram,
  Min_data_ram_size,
  Mout_oe_ram,
  Mout_we_ram,
  Mout_addr_ram,
  Mout_Wdata_ram,
  Mout_data_ram_size);
  // IN
  input clock;
  input reset;
  input start_port;
  input [31:0] Pd61;
  input [31:0] Pd62;
  input [31:0] Pd63;
  input [31:0] Pd64;
  input [31:0] M_Rdata_ram;
  input M_DataRdy;
  input Min_oe_ram;
  input Min_we_ram;
  input [31:0] Min_addr_ram;
  input [31:0] Min_Wdata_ram;
  input [5:0] Min_data_ram_size;
  // OUT
  output done_port;
  output Mout_oe_ram;
  output Mout_we_ram;
  output [31:0] Mout_addr_ram;
  output [31:0] Mout_Wdata_ram;
  output [5:0] Mout_data_ram_size;
  // Component and signal declarations
  wire OUT_CONDITION_min_max_423521_423584;
  wire OUT_CONDITION_min_max_423521_423660;
  wire done_delayed_REG_signal_in;
  wire done_delayed_REG_signal_out;
  wire fuselector_BMEMORY_CTRL_23_i0_LOAD;
  wire fuselector_BMEMORY_CTRL_23_i0_STORE;
  wire selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0;
  wire selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0;
  wire selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1;
  wire selector_MUX_30_reg_1_0_0_0;
  wire selector_MUX_31_reg_2_0_0_0;
  wire selector_MUX_32_reg_3_0_0_0;
  wire selector_MUX_36_reg_7_0_0_0;
  wire selector_MUX_37_reg_8_0_0_0;
  wire wrenable_reg_0;
  wire wrenable_reg_1;
  wire wrenable_reg_2;
  wire wrenable_reg_3;
  wire wrenable_reg_4;
  wire wrenable_reg_5;
  wire wrenable_reg_6;
  wire wrenable_reg_7;
  wire wrenable_reg_8;
  
  controller_min_max Controller_i (.done_port(done_delayed_REG_signal_in),
    .fuselector_BMEMORY_CTRL_23_i0_LOAD(fuselector_BMEMORY_CTRL_23_i0_LOAD),
    .fuselector_BMEMORY_CTRL_23_i0_STORE(fuselector_BMEMORY_CTRL_23_i0_STORE),
    .selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0(selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0),
    .selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0(selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0),
    .selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1(selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1),
    .selector_MUX_30_reg_1_0_0_0(selector_MUX_30_reg_1_0_0_0),
    .selector_MUX_31_reg_2_0_0_0(selector_MUX_31_reg_2_0_0_0),
    .selector_MUX_32_reg_3_0_0_0(selector_MUX_32_reg_3_0_0_0),
    .selector_MUX_36_reg_7_0_0_0(selector_MUX_36_reg_7_0_0_0),
    .selector_MUX_37_reg_8_0_0_0(selector_MUX_37_reg_8_0_0_0),
    .wrenable_reg_0(wrenable_reg_0),
    .wrenable_reg_1(wrenable_reg_1),
    .wrenable_reg_2(wrenable_reg_2),
    .wrenable_reg_3(wrenable_reg_3),
    .wrenable_reg_4(wrenable_reg_4),
    .wrenable_reg_5(wrenable_reg_5),
    .wrenable_reg_6(wrenable_reg_6),
    .wrenable_reg_7(wrenable_reg_7),
    .wrenable_reg_8(wrenable_reg_8),
    .OUT_CONDITION_min_max_423521_423584(OUT_CONDITION_min_max_423521_423584),
    .OUT_CONDITION_min_max_423521_423660(OUT_CONDITION_min_max_423521_423660),
    .clock(clock),
    .reset(reset),
    .start_port(start_port));
  datapath_min_max Datapath_i (.Mout_oe_ram(Mout_oe_ram),
    .Mout_we_ram(Mout_we_ram),
    .Mout_addr_ram(Mout_addr_ram),
    .Mout_Wdata_ram(Mout_Wdata_ram),
    .Mout_data_ram_size(Mout_data_ram_size),
    .OUT_CONDITION_min_max_423521_423584(OUT_CONDITION_min_max_423521_423584),
    .OUT_CONDITION_min_max_423521_423660(OUT_CONDITION_min_max_423521_423660),
    .clock(clock),
    .reset(reset),
    .in_port_Pd61(Pd61),
    .in_port_Pd62(Pd62),
    .in_port_Pd63(Pd63),
    .in_port_Pd64(Pd64),
    .M_Rdata_ram(M_Rdata_ram),
    .M_DataRdy(M_DataRdy),
    .Min_oe_ram(Min_oe_ram),
    .Min_we_ram(Min_we_ram),
    .Min_addr_ram(Min_addr_ram),
    .Min_Wdata_ram(Min_Wdata_ram),
    .Min_data_ram_size(Min_data_ram_size),
    .fuselector_BMEMORY_CTRL_23_i0_LOAD(fuselector_BMEMORY_CTRL_23_i0_LOAD),
    .fuselector_BMEMORY_CTRL_23_i0_STORE(fuselector_BMEMORY_CTRL_23_i0_STORE),
    .selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0(selector_MUX_0_BMEMORY_CTRL_23_i0_0_0_0),
    .selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0(selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_0),
    .selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1(selector_MUX_1_BMEMORY_CTRL_23_i0_1_0_1),
    .selector_MUX_30_reg_1_0_0_0(selector_MUX_30_reg_1_0_0_0),
    .selector_MUX_31_reg_2_0_0_0(selector_MUX_31_reg_2_0_0_0),
    .selector_MUX_32_reg_3_0_0_0(selector_MUX_32_reg_3_0_0_0),
    .selector_MUX_36_reg_7_0_0_0(selector_MUX_36_reg_7_0_0_0),
    .selector_MUX_37_reg_8_0_0_0(selector_MUX_37_reg_8_0_0_0),
    .wrenable_reg_0(wrenable_reg_0),
    .wrenable_reg_1(wrenable_reg_1),
    .wrenable_reg_2(wrenable_reg_2),
    .wrenable_reg_3(wrenable_reg_3),
    .wrenable_reg_4(wrenable_reg_4),
    .wrenable_reg_5(wrenable_reg_5),
    .wrenable_reg_6(wrenable_reg_6),
    .wrenable_reg_7(wrenable_reg_7),
    .wrenable_reg_8(wrenable_reg_8));
  flipflop_AR #(.BITSIZE_in1(1),
    .BITSIZE_out1(1)) done_delayed_REG (.out1(done_delayed_REG_signal_out),
    .clock(clock),
    .reset(reset),
    .in1(done_delayed_REG_signal_in));
  // io-signal post fix
  assign done_port = done_delayed_REG_signal_out;

endmodule

// Minimal interface for function: min_max
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module min_max(clk,
  reset,
  start_port,
  Pd61,
  Pd62,
  Pd63,
  Pd64,
  M_Rdata_ram,
  M_DataRdy,
  done_port,
  Mout_oe_ram,
  Mout_we_ram,
  Mout_addr_ram,
  Mout_Wdata_ram,
  Mout_data_ram_size);
  // IN
  input clk;
  input reset;
  input start_port;
  input [31:0] Pd61;
  input [31:0] Pd62;
  input [31:0] Pd63;
  input [31:0] Pd64;
  input [31:0] M_Rdata_ram;
  input M_DataRdy;
  // OUT
  output done_port;
  output Mout_oe_ram;
  output Mout_we_ram;
  output [31:0] Mout_addr_ram;
  output [31:0] Mout_Wdata_ram;
  output [5:0] Mout_data_ram_size;
  // Component and signal declarations
  
  _min_max _min_max_i0 (.done_port(done_port),
    .Mout_oe_ram(Mout_oe_ram),
    .Mout_we_ram(Mout_we_ram),
    .Mout_addr_ram(Mout_addr_ram),
    .Mout_Wdata_ram(Mout_Wdata_ram),
    .Mout_data_ram_size(Mout_data_ram_size),
    .clock(clk),
    .reset(reset),
    .start_port(start_port),
    .Pd61(Pd61),
    .Pd62(Pd62),
    .Pd63(Pd63),
    .Pd64(Pd64),
    .M_Rdata_ram(M_Rdata_ram),
    .M_DataRdy(M_DataRdy),
    .Min_oe_ram(1'b0),
    .Min_we_ram(1'b0),
    .Min_addr_ram(32'b00000000000000000000000000000000),
    .Min_Wdata_ram(32'b00000000000000000000000000000000),
    .Min_data_ram_size(6'b000000));

endmodule


"#;
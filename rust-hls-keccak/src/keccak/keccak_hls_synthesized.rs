// This file was generated by rust_hls. Please do not edit it manually.
// rust_hls hash: "a0f02b6d218bcf7a60d0b2b295928582"

extern crate verilated;
use ::rust_hdl::prelude::*;
#[allow(dead_code, unused)]
mod keccak_verilated {
    use std::path::Path;
    mod ffi {
        #[allow(non_camel_case_types)]
        pub enum keccak {}
        extern {
            pub fn keccak_new() -> *mut keccak;
            pub fn keccak_delete(keccak: *mut keccak);
            pub fn keccak_eval(keccak: *mut keccak);
            pub fn keccak_final(keccak: *mut keccak);
            pub fn keccak_set_clk(keccak: *mut keccak, v: ::std::os::raw::c_uchar);
            pub fn keccak_set_reset(keccak: *mut keccak, v: ::std::os::raw::c_uchar);
            pub fn keccak_set_start_port(
                keccak: *mut keccak,
                v: ::std::os::raw::c_uchar,
            );
            pub fn keccak_set_Pd226(keccak: *mut keccak, v: ::std::os::raw::c_uint);
            pub fn keccak_set_M_Rdata_ram(
                keccak: *mut keccak,
                v: ::std::os::raw::c_ulong,
            );
            pub fn keccak_set_M_DataRdy(keccak: *mut keccak, v: ::std::os::raw::c_uchar);
            pub fn keccak_get_done_port(keccak: *mut keccak) -> ::std::os::raw::c_uchar;
            pub fn keccak_get_Mout_oe_ram(
                keccak: *mut keccak,
            ) -> ::std::os::raw::c_uchar;
            pub fn keccak_get_Mout_we_ram(
                keccak: *mut keccak,
            ) -> ::std::os::raw::c_uchar;
            pub fn keccak_get_Mout_addr_ram(
                keccak: *mut keccak,
            ) -> ::std::os::raw::c_uint;
            pub fn keccak_get_Mout_Wdata_ram(
                keccak: *mut keccak,
            ) -> ::std::os::raw::c_ulong;
            pub fn keccak_get_Mout_data_ram_size(
                keccak: *mut keccak,
            ) -> ::std::os::raw::c_uchar;
        }
    }
    pub struct KeccakVerilated(*mut ffi::keccak, Option<u32>);
    impl Default for KeccakVerilated {
        fn default() -> Self {
            let ptr = unsafe { ffi::keccak_new() };
            assert!(! ptr.is_null());
            KeccakVerilated(ptr, None)
        }
    }
    impl Drop for KeccakVerilated {
        fn drop(&mut self) {
            unsafe {
                ffi::keccak_delete(self.0);
            }
        }
    }
    #[allow(dead_code, non_snake_case)]
    impl KeccakVerilated {
        pub fn set_clk(&mut self, v: u8) {
            unsafe {
                ffi::keccak_set_clk(self.0, v);
            }
        }
        pub fn set_reset(&mut self, v: u8) {
            unsafe {
                ffi::keccak_set_reset(self.0, v);
            }
        }
        pub fn set_start_port(&mut self, v: u8) {
            unsafe {
                ffi::keccak_set_start_port(self.0, v);
            }
        }
        pub fn set_Pd226(&mut self, v: u32) {
            unsafe {
                ffi::keccak_set_Pd226(self.0, v);
            }
        }
        pub fn set_M_Rdata_ram(&mut self, v: u64) {
            unsafe {
                ffi::keccak_set_M_Rdata_ram(self.0, v);
            }
        }
        pub fn set_M_DataRdy(&mut self, v: u8) {
            unsafe {
                ffi::keccak_set_M_DataRdy(self.0, v);
            }
        }
        pub fn done_port(&self) -> u8 {
            unsafe { ffi::keccak_get_done_port(self.0) }
        }
        pub fn Mout_oe_ram(&self) -> u8 {
            unsafe { ffi::keccak_get_Mout_oe_ram(self.0) }
        }
        pub fn Mout_we_ram(&self) -> u8 {
            unsafe { ffi::keccak_get_Mout_we_ram(self.0) }
        }
        pub fn Mout_addr_ram(&self) -> u32 {
            unsafe { ffi::keccak_get_Mout_addr_ram(self.0) }
        }
        pub fn Mout_Wdata_ram(&self) -> u64 {
            unsafe { ffi::keccak_get_Mout_Wdata_ram(self.0) }
        }
        pub fn Mout_data_ram_size(&self) -> u8 {
            unsafe { ffi::keccak_get_Mout_data_ram_size(self.0) }
        }
        pub fn eval(&mut self) {
            unsafe {
                ffi::keccak_eval(self.0);
            }
        }
        pub fn finish(&mut self) {
            unsafe {
                ffi::keccak_final(self.0);
            }
        }
        pub fn clock_toggle(&mut self) {
            unimplemented!();
        }
        fn reset_up(&mut self) {
            unimplemented!();
        }
        fn reset_down(&mut self) {
            unimplemented!();
        }
    }
}
#[derive(::std::default::Default)]
pub struct Keccak {
    pub clk: rust_hdl::prelude::Signal<
        ::rust_hdl::prelude::In,
        ::rust_hdl::prelude::Clock,
    >,
    pub reset: rust_hdl::prelude::Signal<::rust_hdl::prelude::In, bool>,
    pub start_port: rust_hdl::prelude::Signal<::rust_hdl::prelude::In, bool>,
    pub input: rust_hdl::prelude::Signal<
        ::rust_hdl::prelude::In,
        ::rust_hdl::prelude::Bits<32usize>,
    >,
    pub m_rdata_ram: rust_hdl::prelude::Signal<
        ::rust_hdl::prelude::In,
        ::rust_hdl::prelude::Bits<64usize>,
    >,
    pub m_data_rdy: rust_hdl::prelude::Signal<::rust_hdl::prelude::In, bool>,
    pub done_port: rust_hdl::prelude::Signal<::rust_hdl::prelude::Out, bool>,
    pub mout_oe_ram: rust_hdl::prelude::Signal<::rust_hdl::prelude::Out, bool>,
    pub mout_we_ram: rust_hdl::prelude::Signal<::rust_hdl::prelude::Out, bool>,
    pub mout_addr_ram: rust_hdl::prelude::Signal<
        ::rust_hdl::prelude::Out,
        ::rust_hdl::prelude::Bits<32usize>,
    >,
    pub mout_wdata_ram: rust_hdl::prelude::Signal<
        ::rust_hdl::prelude::Out,
        ::rust_hdl::prelude::Bits<64usize>,
    >,
    pub mout_data_ram_size: rust_hdl::prelude::Signal<
        ::rust_hdl::prelude::Out,
        ::rust_hdl::prelude::Bits<7usize>,
    >,
    verilated_module: ::std::sync::Arc<
        ::std::sync::Mutex<self::keccak_verilated::KeccakVerilated>,
    >,
}
unsafe impl Send for Keccak {}
#[automatically_derived]
impl ::rust_hdl::prelude::block::Block for Keccak {
    fn connect_all(&mut self) {
        self.connect();
        self.clk.connect_all();
        self.reset.connect_all();
        self.start_port.connect_all();
        self.input.connect_all();
        self.m_rdata_ram.connect_all();
        self.m_data_rdy.connect_all();
        self.done_port.connect_all();
        self.mout_oe_ram.connect_all();
        self.mout_we_ram.connect_all();
        self.mout_addr_ram.connect_all();
        self.mout_wdata_ram.connect_all();
        self.mout_data_ram_size.connect_all();
    }
    fn update_all(&mut self) {
        self.update();
        self.clk.update_all();
        self.reset.update_all();
        self.start_port.update_all();
        self.input.update_all();
        self.m_rdata_ram.update_all();
        self.m_data_rdy.update_all();
        self.done_port.update_all();
        self.mout_oe_ram.update_all();
        self.mout_we_ram.update_all();
        self.mout_addr_ram.update_all();
        self.mout_wdata_ram.update_all();
        self.mout_data_ram_size.update_all();
    }
    fn has_changed(&self) -> bool {
        self.clk.has_changed() || self.reset.has_changed()
            || self.start_port.has_changed() || self.input.has_changed()
            || self.m_rdata_ram.has_changed() || self.m_data_rdy.has_changed()
            || self.done_port.has_changed() || self.mout_oe_ram.has_changed()
            || self.mout_we_ram.has_changed() || self.mout_addr_ram.has_changed()
            || self.mout_wdata_ram.has_changed() || self.mout_data_ram_size.has_changed()
            || false || false
    }
    fn accept(&self, name: &str, probe: &mut dyn probe::Probe) {
        probe.visit_start_scope(name, self);
        self.clk.accept("clk", probe);
        self.reset.accept("reset", probe);
        self.start_port.accept("start_port", probe);
        self.input.accept("input", probe);
        self.m_rdata_ram.accept("m_rdata_ram", probe);
        self.m_data_rdy.accept("m_data_rdy", probe);
        self.done_port.accept("done_port", probe);
        self.mout_oe_ram.accept("mout_oe_ram", probe);
        self.mout_we_ram.accept("mout_we_ram", probe);
        self.mout_addr_ram.accept("mout_addr_ram", probe);
        self.mout_wdata_ram.accept("mout_wdata_ram", probe);
        self.mout_data_ram_size.accept("mout_data_ram_size", probe);
        probe.visit_end_scope(name, self);
    }
}
#[automatically_derived]
impl Keccak {
    #[allow(unused)]
    pub fn new() -> Self {
        Self::default()
    }
}
#[automatically_derived]
impl ::rust_hdl::prelude::Logic for Keccak {
    fn update(&mut self) {
        let mut verilated_module = match self.verilated_module.lock() {
            Ok(verilated_module) => verilated_module,
            Err(e) => panic!("Failed to aquire verilated_module lock: {}", e),
        };
        verilated_module.set_clk(if self.clk.val().clk { 1u8 } else { 0u8 });
        verilated_module.set_reset(if self.reset.val() { 1u8 } else { 0u8 });
        verilated_module.set_start_port(if self.start_port.val() { 1u8 } else { 0u8 });
        verilated_module.set_Pd226(self.input.val().to_u32());
        verilated_module.set_M_Rdata_ram(self.m_rdata_ram.val().to_u64());
        verilated_module.set_M_DataRdy(if self.m_data_rdy.val() { 1u8 } else { 0u8 });
        verilated_module.eval();
        self.done_port.next = verilated_module.done_port() != 0;
        self.mout_oe_ram.next = verilated_module.Mout_oe_ram() != 0;
        self.mout_we_ram.next = verilated_module.Mout_we_ram() != 0;
        self
            .mout_addr_ram
            .next = rust_hdl::prelude::ToBits::to_bits::<
            32usize,
        >(verilated_module.Mout_addr_ram() & 4294967295u32);
        self
            .mout_wdata_ram
            .next = rust_hdl::prelude::ToBits::to_bits::<
            64usize,
        >(verilated_module.Mout_Wdata_ram() & 18446744073709551615u64);
        self
            .mout_data_ram_size
            .next = rust_hdl::prelude::ToBits::to_bits::<
            7usize,
        >(verilated_module.Mout_data_ram_size() & 127u8);
    }
    fn connect(&mut self) {
        self.done_port.connect();
        self.mout_oe_ram.connect();
        self.mout_we_ram.connect();
        self.mout_addr_ram.connect();
        self.mout_wdata_ram.connect();
        self.mout_data_ram_size.connect();
    }
    fn hdl(&self) -> ::rust_hdl::prelude::Verilog {
        ::rust_hdl::prelude::Verilog::Wrapper(::rust_hdl::prelude::Wrapper {
            code: "keccak keccak_inst(.clk(clk), .reset(reset), .start_port(start_port), .Pd226(input), .M_Rdata_ram(m_rdata_ram), .M_DataRdy(m_data_rdy), .done_port(done_port), .Mout_oe_ram(mout_oe_ram), .Mout_we_ram(mout_we_ram), .Mout_addr_ram(mout_addr_ram), .Mout_Wdata_ram(mout_wdata_ram), .Mout_data_ram_size(mout_data_ram_size));"
                .into(),
            cores: "// \n// Politecnico di Milano\n// Code created using PandA - Version: PandA 2023.2 - Revision 891ec3caed502474cab0813cc4a9fc678deabaa5 - Date 2023-06-23T22:47:22\n// /nix/store/9c5lz0md936sjhs9hw1ya6kghvkfc4zg-bambu-wrapped/bin/bambu executed with: /nix/store/9c5lz0md936sjhs9hw1ya6kghvkfc4zg-bambu-wrapped/bin/bambu --simulator=VERILATOR --top-fname=keccak --clock-name=clk --compiler=I386_CLANG16 -Os --channels-type=MEM_ACC_11 --channels-number=1 keccak.ll \n// \n// Send any bug to: panda-info@polimi.it\n// ************************************************************************\n// The following text holds for all the components tagged with PANDA_LGPLv3.\n// They are all part of the BAMBU/PANDA IP LIBRARY.\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 3 of the License, or (at your option) any later version.\n// \n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n// \n// You should have received a copy of the GNU Lesser General Public\n// License along with the PandA framework; see the files COPYING.LIB\n// If not, see <http://www.gnu.org/licenses/>.\n// ************************************************************************\n\n`ifdef __ICARUS__\n  `define _SIM_HAVE_CLOG2\n`endif\n`ifdef VERILATOR\n  `define _SIM_HAVE_CLOG2\n`endif\n`ifdef MODEL_TECH\n  `define _SIM_HAVE_CLOG2\n`endif\n`ifdef VCS\n  `define _SIM_HAVE_CLOG2\n`endif\n`ifdef NCVERILOG\n  `define _SIM_HAVE_CLOG2\n`endif\n`ifdef XILINX_SIMULATOR\n  `define _SIM_HAVE_CLOG2\n`endif\n`ifdef XILINX_ISIM\n  `define _SIM_HAVE_CLOG2\n`endif\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>, Christian Pilato <christian.pilato@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule constant_value(out1);\n  parameter BITSIZE_out1=1,\n    value=1'b0;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  assign out1 = value;\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule register_SE(clock,\n  reset,\n  in1,\n  wenable,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_out1=1;\n  // IN\n  input clock;\n  input reset;\n  input [BITSIZE_in1-1:0] in1;\n  input wenable;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  \n  reg [BITSIZE_out1-1:0] reg_out1 =0;\n  assign out1 = reg_out1;\n  always @(posedge clock)\n    if (wenable)\n      reg_out1 <= in1;\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule register_STD(clock,\n  reset,\n  in1,\n  wenable,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_out1=1;\n  // IN\n  input clock;\n  input reset;\n  input [BITSIZE_in1-1:0] in1;\n  input wenable;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  reg [BITSIZE_out1-1:0] reg_out1 =0;\n  assign out1 = reg_out1;\n  always @(posedge clock)\n    reg_out1 <= in1;\n\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule ADDRESS_DECODING_LOGIC(clock,\n  reset,\n  in1,\n  in2,\n  in3,\n  sel_LOAD,\n  sel_STORE,\n  S_oe_ram,\n  S_we_ram,\n  S_addr_ram,\n  S_Wdata_ram,\n  Sin_Rdata_ram,\n  S_data_ram_size,\n  Sin_DataRdy,\n  out1,\n  Sout_Rdata_ram,\n  Sout_DataRdy,\n  proxy_in1,\n  proxy_in2,\n  proxy_in3,\n  proxy_sel_LOAD,\n  proxy_sel_STORE,\n  proxy_out1,\n  dout_a,\n  dout_b,\n  memory_addr_a,\n  memory_addr_b,\n  din_value_aggregated,\n  be,\n  bram_write);\n  parameter BITSIZE_in1=1,\n    BITSIZE_in2=1,\n    BITSIZE_in3=1,\n    BITSIZE_out1=1,\n    BITSIZE_S_addr_ram=1,\n    BITSIZE_S_Wdata_ram=8,\n    BITSIZE_Sin_Rdata_ram=8,\n    BITSIZE_Sout_Rdata_ram=8,\n    BITSIZE_S_data_ram_size=1,\n    address_space_begin=0,\n    address_space_rangesize=4,\n    BUS_PIPELINED=1,\n    BRAM_BITSIZE=32,\n    PRIVATE_MEMORY=0,\n    USE_SPARSE_MEMORY=1,\n    HIGH_LATENCY=0,\n    BITSIZE_proxy_in1=1,\n    BITSIZE_proxy_in2=1,\n    BITSIZE_proxy_in3=1,\n    BITSIZE_proxy_out1=1,\n    BITSIZE_dout_a=1,\n    BITSIZE_dout_b=1,\n    BITSIZE_memory_addr_a=1,\n    BITSIZE_memory_addr_b=1,\n    BITSIZE_din_value_aggregated=1,\n    BITSIZE_be=1,\n    nbit_read_addr=32,\n    n_byte_on_databus=4,\n    n_mem_elements=4,\n    n_bytes=4;\n  // IN\n  input clock;\n  input reset;\n  input [BITSIZE_in1-1:0] in1;\n  input [BITSIZE_in2-1:0] in2;\n  input [BITSIZE_in3-1:0] in3;\n  input sel_LOAD;\n  input sel_STORE;\n  input S_oe_ram;\n  input S_we_ram;\n  input [BITSIZE_S_addr_ram-1:0] S_addr_ram;\n  input [BITSIZE_S_Wdata_ram-1:0] S_Wdata_ram;\n  input [BITSIZE_Sin_Rdata_ram-1:0] Sin_Rdata_ram;\n  input [BITSIZE_S_data_ram_size-1:0] S_data_ram_size;\n  input Sin_DataRdy;\n  input [BITSIZE_proxy_in1-1:0] proxy_in1;\n  input [BITSIZE_proxy_in2-1:0] proxy_in2;\n  input [BITSIZE_proxy_in3-1:0] proxy_in3;\n  input proxy_sel_LOAD;\n  input proxy_sel_STORE;\n  input [BITSIZE_dout_a-1:0] dout_a;\n  input [BITSIZE_dout_b-1:0] dout_b;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  output [BITSIZE_Sout_Rdata_ram-1:0] Sout_Rdata_ram;\n  output Sout_DataRdy;\n  output [BITSIZE_proxy_out1-1:0] proxy_out1;\n  output [BITSIZE_memory_addr_a-1:0] memory_addr_a;\n  output [BITSIZE_memory_addr_b-1:0] memory_addr_b;\n  output [BITSIZE_din_value_aggregated-1:0] din_value_aggregated;\n  output [BITSIZE_be-1:0] be;\n  output bram_write;\n  `ifndef _SIM_HAVE_CLOG2\n    function integer log2;\n       input integer value;\n       integer temp_value;\n      begin\n        temp_value = value-1;\n        for (log2=0; temp_value>0; log2=log2+1)\n          temp_value = temp_value>>1;\n      end\n    endfunction\n  `endif\n  `ifdef _SIM_HAVE_CLOG2\n    parameter nbit_addr = BITSIZE_S_addr_ram/*n_bytes ==  1 ? 1 : $clog2(n_bytes)*/;\n    parameter nbits_address_space_rangesize = $clog2(address_space_rangesize);\n    parameter nbits_byte_offset = n_byte_on_databus==1 ? 1 : $clog2(n_byte_on_databus);\n  `else\n    parameter nbit_addr = BITSIZE_S_addr_ram/*n_bytes ==  1 ? 1 : log2(n_bytes)*/;\n    parameter nbits_address_space_rangesize = log2(address_space_rangesize);\n    parameter nbits_byte_offset = n_byte_on_databus==1 ? 1 : log2(n_byte_on_databus);\n  `endif\n  \n  \n  function [n_byte_on_databus*2-1:0] CONV;\n    input [n_byte_on_databus*2-1:0] po2;\n  begin\n    case (po2)\n      1:CONV=(1<<1)-1;\n      2:CONV=(1<<2)-1;\n      4:CONV=(1<<4)-1;\n      8:CONV=(1<<8)-1;\n      16:CONV=(1<<16)-1;\n      32:CONV=(1<<32)-1;\n      default:CONV=-1;\n    endcase\n  end\n  endfunction\n  wire [2*BRAM_BITSIZE-1:0] dout;\n  wire [2*BRAM_BITSIZE-1:0] out1_shifted;\n  wire [2*BRAM_BITSIZE-1:0] S_Wdata_ram_int;\n  wire cs, oe_ram_cs, we_ram_cs;\n  wire [n_byte_on_databus*2-1:0] conv_in;\n  wire [n_byte_on_databus*2-1:0] conv_out;\n  wire [nbits_byte_offset-1:0] byte_offset;\n  wire [BITSIZE_in2-1:0] tmp_addr;\n  wire [nbit_addr-1:0] relative_addr;\n  \n  reg we_ram_cs_delayed =0;\n  reg oe_ram_cs_delayed =0;\n  reg oe_ram_cs_delayed_registered =0;\n  reg oe_ram_cs_delayed_registered1 =0;\n  reg [nbits_byte_offset-1:0] delayed_byte_offset =0;\n  reg [nbits_byte_offset-1:0] delayed_byte_offset_registered =0;\n  reg [nbits_byte_offset-1:0] delayed_byte_offset_registered1 =0;\n  \n  assign tmp_addr = (proxy_sel_LOAD||proxy_sel_STORE) ? proxy_in2 : in2;\n  \n  generate\n  genvar j0_a;\n    for (j0_a=0; j0_a<n_byte_on_databus; j0_a=j0_a+1)\n    begin  : dout_a_computation\n      assign dout[(j0_a+1)*8-1:j0_a*8] = dout_a[(j0_a+1)*8-1:j0_a*8];\n    end\n  endgenerate\n  \n  generate\n  genvar j0_b;\n    for (j0_b=0; j0_b<n_byte_on_databus; j0_b=j0_b+1)\n    begin  : dout_b_computation\n      assign dout[(j0_b+n_byte_on_databus+1)*8-1:(j0_b+n_byte_on_databus)*8] = dout_b[(j0_b+1)*8-1:j0_b*8];\n    end\n  endgenerate\n  \n  generate\n    if(PRIVATE_MEMORY==0 && USE_SPARSE_MEMORY==0)\n      assign cs = (S_addr_ram >= (address_space_begin)) && (S_addr_ram < (address_space_begin+address_space_rangesize));\n    else if(PRIVATE_MEMORY==0 && nbits_address_space_rangesize < 32)\n      assign cs = S_addr_ram[nbit_addr-1:nbits_address_space_rangesize] == address_space_begin[((nbit_addr-1) < 32 ? (nbit_addr-1) : 31):nbits_address_space_rangesize];\n    else\n      assign cs = 1'b0;\n  endgenerate\n  assign oe_ram_cs = S_oe_ram && cs;\n  assign we_ram_cs = S_we_ram && cs;\n  generate\n    if(PRIVATE_MEMORY==0 && USE_SPARSE_MEMORY==0)\n      assign relative_addr = (sel_STORE===1'b1 || sel_LOAD===1'b1 || proxy_sel_STORE===1'b1 || proxy_sel_LOAD===1'b1) ? tmp_addr-address_space_begin[((nbit_addr-1) < 32 ? (nbit_addr-1) : 31):0] : S_addr_ram-address_space_begin[((nbit_addr-1) < 32 ? (nbit_addr-1) : 31):0];\n    else if(PRIVATE_MEMORY==0)\n      assign relative_addr = (sel_STORE===1'b1 || sel_LOAD===1'b1 || proxy_sel_STORE===1'b1 || proxy_sel_LOAD===1'b1) ? tmp_addr[nbits_address_space_rangesize-1:0] : S_addr_ram[nbits_address_space_rangesize-1:0];\n    else if(USE_SPARSE_MEMORY==1)\n      assign relative_addr = tmp_addr[nbits_address_space_rangesize-1:0];\n    else\n      assign relative_addr = tmp_addr-address_space_begin[((nbit_addr-1) < 32 ? (nbit_addr-1) : 31):0];\n  endgenerate\n  \n  generate\n    if (n_mem_elements==1)\n      assign memory_addr_a = {nbit_read_addr{1'b0}};\n    else if(n_byte_on_databus==1)\n      assign memory_addr_a = relative_addr[nbit_read_addr-1:0];\n    else\n      assign memory_addr_a = relative_addr[nbit_read_addr+nbits_byte_offset-1:nbits_byte_offset];\n  endgenerate\n  \n  generate\n    if (n_bytes <= BRAM_BITSIZE/8)\n      assign memory_addr_b = {nbit_read_addr{1'b0}};\n    else if(n_byte_on_databus==1)\n      assign memory_addr_b = relative_addr[nbit_read_addr-1:0] + 1'b1;\n    else\n      assign memory_addr_b = relative_addr[nbit_read_addr+nbits_byte_offset-1:nbits_byte_offset] + 1'b1;\n  endgenerate\n  \n  generate\n    if (n_byte_on_databus==1)\n      assign byte_offset = {nbits_byte_offset{1'b0}};\n    else\n      assign byte_offset = relative_addr[nbits_byte_offset-1:0];\n  endgenerate\n  \n  generate\n    if(PRIVATE_MEMORY==0)\n    begin\n      assign conv_in = proxy_sel_STORE ? proxy_in3[BITSIZE_proxy_in3-1:3] : (sel_STORE ? in3[BITSIZE_in3-1:3] : S_data_ram_size[BITSIZE_S_data_ram_size-1:3]);\n      assign conv_out = CONV(conv_in);\n      assign be = conv_out << byte_offset;\n    end\n    else\n    begin\n      assign conv_in = proxy_sel_STORE ? proxy_in3[BITSIZE_proxy_in3-1:3] : in3[BITSIZE_in3-1:3];\n      assign conv_out = CONV(conv_in);\n      assign be = conv_out << byte_offset;\n    end\n  endgenerate\n  \n  generate\n    if (BITSIZE_S_Wdata_ram < 2*BRAM_BITSIZE)\n      assign S_Wdata_ram_int = {{2*BRAM_BITSIZE-BITSIZE_S_Wdata_ram{1'b0}}, S_Wdata_ram};\n    else\n      assign S_Wdata_ram_int = S_Wdata_ram[2*BRAM_BITSIZE-1:0];\n  endgenerate\n  \n  generate\n    if(PRIVATE_MEMORY==0)\n      assign din_value_aggregated = proxy_sel_STORE ? proxy_in1 << byte_offset*8 : (sel_STORE ? in1 << byte_offset*8 : S_Wdata_ram_int << byte_offset*8);\n    else\n      assign din_value_aggregated = proxy_sel_STORE ? proxy_in1 << byte_offset*8 : in1 << byte_offset*8;\n  endgenerate\n  \n  assign out1_shifted = dout >> delayed_byte_offset*8;\n  assign out1 = out1_shifted;\n  assign proxy_out1 = out1_shifted;\n  \n  always @(posedge clock )\n  begin\n    if(reset == 1'b0)\n    begin\n      oe_ram_cs_delayed <= 1'b0;\n      if(HIGH_LATENCY != 0) oe_ram_cs_delayed_registered <= 1'b0;\n      if(HIGH_LATENCY == 2) oe_ram_cs_delayed_registered1 <= 1'b0;\n    end\n    else\n    begin\n      if(HIGH_LATENCY == 0)\n      begin\n        oe_ram_cs_delayed <= oe_ram_cs & (!oe_ram_cs_delayed | BUS_PIPELINED);\n      end\n      else if(HIGH_LATENCY == 1)\n      begin\n        oe_ram_cs_delayed_registered <= oe_ram_cs & ((!oe_ram_cs_delayed_registered & !oe_ram_cs_delayed) | BUS_PIPELINED);\n        oe_ram_cs_delayed <= oe_ram_cs_delayed_registered;\n      end\n      else\n      begin\n        oe_ram_cs_delayed_registered1 <= oe_ram_cs & ((!oe_ram_cs_delayed_registered1 & !oe_ram_cs_delayed_registered & !oe_ram_cs_delayed) | BUS_PIPELINED);\n        oe_ram_cs_delayed_registered <= oe_ram_cs_delayed_registered1;\n        oe_ram_cs_delayed <= oe_ram_cs_delayed_registered;\n      end\n    end\n  end\n  \n  always @(posedge clock)\n  begin\n    if(HIGH_LATENCY == 0)\n      delayed_byte_offset <= byte_offset;\n    else if(HIGH_LATENCY == 1)\n    begin\n      delayed_byte_offset_registered <= byte_offset;\n      delayed_byte_offset <= delayed_byte_offset_registered;\n    end\n    else\n    begin\n      delayed_byte_offset_registered1 <= byte_offset;\n      delayed_byte_offset_registered <= delayed_byte_offset_registered1;\n      delayed_byte_offset <= delayed_byte_offset_registered;\n    end\n  end\n  \n  always @(posedge clock )\n  begin\n    if(reset == 1'b0)\n      we_ram_cs_delayed <= 1'b0;\n    else\n      we_ram_cs_delayed <= we_ram_cs & !we_ram_cs_delayed;\n  end\n  \n  generate\n    if(PRIVATE_MEMORY==1)\n      assign Sout_Rdata_ram =Sin_Rdata_ram;\n    else if (BITSIZE_Sout_Rdata_ram <= 2*BRAM_BITSIZE)\n      assign Sout_Rdata_ram = oe_ram_cs_delayed ? out1_shifted[BITSIZE_Sout_Rdata_ram-1:0] : Sin_Rdata_ram;\n    else\n      assign Sout_Rdata_ram = oe_ram_cs_delayed ? {{BITSIZE_Sout_Rdata_ram-2*BRAM_BITSIZE{1'b0}}, out1_shifted} : Sin_Rdata_ram;\n  endgenerate\n  \n  generate\n    if(PRIVATE_MEMORY==1)\n      assign Sout_DataRdy = Sin_DataRdy;\n    else\n      assign Sout_DataRdy = oe_ram_cs_delayed | Sin_DataRdy | we_ram_cs_delayed;\n  endgenerate\n  \n  assign bram_write = sel_STORE || proxy_sel_STORE || we_ram_cs;\n  \n  // Add assertion here\n  // psl default clock = (posedge clock);\n  // psl ERROR_S_data_ram_size: assert never {S_data_ram_size>2*BRAM_BITSIZE && (we_ram_cs || oe_ram_cs)};\n  // psl ERROR_memory_addr: assert never {memory_addr_a>=n_mem_elements && (we_ram_cs || oe_ram_cs || sel_STORE || sel_LOAD || proxy_sel_STORE || proxy_sel_LOAD)};\n  // psl ERROR_relative_addr: assert never {relative_addr+(S_data_ram_size/8) >n_bytes && (we_ram_cs || oe_ram_cs)};\n  // psl ERROR_unaligned_access: assert never {byte_offset+S_data_ram_size[BITSIZE_S_data_ram_size-1:3] > BRAM_BITSIZE/4 && (we_ram_cs || oe_ram_cs)};\n  // psl ERROR_oe_ram_cs_we_ram_cs: assert never {(we_ram_cs & oe_ram_cs) != 0};\n  // psl ERROR_LOAD_S_oe_ram: assert never {sel_LOAD && oe_ram_cs};\n  // psl ERROR_proxy_LOAD_S_oe_ram: assert never {proxy_sel_LOAD && oe_ram_cs};\n  // psl ERROR_STORE_S_we_ram: assert never {sel_STORE && we_ram_cs};\n  // psl ERROR_proxy_STORE_S_we_ram: assert never {proxy_sel_STORE && we_ram_cs};\n  // psl ERROR_LOAD_we_ram_cs: assert never {sel_LOAD && we_ram_cs};\n  // psl ERROR_proxy_LOAD_we_ram_cs: assert never {proxy_sel_LOAD && we_ram_cs};\n  // psl ERROR_STORE_oe_ram_cs: assert never {sel_STORE && oe_ram_cs};\n  // psl ERROR_proxy_STORE_oe_ram_cs: assert never {proxy_sel_STORE && oe_ram_cs};\n  // psl ERROR_Sin_DataRdy_oe_ram_cs_delayed: assert never {Sin_DataRdy && oe_ram_cs_delayed};\n  // psl ERROR_in3_size: assert never {in3>2*BRAM_BITSIZE && (sel_STORE || sel_LOAD)};\n  // psl ERROR_proxy_in3_size: assert never {proxy_in3>2*BRAM_BITSIZE && (proxy_sel_STORE || proxy_sel_LOAD)};\n  // psl ERROR_requested_size: assert never {BITSIZE_out1<in3 && (sel_LOAD)};\n  // psl ERROR_proxy_requested_size: assert never {BITSIZE_proxy_out1<proxy_in3 && (proxy_sel_LOAD)};\n  // psl ERROR_STORE_LOAD: assert never {sel_STORE && sel_LOAD};\n  // psl ERROR_proxy_STORE_proxy_LOAD: assert never {proxy_sel_STORE && proxy_sel_LOAD};\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2016-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule BRAM_MEMORY_CORE_SMALL(clock,\n  bram_write0,\n  bram_write1,\n  memory_addr_a,\n  memory_addr_b,\n  din_value_aggregated,\n  be,\n  dout_a,\n  dout_b);\n  parameter BITSIZE_dout_a=1,\n    BITSIZE_dout_b=1,\n    BITSIZE_memory_addr_a=1,\n    BITSIZE_memory_addr_b=1,\n    BITSIZE_din_value_aggregated=1,\n    BITSIZE_be=1,\n    MEMORY_INIT_file=\"array.mem\",\n    n_byte_on_databus=4,\n    n_mem_elements=4,\n    n_bytes=4,\n    HIGH_LATENCY=0;\n  // IN\n  input clock;\n  input bram_write0;\n  input bram_write1;\n  input [BITSIZE_memory_addr_a-1:0] memory_addr_a;\n  input [BITSIZE_memory_addr_b-1:0] memory_addr_b;\n  input [BITSIZE_din_value_aggregated-1:0] din_value_aggregated;\n  input [BITSIZE_be-1:0] be;\n  // OUT\n  output [BITSIZE_dout_a-1:0] dout_a;\n  output [BITSIZE_dout_b-1:0] dout_b;\n  \n  reg bram_write01 =0;\n  reg bram_write11 =0;\n  reg [BITSIZE_memory_addr_a-1:0] memory_addr_a1 =0;\n  reg [BITSIZE_memory_addr_b-1:0] memory_addr_b1 =0;\n  reg [BITSIZE_be-1:0] be1 =0;\n  reg [BITSIZE_din_value_aggregated-1:0] din_value_aggregated1 =0;\n  reg [(n_byte_on_databus)*8-1:0] dout_a_tmp =0;\n  reg [(n_byte_on_databus)*8-1:0] dout_b_tmp =0;\n  reg [(n_byte_on_databus)*8-1:0] dout_a_registered =0;\n  reg [(n_byte_on_databus)*8-1:0] dout_b_registered =0;\n  reg [(n_byte_on_databus)*8-1:0] memory [0:n_mem_elements-1]/* synthesis syn_ramstyle = \"no_rw_check\" */ ;\n  \n  generate\n    if(HIGH_LATENCY==2)\n    begin\n      always @ (posedge clock)\n      begin\n         memory_addr_a1 <= memory_addr_a;\n         memory_addr_b1 <= memory_addr_b;\n         bram_write01 <= bram_write0;\n         bram_write11 <= bram_write1;\n         be1 <= be;\n         din_value_aggregated1 <= din_value_aggregated;\n      end\n    end\n  endgenerate\n  \n  assign dout_a = dout_a_tmp;\n  assign dout_b = dout_b_tmp;\n  initial\n  begin\n    $readmemb(MEMORY_INIT_file, memory, 0, n_mem_elements-1);\n  end\n  \n  always @(posedge clock)\n  begin\n    if(HIGH_LATENCY == 0||HIGH_LATENCY == 1)\n    begin\n      if (bram_write0)\n      begin : L11_write\n        integer i11;\n        for (i11=0; i11<n_byte_on_databus; i11=i11+1)\n        begin\n          if(be[i11])\n            memory[memory_addr_a][i11*8+:8] <= din_value_aggregated[i11*8+:8];\n        end\n      end\n    end\n    else\n    begin\n      if (bram_write01)\n      begin : L11_write1\n        integer i11;\n        for (i11=0; i11<n_byte_on_databus; i11=i11+1)\n        begin\n          if(be1[i11])\n            memory[memory_addr_a1][i11*8+:8] <= din_value_aggregated1[i11*8+:8];\n        end\n      end\n    end\n    if(HIGH_LATENCY == 0)\n      dout_a_tmp <= memory[memory_addr_a];\n    else if(HIGH_LATENCY == 1)\n    begin\n      dout_a_registered <= memory[memory_addr_a];\n      dout_a_tmp <= dout_a_registered;\n    end\n    else\n    begin\n      dout_a_registered <= memory[memory_addr_a1];\n      dout_a_tmp <= dout_a_registered;\n    end\n    if(HIGH_LATENCY == 0||HIGH_LATENCY == 1)\n    begin\n      if (bram_write1)\n      begin : L22_write\n        integer i22;\n        for (i22=0; i22<n_byte_on_databus; i22=i22+1)\n        begin\n          if(be[i22+n_byte_on_databus])\n            memory[memory_addr_b][i22*8+:8] <= din_value_aggregated[(i22+n_byte_on_databus)*8+:8];\n        end\n      end\n    end\n    else\n    begin\n      if (bram_write11)\n      begin : L22_write1\n        integer i22;\n        for (i22=0; i22<n_byte_on_databus; i22=i22+1)\n        begin\n          if(be1[i22+n_byte_on_databus])\n            memory[memory_addr_b1][i22*8+:8] <= din_value_aggregated1[(i22+n_byte_on_databus)*8+:8];\n        end\n      end\n    end\n    if(HIGH_LATENCY == 0)\n      dout_b_tmp <= memory[memory_addr_b];\n    else if(HIGH_LATENCY == 1)\n    begin\n      dout_b_registered <= memory[memory_addr_b];\n      dout_b_tmp <= dout_b_registered;\n    end\n    else\n    begin\n      dout_b_registered <= memory[memory_addr_b1];\n      dout_b_tmp <= dout_b_registered;\n    end\n  end\n\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2016-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule TRUE_DUAL_PORT_BYTE_ENABLING_RAM(clock,\n  bram_write0,\n  bram_write1,\n  memory_addr_a,\n  memory_addr_b,\n  din_value_aggregated,\n  be,\n  dout_a,\n  dout_b);\n  parameter BITSIZE_dout_a=1,\n    BITSIZE_dout_b=1,\n    BITSIZE_memory_addr_a=1,\n    BITSIZE_memory_addr_b=1,\n    BITSIZE_din_value_aggregated=1,\n    BITSIZE_be=1,\n    MEMORY_INIT_file=\"array.mem\",\n    BRAM_BITSIZE=32,\n    n_byte_on_databus=4,\n    n_mem_elements=4,\n    HIGH_LATENCY=0;\n  // IN\n  input clock;\n  input bram_write0;\n  input bram_write1;\n  input [BITSIZE_memory_addr_a-1:0] memory_addr_a;\n  input [BITSIZE_memory_addr_b-1:0] memory_addr_b;\n  input [BITSIZE_din_value_aggregated-1:0] din_value_aggregated;\n  input [BITSIZE_be-1:0] be;\n  // OUT\n  output [BITSIZE_dout_a-1:0] dout_a;\n  output [BITSIZE_dout_b-1:0] dout_b;\n  \n  wire [n_byte_on_databus-1:0] we_a;\n  wire [n_byte_on_databus-1:0] we_b;\n  reg [n_byte_on_databus-1:0] we_a1 =0;\n  reg [n_byte_on_databus-1:0] we_b1 =0;\n  reg [BITSIZE_din_value_aggregated-1:0] din_value_aggregated1 =0;\n  \n  reg [BITSIZE_dout_a-1:0] dout_a =0;\n  reg [BITSIZE_dout_a-1:0] dout_a_registered =0;\n  reg [BITSIZE_dout_b-1:0] dout_b =0;\n  reg [BITSIZE_dout_b-1:0] dout_b_registered =0;\n  reg [BITSIZE_memory_addr_a-1:0] memory_addr_a1 =0;\n  reg [BITSIZE_memory_addr_b-1:0] memory_addr_b1 =0;\n  reg [BRAM_BITSIZE-1:0] memory [0:n_mem_elements-1] /* synthesis syn_ramstyle = \"no_rw_check\" */;\n  \n  initial\n  begin\n    $readmemb(MEMORY_INIT_file, memory, 0, n_mem_elements-1);\n  end\n  \n  always @(posedge clock)\n  begin\n    if(HIGH_LATENCY==0)\n    begin\n      dout_a <= memory[memory_addr_a];\n    end\n    else if(HIGH_LATENCY==1)\n    begin\n      dout_a_registered <= memory[memory_addr_a];\n      dout_a <= dout_a_registered;\n    end\n    else\n    begin\n      memory_addr_a1 <= memory_addr_a;\n      we_a1 <= we_a;\n      din_value_aggregated1 <= din_value_aggregated;\n      dout_a_registered <= memory[memory_addr_a1];\n      dout_a <= dout_a_registered;\n    end\n  end\n  \n  generate\n  genvar i11;\n    for (i11=0; i11<n_byte_on_databus; i11=i11+1)\n    begin : L11_write_a\n      always @(posedge clock)\n      begin\n        if(HIGH_LATENCY==0||HIGH_LATENCY==1)\n        begin\n          if(we_a[i11])\n            memory[memory_addr_a][(i11+1)*8-1:i11*8] <= din_value_aggregated[(i11+1)*8-1:i11*8];\n        end\n        else\n        begin\n          if(we_a1[i11])\n            memory[memory_addr_a1][(i11+1)*8-1:i11*8] <= din_value_aggregated1[(i11+1)*8-1:i11*8];\n        end\n      end\n    end\n  endgenerate\n  \n    always @(posedge clock)\n    begin\n      if(HIGH_LATENCY==0)\n      begin\n        dout_b <= memory[memory_addr_b];\n      end\n      else if(HIGH_LATENCY==1)\n      begin\n        dout_b_registered <= memory[memory_addr_b];\n        dout_b <= dout_b_registered;\n      end\n      else\n      begin\n        memory_addr_b1 <= memory_addr_b;\n        we_b1 <= we_b;\n        dout_b_registered <= memory[memory_addr_b1];\n        dout_b <= dout_b_registered;\n      end\n    end\n    for (i11=0; i11<n_byte_on_databus; i11=i11+1)\n    begin : L11_write_b\n      always @(posedge clock)\n      begin\n        if(HIGH_LATENCY==0||HIGH_LATENCY==1)\n        begin\n          if(we_b[i11])\n            memory[memory_addr_b][(i11+1)*8-1:i11*8] <= din_value_aggregated[(i11+1+n_byte_on_databus)*8-1:(i11+n_byte_on_databus)*8];\n        end\n        else\n        begin\n          if(we_b1[i11])\n            memory[memory_addr_b1][(i11+1)*8-1:i11*8] <= din_value_aggregated1[(i11+1+n_byte_on_databus)*8-1:(i11+n_byte_on_databus)*8];\n        end\n      end\n    end\n  \n  generate\n  genvar i2_a;\n    for (i2_a=0; i2_a<n_byte_on_databus; i2_a=i2_a+1)\n    begin  : write_enable_a\n      assign we_a[i2_a] = (bram_write0) && be[i2_a];\n    end\n  endgenerate\n  \n  generate\n  genvar i2_b;\n    for (i2_b=0; i2_b<n_byte_on_databus; i2_b=i2_b+1)\n    begin  : write_enable_b\n      assign we_b[i2_b] = (bram_write1) && be[i2_b+n_byte_on_databus];\n    end\n  endgenerate\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2016-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule BRAM_MEMORY_CORE(clock,\n  bram_write,\n  memory_addr_a,\n  memory_addr_b,\n  din_value_aggregated,\n  be,\n  dout_a,\n  dout_b);\n  parameter BITSIZE_dout_a=1,\n    BITSIZE_dout_b=1,\n    BITSIZE_memory_addr_a=1,\n    BITSIZE_memory_addr_b=1,\n    BITSIZE_din_value_aggregated=1,\n    BITSIZE_be=1,\n    MEMORY_INIT_file=\"array.mem\",\n    BRAM_BITSIZE=32,\n    nbit_read_addr=32,\n    n_byte_on_databus=4,\n    n_mem_elements=4,\n    n_bytes=4,\n    HIGH_LATENCY=0;\n  // IN\n  input clock;\n  input bram_write;\n  input [BITSIZE_memory_addr_a-1:0] memory_addr_a;\n  input [BITSIZE_memory_addr_b-1:0] memory_addr_b;\n  input [BITSIZE_din_value_aggregated-1:0] din_value_aggregated;\n  input [BITSIZE_be-1:0] be;\n  // OUT\n  output [BITSIZE_dout_a-1:0] dout_a;\n  output [BITSIZE_dout_b-1:0] dout_b;\n  \n  generate\n  if(n_mem_elements == 1)\n  begin\n    BRAM_MEMORY_CORE_SMALL #(.BITSIZE_memory_addr_a(BITSIZE_memory_addr_a), .BITSIZE_memory_addr_b(BITSIZE_memory_addr_b), .BITSIZE_din_value_aggregated(BITSIZE_din_value_aggregated), .BITSIZE_be(BITSIZE_be), .BITSIZE_dout_a(BITSIZE_dout_a), .BITSIZE_dout_b(BITSIZE_dout_b), .MEMORY_INIT_file(MEMORY_INIT_file), .n_byte_on_databus(n_byte_on_databus), .n_mem_elements(n_mem_elements), .n_bytes(n_bytes), .HIGH_LATENCY(HIGH_LATENCY)) BRAM_MEMORY_instance_small (.clock(clock), .bram_write0(bram_write), .bram_write1(bram_write), .memory_addr_a(memory_addr_a), .memory_addr_b(memory_addr_b), .din_value_aggregated(din_value_aggregated), .be(be), .dout_a(dout_a), .dout_b(dout_b));\n  end\n  else\n  begin\n    TRUE_DUAL_PORT_BYTE_ENABLING_RAM #(.BITSIZE_memory_addr_a(BITSIZE_memory_addr_a), .BITSIZE_memory_addr_b(BITSIZE_memory_addr_b), .BITSIZE_din_value_aggregated(BITSIZE_din_value_aggregated), .BITSIZE_be(BITSIZE_be), .BITSIZE_dout_a(BITSIZE_dout_a), .BITSIZE_dout_b(BITSIZE_dout_b), .MEMORY_INIT_file(MEMORY_INIT_file), .BRAM_BITSIZE(BRAM_BITSIZE), .n_byte_on_databus(n_byte_on_databus), .n_mem_elements(n_mem_elements), .HIGH_LATENCY(HIGH_LATENCY)) TRUE_DUAL_PORT_BYTE_ENABLING_RAM_instance (.clock(clock), .bram_write0(bram_write), .bram_write1(bram_write), .memory_addr_a(memory_addr_a), .memory_addr_b(memory_addr_b), .din_value_aggregated(din_value_aggregated), .be(be), .dout_a(dout_a), .dout_b(dout_b));\n  end\n  endgenerate\n\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule ARRAY_1D_STD_BRAM_SP(clock,\n  reset,\n  in1,\n  in2,\n  in3,\n  sel_LOAD,\n  sel_STORE,\n  S_oe_ram,\n  S_we_ram,\n  S_addr_ram,\n  S_Wdata_ram,\n  Sin_Rdata_ram,\n  S_data_ram_size,\n  Sin_DataRdy,\n  out1,\n  Sout_Rdata_ram,\n  Sout_DataRdy,\n  proxy_in1,\n  proxy_in2,\n  proxy_in3,\n  proxy_sel_LOAD,\n  proxy_sel_STORE,\n  proxy_out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_in2=1,\n    BITSIZE_in3=1,\n    BITSIZE_out1=1,\n    BITSIZE_S_addr_ram=1,\n    BITSIZE_S_Wdata_ram=8,\n    BITSIZE_Sin_Rdata_ram=8,\n    BITSIZE_Sout_Rdata_ram=8,\n    BITSIZE_S_data_ram_size=1,\n    MEMORY_INIT_file=\"array.mem\",\n    n_elements=1,\n    data_size=32,\n    address_space_begin=0,\n    address_space_rangesize=4,\n    BUS_PIPELINED=1,\n    BRAM_BITSIZE=32,\n    PRIVATE_MEMORY=0,\n    USE_SPARSE_MEMORY=1,\n    HIGH_LATENCY=0,\n    BITSIZE_proxy_in1=1,\n    BITSIZE_proxy_in2=1,\n    BITSIZE_proxy_in3=1,\n    BITSIZE_proxy_out1=1;\n  // IN\n  input clock;\n  input reset;\n  input [BITSIZE_in1-1:0] in1;\n  input [BITSIZE_in2-1:0] in2;\n  input [BITSIZE_in3-1:0] in3;\n  input sel_LOAD;\n  input sel_STORE;\n  input S_oe_ram;\n  input S_we_ram;\n  input [BITSIZE_S_addr_ram-1:0] S_addr_ram;\n  input [BITSIZE_S_Wdata_ram-1:0] S_Wdata_ram;\n  input [BITSIZE_Sin_Rdata_ram-1:0] Sin_Rdata_ram;\n  input [BITSIZE_S_data_ram_size-1:0] S_data_ram_size;\n  input Sin_DataRdy;\n  input [BITSIZE_proxy_in1-1:0] proxy_in1;\n  input [BITSIZE_proxy_in2-1:0] proxy_in2;\n  input [BITSIZE_proxy_in3-1:0] proxy_in3;\n  input proxy_sel_LOAD;\n  input proxy_sel_STORE;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  output [BITSIZE_Sout_Rdata_ram-1:0] Sout_Rdata_ram;\n  output Sout_DataRdy;\n  output [BITSIZE_proxy_out1-1:0] proxy_out1;\n  `ifndef _SIM_HAVE_CLOG2\n    function integer log2;\n       input integer value;\n       integer temp_value;\n      begin\n        temp_value = value-1;\n        for (log2=0; temp_value>0; log2=log2+1)\n          temp_value = temp_value>>1;\n      end\n    endfunction\n  `endif\n  parameter n_bytes = (n_elements*data_size)/8 == 0 ? 1 : (n_elements*data_size)/8;\n  parameter n_byte_on_databus = BRAM_BITSIZE/8;\n  parameter n_mem_elements = n_bytes/(n_byte_on_databus) + (n_bytes%(n_byte_on_databus) == 0 ? 0 : 1);\n  `ifdef _SIM_HAVE_CLOG2\n    parameter nbit_read_addr = n_mem_elements == 1 ? 1 : $clog2(n_mem_elements);\n  `else\n    parameter nbit_read_addr = n_mem_elements == 1 ? 1 : log2(n_mem_elements);\n  `endif\n    \n  wire [nbit_read_addr-1:0] memory_addr_a;\n  wire [nbit_read_addr-1:0] memory_addr_b;\n  wire [n_byte_on_databus*2-1:0] be;\n  \n  wire [2*BRAM_BITSIZE-1:0] din_value_aggregated;\n  wire bram_write;\n  wire [BRAM_BITSIZE-1:0] dout_a;\n  wire [BRAM_BITSIZE-1:0] dout_b;\n  \n  BRAM_MEMORY_CORE #(.BITSIZE_memory_addr_a(nbit_read_addr), .BITSIZE_memory_addr_b(nbit_read_addr), .BITSIZE_din_value_aggregated(2*BRAM_BITSIZE), .BITSIZE_be(n_byte_on_databus*2), .BITSIZE_dout_a(BRAM_BITSIZE), .BITSIZE_dout_b(BRAM_BITSIZE), .MEMORY_INIT_file(MEMORY_INIT_file), .BRAM_BITSIZE(BRAM_BITSIZE), .nbit_read_addr(nbit_read_addr), .n_byte_on_databus(n_byte_on_databus), .n_mem_elements(n_mem_elements), .n_bytes(n_bytes), .HIGH_LATENCY(HIGH_LATENCY)) BRAM_MEMORY_instance (.clock(clock), .bram_write(bram_write), .memory_addr_a(memory_addr_a), .memory_addr_b(memory_addr_b), .din_value_aggregated(din_value_aggregated), .be(be), .dout_a(dout_a), .dout_b(dout_b));\n  \n  ADDRESS_DECODING_LOGIC #(.BITSIZE_memory_addr_a(nbit_read_addr), .BITSIZE_memory_addr_b(nbit_read_addr), .BITSIZE_din_value_aggregated(2*BRAM_BITSIZE), .BITSIZE_be(n_byte_on_databus*2), .BITSIZE_dout_a(BRAM_BITSIZE), .BITSIZE_dout_b(BRAM_BITSIZE), .BITSIZE_in1(BITSIZE_in1), .BITSIZE_in2(BITSIZE_in2), .BITSIZE_in3(BITSIZE_in3), .BITSIZE_out1(BITSIZE_out1), .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram), .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram), .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram), .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram), .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size), .address_space_begin(address_space_begin), .address_space_rangesize(address_space_rangesize), .BUS_PIPELINED(BUS_PIPELINED), .BRAM_BITSIZE(BRAM_BITSIZE), .PRIVATE_MEMORY(PRIVATE_MEMORY), .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY), .BITSIZE_proxy_in1(BITSIZE_proxy_in1), .BITSIZE_proxy_in2(BITSIZE_proxy_in2), .BITSIZE_proxy_in3(BITSIZE_proxy_in3), .BITSIZE_proxy_out1(BITSIZE_proxy_out1), .nbit_read_addr(nbit_read_addr), .n_byte_on_databus(n_byte_on_databus), .n_mem_elements(n_mem_elements), .n_bytes(n_bytes), .HIGH_LATENCY(HIGH_LATENCY)) ADDRESS_DECODING_LOGIC_instance (.out1(out1), .Sout_Rdata_ram(Sout_Rdata_ram), .Sout_DataRdy(Sout_DataRdy), .proxy_out1(proxy_out1), .clock(clock), .reset(reset), .in1(in1), .in2(in2), .in3(in3), .sel_LOAD(sel_LOAD), .sel_STORE(sel_STORE), .S_oe_ram(S_oe_ram), .S_we_ram(S_we_ram), .S_addr_ram(S_addr_ram), .S_Wdata_ram(S_Wdata_ram), .Sin_Rdata_ram(Sin_Rdata_ram), .S_data_ram_size(S_data_ram_size), .Sin_DataRdy(Sin_DataRdy), .proxy_in1(proxy_in1), .proxy_in2(proxy_in2), .proxy_in3(proxy_in3), .proxy_sel_LOAD(proxy_sel_LOAD), .proxy_sel_STORE(proxy_sel_STORE), .bram_write(bram_write), .memory_addr_a(memory_addr_a), .memory_addr_b(memory_addr_b), .din_value_aggregated(din_value_aggregated), .be(be), .dout_a(dout_a), .dout_b(dout_b));\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule ARRAY_1D_STD_BRAM(clock,\n  reset,\n  in1,\n  in2,\n  in3,\n  in4,\n  sel_LOAD,\n  sel_STORE,\n  S_oe_ram,\n  S_we_ram,\n  S_addr_ram,\n  S_Wdata_ram,\n  Sin_Rdata_ram,\n  S_data_ram_size,\n  Sin_DataRdy,\n  out1,\n  Sout_Rdata_ram,\n  Sout_DataRdy,\n  proxy_in1,\n  proxy_in2,\n  proxy_in3,\n  proxy_sel_LOAD,\n  proxy_sel_STORE,\n  proxy_out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_in2=1,\n    BITSIZE_in3=1,\n    BITSIZE_out1=1,\n    BITSIZE_S_addr_ram=1,\n    BITSIZE_S_Wdata_ram=8,\n    BITSIZE_Sin_Rdata_ram=8,\n    BITSIZE_Sout_Rdata_ram=8,\n    BITSIZE_S_data_ram_size=1,\n    MEMORY_INIT_file=\"array.mem\",\n    n_elements=1,\n    data_size=32,\n    address_space_begin=0,\n    address_space_rangesize=4,\n    BUS_PIPELINED=1,\n    BRAM_BITSIZE=32,\n    PRIVATE_MEMORY=0,\n    USE_SPARSE_MEMORY=1,\n    BITSIZE_proxy_in1=1,\n    BITSIZE_proxy_in2=1,\n    BITSIZE_proxy_in3=1,\n    BITSIZE_proxy_out1=1;\n  // IN\n  input clock;\n  input reset;\n  input [BITSIZE_in1-1:0] in1;\n  input [BITSIZE_in2-1:0] in2;\n  input [BITSIZE_in3-1:0] in3;\n  input in4;\n  input sel_LOAD;\n  input sel_STORE;\n  input S_oe_ram;\n  input S_we_ram;\n  input [BITSIZE_S_addr_ram-1:0] S_addr_ram;\n  input [BITSIZE_S_Wdata_ram-1:0] S_Wdata_ram;\n  input [BITSIZE_Sin_Rdata_ram-1:0] Sin_Rdata_ram;\n  input [BITSIZE_S_data_ram_size-1:0] S_data_ram_size;\n  input Sin_DataRdy;\n  input [BITSIZE_proxy_in1-1:0] proxy_in1;\n  input [BITSIZE_proxy_in2-1:0] proxy_in2;\n  input [BITSIZE_proxy_in3-1:0] proxy_in3;\n  input proxy_sel_LOAD;\n  input proxy_sel_STORE;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  output [BITSIZE_Sout_Rdata_ram-1:0] Sout_Rdata_ram;\n  output Sout_DataRdy;\n  output [BITSIZE_proxy_out1-1:0] proxy_out1;\n  ARRAY_1D_STD_BRAM_SP #(.BITSIZE_in1(BITSIZE_in1), .BITSIZE_in2(BITSIZE_in2), .BITSIZE_in3(BITSIZE_in3), .BITSIZE_out1(BITSIZE_out1), .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram), .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram), .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram), .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram), .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size), .MEMORY_INIT_file(MEMORY_INIT_file), .n_elements(n_elements), .data_size(data_size), .address_space_begin(address_space_begin), .address_space_rangesize(address_space_rangesize), .BUS_PIPELINED(BUS_PIPELINED), .BRAM_BITSIZE(BRAM_BITSIZE), .PRIVATE_MEMORY(PRIVATE_MEMORY), .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY), .BITSIZE_proxy_in1(BITSIZE_proxy_in1), .BITSIZE_proxy_in2(BITSIZE_proxy_in2), .BITSIZE_proxy_in3(BITSIZE_proxy_in3), .BITSIZE_proxy_out1(BITSIZE_proxy_out1), .HIGH_LATENCY(0)) ARRAY_1D_STD_BRAM_instance (.out1(out1), .Sout_Rdata_ram(Sout_Rdata_ram), .Sout_DataRdy(Sout_DataRdy), .proxy_out1(proxy_out1), .clock(clock), .reset(reset), .in1(in1), .in2(in2), .in3(in3), .sel_LOAD(sel_LOAD & in4), .sel_STORE(sel_STORE & in4), .S_oe_ram(S_oe_ram), .S_we_ram(S_we_ram), .S_addr_ram(S_addr_ram), .S_Wdata_ram(S_Wdata_ram), .Sin_Rdata_ram(Sin_Rdata_ram), .S_data_ram_size(S_data_ram_size), .Sin_DataRdy(Sin_DataRdy), .proxy_in1(proxy_in1), .proxy_in2(proxy_in2), .proxy_in3(proxy_in3), .proxy_sel_LOAD(proxy_sel_LOAD), .proxy_sel_STORE(proxy_sel_STORE));\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule addr_expr_FU(in1,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_out1=1;\n  // IN\n  input [BITSIZE_in1-1:0] in1;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  assign out1 = in1;\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule ui_view_convert_expr_FU(in1,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_out1=1;\n  // IN\n  input [BITSIZE_in1-1:0] in1;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  assign out1 = in1;\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule read_cond_FU(in1,\n  out1);\n  parameter BITSIZE_in1=1;\n  // IN\n  input [BITSIZE_in1-1:0] in1;\n  // OUT\n  output out1;\n  assign out1 = in1 != {BITSIZE_in1{1'b0}};\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule BMEMORY_CTRL(clock,\n  in1,\n  in2,\n  in3,\n  in4,\n  sel_LOAD,\n  sel_STORE,\n  out1,\n  Min_oe_ram,\n  Mout_oe_ram,\n  Min_we_ram,\n  Mout_we_ram,\n  Min_addr_ram,\n  Mout_addr_ram,\n  M_Rdata_ram,\n  Min_Wdata_ram,\n  Mout_Wdata_ram,\n  Min_data_ram_size,\n  Mout_data_ram_size,\n  M_DataRdy);\n  parameter BITSIZE_in1=1,\n    BITSIZE_in2=1,\n    BITSIZE_in3=1,\n    BITSIZE_out1=1,\n    BITSIZE_Min_addr_ram=1,\n    BITSIZE_Mout_addr_ram=1,\n    BITSIZE_M_Rdata_ram=8,\n    BITSIZE_Min_Wdata_ram=8,\n    BITSIZE_Mout_Wdata_ram=8,\n    BITSIZE_Min_data_ram_size=1,\n    BITSIZE_Mout_data_ram_size=1;\n  // IN\n  input clock;\n  input [BITSIZE_in1-1:0] in1;\n  input [BITSIZE_in2-1:0] in2;\n  input [BITSIZE_in3-1:0] in3;\n  input in4;\n  input sel_LOAD;\n  input sel_STORE;\n  input Min_oe_ram;\n  input Min_we_ram;\n  input [BITSIZE_Min_addr_ram-1:0] Min_addr_ram;\n  input [BITSIZE_M_Rdata_ram-1:0] M_Rdata_ram;\n  input [BITSIZE_Min_Wdata_ram-1:0] Min_Wdata_ram;\n  input [BITSIZE_Min_data_ram_size-1:0] Min_data_ram_size;\n  input M_DataRdy;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  output Mout_oe_ram;\n  output Mout_we_ram;\n  output [BITSIZE_Mout_addr_ram-1:0] Mout_addr_ram;\n  output [BITSIZE_Mout_Wdata_ram-1:0] Mout_Wdata_ram;\n  output [BITSIZE_Mout_data_ram_size-1:0] Mout_data_ram_size;\n  \n  wire  [BITSIZE_in2-1:0] tmp_addr;\n  wire int_sel_LOAD;\n  wire int_sel_STORE;\n  assign tmp_addr = in2;\n  assign Mout_addr_ram = (int_sel_LOAD || int_sel_STORE) ? tmp_addr : Min_addr_ram;\n  assign Mout_oe_ram = int_sel_LOAD ? 1'b1 : Min_oe_ram;\n  assign Mout_we_ram = int_sel_STORE ? 1'b1 : Min_we_ram;\n  assign out1 = M_Rdata_ram[BITSIZE_out1-1:0];\n  assign Mout_Wdata_ram = int_sel_STORE ? in1 : Min_Wdata_ram;\n  assign Mout_data_ram_size = int_sel_STORE || int_sel_LOAD ? in3[BITSIZE_in3-1:0] : Min_data_ram_size;\n  assign int_sel_LOAD = sel_LOAD & in4;\n  assign int_sel_STORE = sel_STORE & in4;\n  // Add assertion here\n  // psl default clock = (posedge clock);\n  // psl ERROR_LOAD_Min_oe_ram: assert never {sel_LOAD && Min_oe_ram};\n  // psl ERROR_STORE_Min_we_ram: assert never {sel_STORE && Min_we_ram};\n  // psl ERROR_STORE_LOAD: assert never {sel_STORE && sel_LOAD};\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule ui_bit_and_expr_FU(in1,\n  in2,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_in2=1,\n    BITSIZE_out1=1;\n  // IN\n  input [BITSIZE_in1-1:0] in1;\n  input [BITSIZE_in2-1:0] in2;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  assign out1 = in1 & in2;\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule ui_bit_xor_expr_FU(in1,\n  in2,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_in2=1,\n    BITSIZE_out1=1;\n  // IN\n  input [BITSIZE_in1-1:0] in1;\n  input [BITSIZE_in2-1:0] in2;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  assign out1 = in1 ^ in2;\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule ui_eq_expr_FU(in1,\n  in2,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_in2=1,\n    BITSIZE_out1=1;\n  // IN\n  input [BITSIZE_in1-1:0] in1;\n  input [BITSIZE_in2-1:0] in2;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  assign out1 = in1 == in2;\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2021-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule ui_fshl_expr_FU(in1,\n  in2,\n  in3,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_in2=1,\n    BITSIZE_in3=1,\n    BITSIZE_out1=1,\n    PRECISION=1;\n  // IN\n  input [BITSIZE_in1-1:0] in1;\n  input [BITSIZE_in2-1:0] in2;\n  input [BITSIZE_in3-1:0] in3;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  `ifndef _SIM_HAVE_CLOG2\n    function integer log2;\n       input integer value;\n       integer temp_value;\n      begin\n        temp_value = value-1;\n        for (log2=0; temp_value>0; log2=log2+1)\n          temp_value = temp_value>>1;\n      end\n    endfunction\n  `endif\n  `ifdef _SIM_HAVE_CLOG2\n    parameter arg_bitsize = $clog2(PRECISION);\n  `else\n    parameter arg_bitsize = log2(PRECISION);\n  `endif\n  parameter marg_bitsize = arg_bitsize < BITSIZE_in3 ? arg_bitsize : BITSIZE_in3;\n  assign out1 = (in1 << (in3[marg_bitsize-1:0]))|(in2 >> (PRECISION-(in3[marg_bitsize-1:0])));\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule ui_pointer_plus_expr_FU(in1,\n  in2,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_in2=1,\n    BITSIZE_out1=1,\n    LSB_PARAMETER=-1;\n  // IN\n  input [BITSIZE_in1-1:0] in1;\n  input [BITSIZE_in2-1:0] in2;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  wire [BITSIZE_out1-1:0] in1_tmp;\n  wire [BITSIZE_out1-1:0] in2_tmp;\n  assign in1_tmp = in1;\n  assign in2_tmp = in2;generate if (BITSIZE_out1 > LSB_PARAMETER) assign out1[BITSIZE_out1-1:LSB_PARAMETER] = (in1_tmp[BITSIZE_out1-1:LSB_PARAMETER] + in2_tmp[BITSIZE_out1-1:LSB_PARAMETER]); else assign out1 = 0; endgenerate\n  generate if (LSB_PARAMETER != 0 && BITSIZE_out1 > LSB_PARAMETER) assign out1[LSB_PARAMETER-1:0] = 0; endgenerate\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule ui_rshift_expr_FU(in1,\n  in2,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_in2=1,\n    BITSIZE_out1=1,\n    PRECISION=1;\n  // IN\n  input [BITSIZE_in1-1:0] in1;\n  input [BITSIZE_in2-1:0] in2;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  `ifndef _SIM_HAVE_CLOG2\n    function integer log2;\n       input integer value;\n       integer temp_value;\n      begin\n        temp_value = value-1;\n        for (log2=0; temp_value>0; log2=log2+1)\n          temp_value = temp_value>>1;\n      end\n    endfunction\n  `endif\n  `ifdef _SIM_HAVE_CLOG2\n    parameter arg2_bitsize = $clog2(PRECISION);\n  `else\n    parameter arg2_bitsize = log2(PRECISION);\n  `endif\n  generate\n    if(BITSIZE_in2 > arg2_bitsize)\n      assign out1 = in1 >> (in2[arg2_bitsize-1:0]);\n    else\n      assign out1 = in1 >> in2;\n  endgenerate\n\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule UUdata_converter_FU(in1,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_out1=1;\n  // IN\n  input [BITSIZE_in1-1:0] in1;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  generate\n  if (BITSIZE_out1 <= BITSIZE_in1)\n  begin\n    assign out1 = in1[BITSIZE_out1-1:0];\n  end\n  else\n  begin\n    assign out1 = {{(BITSIZE_out1-BITSIZE_in1){1'b0}},in1};\n  end\n  endgenerate\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>, Christian Pilato <christian.pilato@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule MUX_GATE(sel,\n  in1,\n  in2,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_in2=1,\n    BITSIZE_out1=1;\n  // IN\n  input sel;\n  input [BITSIZE_in1-1:0] in1;\n  input [BITSIZE_in2-1:0] in2;\n  // OUT\n  output [BITSIZE_out1-1:0] out1;\n  assign out1 = sel ? in1 : in2;\nendmodule\n\n// Datapath RTL description for keccak\n// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.\n// Author(s): Component automatically generated by bambu\n// License: THIS COMPONENT IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n`timescale 1ns / 1ps\nmodule datapath_keccak(clock,\n  reset,\n  in_port_Pd226,\n  S_oe_ram,\n  S_we_ram,\n  S_addr_ram,\n  S_Wdata_ram,\n  S_data_ram_size,\n  M_Rdata_ram,\n  M_DataRdy,\n  Sin_Rdata_ram,\n  Sin_DataRdy,\n  Sout_Rdata_ram,\n  Sout_DataRdy,\n  Min_oe_ram,\n  Min_we_ram,\n  Min_addr_ram,\n  Min_Wdata_ram,\n  Min_data_ram_size,\n  Mout_oe_ram,\n  Mout_we_ram,\n  Mout_addr_ram,\n  Mout_Wdata_ram,\n  Mout_data_ram_size,\n  fuselector_BMEMORY_CTRL_35_i0_LOAD,\n  fuselector_BMEMORY_CTRL_35_i0_STORE,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1,\n  selector_MUX_25_reg_24_0_0_0,\n  selector_MUX_27_reg_26_0_0_0,\n  selector_MUX_28_reg_27_0_0_0,\n  selector_MUX_29_reg_28_0_0_0,\n  selector_MUX_30_reg_29_0_0_0,\n  selector_MUX_32_reg_30_0_0_0,\n  selector_MUX_33_reg_31_0_0_0,\n  selector_MUX_34_reg_32_0_0_0,\n  selector_MUX_35_reg_33_0_0_0,\n  selector_MUX_36_reg_34_0_0_0,\n  selector_MUX_37_reg_35_0_0_0,\n  selector_MUX_38_reg_36_0_0_0,\n  selector_MUX_39_reg_37_0_0_0,\n  selector_MUX_40_reg_38_0_0_0,\n  selector_MUX_41_reg_39_0_0_0,\n  selector_MUX_43_reg_40_0_0_0,\n  selector_MUX_44_reg_41_0_0_0,\n  selector_MUX_45_reg_42_0_0_0,\n  selector_MUX_46_reg_43_0_0_0,\n  selector_MUX_47_reg_44_0_0_0,\n  selector_MUX_48_reg_45_0_0_0,\n  selector_MUX_49_reg_46_0_0_0,\n  selector_MUX_50_reg_47_0_0_0,\n  selector_MUX_51_reg_48_0_0_0,\n  selector_MUX_52_reg_49_0_0_0,\n  selector_MUX_54_reg_50_0_0_0,\n  wrenable_reg_0,\n  wrenable_reg_1,\n  wrenable_reg_10,\n  wrenable_reg_11,\n  wrenable_reg_12,\n  wrenable_reg_13,\n  wrenable_reg_14,\n  wrenable_reg_15,\n  wrenable_reg_16,\n  wrenable_reg_17,\n  wrenable_reg_18,\n  wrenable_reg_19,\n  wrenable_reg_2,\n  wrenable_reg_20,\n  wrenable_reg_21,\n  wrenable_reg_22,\n  wrenable_reg_23,\n  wrenable_reg_24,\n  wrenable_reg_25,\n  wrenable_reg_26,\n  wrenable_reg_27,\n  wrenable_reg_28,\n  wrenable_reg_29,\n  wrenable_reg_3,\n  wrenable_reg_30,\n  wrenable_reg_31,\n  wrenable_reg_32,\n  wrenable_reg_33,\n  wrenable_reg_34,\n  wrenable_reg_35,\n  wrenable_reg_36,\n  wrenable_reg_37,\n  wrenable_reg_38,\n  wrenable_reg_39,\n  wrenable_reg_4,\n  wrenable_reg_40,\n  wrenable_reg_41,\n  wrenable_reg_42,\n  wrenable_reg_43,\n  wrenable_reg_44,\n  wrenable_reg_45,\n  wrenable_reg_46,\n  wrenable_reg_47,\n  wrenable_reg_48,\n  wrenable_reg_49,\n  wrenable_reg_5,\n  wrenable_reg_50,\n  wrenable_reg_51,\n  wrenable_reg_52,\n  wrenable_reg_53,\n  wrenable_reg_54,\n  wrenable_reg_55,\n  wrenable_reg_56,\n  wrenable_reg_57,\n  wrenable_reg_58,\n  wrenable_reg_59,\n  wrenable_reg_6,\n  wrenable_reg_60,\n  wrenable_reg_61,\n  wrenable_reg_62,\n  wrenable_reg_63,\n  wrenable_reg_64,\n  wrenable_reg_65,\n  wrenable_reg_66,\n  wrenable_reg_67,\n  wrenable_reg_68,\n  wrenable_reg_69,\n  wrenable_reg_7,\n  wrenable_reg_70,\n  wrenable_reg_71,\n  wrenable_reg_72,\n  wrenable_reg_73,\n  wrenable_reg_74,\n  wrenable_reg_75,\n  wrenable_reg_76,\n  wrenable_reg_77,\n  wrenable_reg_78,\n  wrenable_reg_8,\n  wrenable_reg_9,\n  OUT_CONDITION_keccak_423514_423900);\n  parameter MEM_var_423955_423514=1024;\n  // IN\n  input clock;\n  input reset;\n  input [31:0] in_port_Pd226;\n  input S_oe_ram;\n  input S_we_ram;\n  input [31:0] S_addr_ram;\n  input [63:0] S_Wdata_ram;\n  input [6:0] S_data_ram_size;\n  input [63:0] M_Rdata_ram;\n  input M_DataRdy;\n  input [63:0] Sin_Rdata_ram;\n  input Sin_DataRdy;\n  input Min_oe_ram;\n  input Min_we_ram;\n  input [31:0] Min_addr_ram;\n  input [63:0] Min_Wdata_ram;\n  input [6:0] Min_data_ram_size;\n  input fuselector_BMEMORY_CTRL_35_i0_LOAD;\n  input fuselector_BMEMORY_CTRL_35_i0_STORE;\n  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0;\n  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1;\n  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10;\n  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11;\n  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12;\n  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2;\n  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3;\n  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4;\n  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5;\n  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6;\n  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7;\n  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8;\n  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9;\n  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0;\n  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1;\n  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2;\n  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3;\n  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4;\n  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5;\n  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0;\n  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1;\n  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2;\n  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0;\n  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1;\n  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0;\n  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1;\n  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10;\n  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11;\n  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12;\n  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2;\n  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3;\n  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4;\n  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5;\n  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6;\n  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7;\n  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8;\n  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9;\n  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0;\n  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1;\n  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2;\n  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3;\n  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4;\n  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5;\n  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6;\n  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0;\n  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1;\n  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2;\n  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0;\n  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1;\n  input selector_MUX_25_reg_24_0_0_0;\n  input selector_MUX_27_reg_26_0_0_0;\n  input selector_MUX_28_reg_27_0_0_0;\n  input selector_MUX_29_reg_28_0_0_0;\n  input selector_MUX_30_reg_29_0_0_0;\n  input selector_MUX_32_reg_30_0_0_0;\n  input selector_MUX_33_reg_31_0_0_0;\n  input selector_MUX_34_reg_32_0_0_0;\n  input selector_MUX_35_reg_33_0_0_0;\n  input selector_MUX_36_reg_34_0_0_0;\n  input selector_MUX_37_reg_35_0_0_0;\n  input selector_MUX_38_reg_36_0_0_0;\n  input selector_MUX_39_reg_37_0_0_0;\n  input selector_MUX_40_reg_38_0_0_0;\n  input selector_MUX_41_reg_39_0_0_0;\n  input selector_MUX_43_reg_40_0_0_0;\n  input selector_MUX_44_reg_41_0_0_0;\n  input selector_MUX_45_reg_42_0_0_0;\n  input selector_MUX_46_reg_43_0_0_0;\n  input selector_MUX_47_reg_44_0_0_0;\n  input selector_MUX_48_reg_45_0_0_0;\n  input selector_MUX_49_reg_46_0_0_0;\n  input selector_MUX_50_reg_47_0_0_0;\n  input selector_MUX_51_reg_48_0_0_0;\n  input selector_MUX_52_reg_49_0_0_0;\n  input selector_MUX_54_reg_50_0_0_0;\n  input wrenable_reg_0;\n  input wrenable_reg_1;\n  input wrenable_reg_10;\n  input wrenable_reg_11;\n  input wrenable_reg_12;\n  input wrenable_reg_13;\n  input wrenable_reg_14;\n  input wrenable_reg_15;\n  input wrenable_reg_16;\n  input wrenable_reg_17;\n  input wrenable_reg_18;\n  input wrenable_reg_19;\n  input wrenable_reg_2;\n  input wrenable_reg_20;\n  input wrenable_reg_21;\n  input wrenable_reg_22;\n  input wrenable_reg_23;\n  input wrenable_reg_24;\n  input wrenable_reg_25;\n  input wrenable_reg_26;\n  input wrenable_reg_27;\n  input wrenable_reg_28;\n  input wrenable_reg_29;\n  input wrenable_reg_3;\n  input wrenable_reg_30;\n  input wrenable_reg_31;\n  input wrenable_reg_32;\n  input wrenable_reg_33;\n  input wrenable_reg_34;\n  input wrenable_reg_35;\n  input wrenable_reg_36;\n  input wrenable_reg_37;\n  input wrenable_reg_38;\n  input wrenable_reg_39;\n  input wrenable_reg_4;\n  input wrenable_reg_40;\n  input wrenable_reg_41;\n  input wrenable_reg_42;\n  input wrenable_reg_43;\n  input wrenable_reg_44;\n  input wrenable_reg_45;\n  input wrenable_reg_46;\n  input wrenable_reg_47;\n  input wrenable_reg_48;\n  input wrenable_reg_49;\n  input wrenable_reg_5;\n  input wrenable_reg_50;\n  input wrenable_reg_51;\n  input wrenable_reg_52;\n  input wrenable_reg_53;\n  input wrenable_reg_54;\n  input wrenable_reg_55;\n  input wrenable_reg_56;\n  input wrenable_reg_57;\n  input wrenable_reg_58;\n  input wrenable_reg_59;\n  input wrenable_reg_6;\n  input wrenable_reg_60;\n  input wrenable_reg_61;\n  input wrenable_reg_62;\n  input wrenable_reg_63;\n  input wrenable_reg_64;\n  input wrenable_reg_65;\n  input wrenable_reg_66;\n  input wrenable_reg_67;\n  input wrenable_reg_68;\n  input wrenable_reg_69;\n  input wrenable_reg_7;\n  input wrenable_reg_70;\n  input wrenable_reg_71;\n  input wrenable_reg_72;\n  input wrenable_reg_73;\n  input wrenable_reg_74;\n  input wrenable_reg_75;\n  input wrenable_reg_76;\n  input wrenable_reg_77;\n  input wrenable_reg_78;\n  input wrenable_reg_8;\n  input wrenable_reg_9;\n  // OUT\n  output [63:0] Sout_Rdata_ram;\n  output Sout_DataRdy;\n  output Mout_oe_ram;\n  output Mout_we_ram;\n  output [31:0] Mout_addr_ram;\n  output [63:0] Mout_Wdata_ram;\n  output [6:0] Mout_data_ram_size;\n  output OUT_CONDITION_keccak_423514_423900;\n  // Component and signal declarations\n  wire [63:0] out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0;\n  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_0;\n  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_1;\n  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_10;\n  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_11;\n  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_12;\n  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_2;\n  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_3;\n  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_4;\n  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_5;\n  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_6;\n  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_7;\n  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_8;\n  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_9;\n  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_1_0;\n  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_1_1;\n  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_1_2;\n  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_1_3;\n  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_1_4;\n  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_1_5;\n  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_2_0;\n  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_2_1;\n  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_2_2;\n  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_3_0;\n  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_3_1;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_0;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_1;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_10;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_11;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_12;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_2;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_3;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_4;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_5;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_6;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_7;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_8;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_9;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_1_0;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_1_1;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_1_2;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_1_3;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_1_4;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_1_5;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_1_6;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_2_0;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_2_1;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_2_2;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_3_0;\n  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_3_1;\n  wire [31:0] out_MUX_25_reg_24_0_0_0;\n  wire [63:0] out_MUX_27_reg_26_0_0_0;\n  wire [63:0] out_MUX_28_reg_27_0_0_0;\n  wire [63:0] out_MUX_29_reg_28_0_0_0;\n  wire [63:0] out_MUX_30_reg_29_0_0_0;\n  wire [63:0] out_MUX_32_reg_30_0_0_0;\n  wire [63:0] out_MUX_33_reg_31_0_0_0;\n  wire [63:0] out_MUX_34_reg_32_0_0_0;\n  wire [63:0] out_MUX_35_reg_33_0_0_0;\n  wire [63:0] out_MUX_36_reg_34_0_0_0;\n  wire [63:0] out_MUX_37_reg_35_0_0_0;\n  wire [63:0] out_MUX_38_reg_36_0_0_0;\n  wire [63:0] out_MUX_39_reg_37_0_0_0;\n  wire [63:0] out_MUX_40_reg_38_0_0_0;\n  wire [63:0] out_MUX_41_reg_39_0_0_0;\n  wire [63:0] out_MUX_43_reg_40_0_0_0;\n  wire [63:0] out_MUX_44_reg_41_0_0_0;\n  wire [63:0] out_MUX_45_reg_42_0_0_0;\n  wire [63:0] out_MUX_46_reg_43_0_0_0;\n  wire [63:0] out_MUX_47_reg_44_0_0_0;\n  wire [63:0] out_MUX_48_reg_45_0_0_0;\n  wire [63:0] out_MUX_49_reg_46_0_0_0;\n  wire [63:0] out_MUX_50_reg_47_0_0_0;\n  wire [63:0] out_MUX_51_reg_48_0_0_0;\n  wire [63:0] out_MUX_52_reg_49_0_0_0;\n  wire [63:0] out_MUX_54_reg_50_0_0_0;\n  wire [31:0] out_addr_expr_FU_3_i0_fu_keccak_423514_424612;\n  wire [31:0] out_addr_expr_FU_5_i0_fu_keccak_423514_424627;\n  wire [7:0] out_const_0;\n  wire out_const_1;\n  wire [5:0] out_const_10;\n  wire [6:0] out_const_11;\n  wire [7:0] out_const_12;\n  wire [7:0] out_const_13;\n  wire [5:0] out_const_14;\n  wire [3:0] out_const_15;\n  wire [4:0] out_const_16;\n  wire [5:0] out_const_17;\n  wire [6:0] out_const_18;\n  wire [7:0] out_const_19;\n  wire [1:0] out_const_2;\n  wire [5:0] out_const_20;\n  wire [4:0] out_const_21;\n  wire [7:0] out_const_22;\n  wire [5:0] out_const_23;\n  wire [5:0] out_const_24;\n  wire [6:0] out_const_25;\n  wire [7:0] out_const_26;\n  wire [5:0] out_const_27;\n  wire [7:0] out_const_28;\n  wire [31:0] out_const_29;\n  wire [3:0] out_const_3;\n  wire [1:0] out_const_30;\n  wire [2:0] out_const_31;\n  wire [4:0] out_const_32;\n  wire [5:0] out_const_33;\n  wire [6:0] out_const_34;\n  wire [7:0] out_const_35;\n  wire [4:0] out_const_36;\n  wire [6:0] out_const_37;\n  wire [4:0] out_const_38;\n  wire [5:0] out_const_39;\n  wire [4:0] out_const_4;\n  wire [3:0] out_const_40;\n  wire [4:0] out_const_41;\n  wire [5:0] out_const_42;\n  wire [6:0] out_const_43;\n  wire [3:0] out_const_44;\n  wire [6:0] out_const_45;\n  wire [5:0] out_const_46;\n  wire [5:0] out_const_47;\n  wire [63:0] out_const_48;\n  wire [5:0] out_const_5;\n  wire [6:0] out_const_6;\n  wire [7:0] out_const_7;\n  wire [7:0] out_const_8;\n  wire [4:0] out_const_9;\n  wire [6:0] out_conv_out_const_0_8_7;\n  wire out_read_cond_FU_33_i0_fu_keccak_423514_423900;\n  wire [31:0] out_reg_0_reg_0;\n  wire [31:0] out_reg_10_reg_10;\n  wire [31:0] out_reg_11_reg_11;\n  wire [31:0] out_reg_12_reg_12;\n  wire [31:0] out_reg_13_reg_13;\n  wire [31:0] out_reg_14_reg_14;\n  wire [31:0] out_reg_15_reg_15;\n  wire [31:0] out_reg_16_reg_16;\n  wire [31:0] out_reg_17_reg_17;\n  wire [31:0] out_reg_18_reg_18;\n  wire [31:0] out_reg_19_reg_19;\n  wire [31:0] out_reg_1_reg_1;\n  wire [31:0] out_reg_20_reg_20;\n  wire [31:0] out_reg_21_reg_21;\n  wire [31:0] out_reg_22_reg_22;\n  wire [31:0] out_reg_23_reg_23;\n  wire [31:0] out_reg_24_reg_24;\n  wire [28:0] out_reg_25_reg_25;\n  wire [63:0] out_reg_26_reg_26;\n  wire [63:0] out_reg_27_reg_27;\n  wire [63:0] out_reg_28_reg_28;\n  wire [63:0] out_reg_29_reg_29;\n  wire [31:0] out_reg_2_reg_2;\n  wire [63:0] out_reg_30_reg_30;\n  wire [63:0] out_reg_31_reg_31;\n  wire [63:0] out_reg_32_reg_32;\n  wire [63:0] out_reg_33_reg_33;\n  wire [63:0] out_reg_34_reg_34;\n  wire [63:0] out_reg_35_reg_35;\n  wire [63:0] out_reg_36_reg_36;\n  wire [63:0] out_reg_37_reg_37;\n  wire [63:0] out_reg_38_reg_38;\n  wire [63:0] out_reg_39_reg_39;\n  wire [31:0] out_reg_3_reg_3;\n  wire [63:0] out_reg_40_reg_40;\n  wire [63:0] out_reg_41_reg_41;\n  wire [63:0] out_reg_42_reg_42;\n  wire [63:0] out_reg_43_reg_43;\n  wire [63:0] out_reg_44_reg_44;\n  wire [63:0] out_reg_45_reg_45;\n  wire [63:0] out_reg_46_reg_46;\n  wire [63:0] out_reg_47_reg_47;\n  wire [63:0] out_reg_48_reg_48;\n  wire [63:0] out_reg_49_reg_49;\n  wire [31:0] out_reg_4_reg_4;\n  wire [63:0] out_reg_50_reg_50;\n  wire [63:0] out_reg_51_reg_51;\n  wire [63:0] out_reg_52_reg_52;\n  wire [63:0] out_reg_53_reg_53;\n  wire [63:0] out_reg_54_reg_54;\n  wire [63:0] out_reg_55_reg_55;\n  wire [63:0] out_reg_56_reg_56;\n  wire [63:0] out_reg_57_reg_57;\n  wire [63:0] out_reg_58_reg_58;\n  wire [63:0] out_reg_59_reg_59;\n  wire [31:0] out_reg_5_reg_5;\n  wire [63:0] out_reg_60_reg_60;\n  wire [63:0] out_reg_61_reg_61;\n  wire [63:0] out_reg_62_reg_62;\n  wire [63:0] out_reg_63_reg_63;\n  wire [63:0] out_reg_64_reg_64;\n  wire [63:0] out_reg_65_reg_65;\n  wire [63:0] out_reg_66_reg_66;\n  wire [63:0] out_reg_67_reg_67;\n  wire [63:0] out_reg_68_reg_68;\n  wire [63:0] out_reg_69_reg_69;\n  wire [31:0] out_reg_6_reg_6;\n  wire [63:0] out_reg_70_reg_70;\n  wire [63:0] out_reg_71_reg_71;\n  wire [63:0] out_reg_72_reg_72;\n  wire [63:0] out_reg_73_reg_73;\n  wire [31:0] out_reg_74_reg_74;\n  wire [63:0] out_reg_75_reg_75;\n  wire [63:0] out_reg_76_reg_76;\n  wire out_reg_77_reg_77;\n  wire [63:0] out_reg_78_reg_78;\n  wire [31:0] out_reg_7_reg_7;\n  wire [31:0] out_reg_8_reg_8;\n  wire [31:0] out_reg_9_reg_9;\n  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i0_fu_keccak_423514_423824;\n  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i10_fu_keccak_423514_423853;\n  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i11_fu_keccak_423514_423856;\n  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i12_fu_keccak_423514_423859;\n  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i13_fu_keccak_423514_423862;\n  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i14_fu_keccak_423514_423865;\n  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i15_fu_keccak_423514_423868;\n  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i16_fu_keccak_423514_423871;\n  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i17_fu_keccak_423514_423874;\n  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i18_fu_keccak_423514_423877;\n  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i19_fu_keccak_423514_423880;\n  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i1_fu_keccak_423514_423826;\n  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i20_fu_keccak_423514_423883;\n  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i21_fu_keccak_423514_423886;\n  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i22_fu_keccak_423514_423889;\n  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i23_fu_keccak_423514_423892;\n  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i24_fu_keccak_423514_423895;\n  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i2_fu_keccak_423514_423829;\n  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i3_fu_keccak_423514_423832;\n  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i4_fu_keccak_423514_423835;\n  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i5_fu_keccak_423514_423838;\n  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i6_fu_keccak_423514_423841;\n  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i7_fu_keccak_423514_423844;\n  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i8_fu_keccak_423514_423847;\n  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i9_fu_keccak_423514_423850;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i0_fu_keccak_423514_423823;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i10_fu_keccak_423514_423852;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i11_fu_keccak_423514_423855;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i12_fu_keccak_423514_423858;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i13_fu_keccak_423514_423861;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i14_fu_keccak_423514_423864;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i15_fu_keccak_423514_423867;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i16_fu_keccak_423514_423870;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i17_fu_keccak_423514_423873;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i18_fu_keccak_423514_423876;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i19_fu_keccak_423514_423879;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i1_fu_keccak_423514_423825;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i20_fu_keccak_423514_423882;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i21_fu_keccak_423514_423885;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i22_fu_keccak_423514_423888;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i23_fu_keccak_423514_423891;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i24_fu_keccak_423514_423894;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i2_fu_keccak_423514_423828;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i3_fu_keccak_423514_423831;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i4_fu_keccak_423514_423834;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i5_fu_keccak_423514_423837;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i6_fu_keccak_423514_423840;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i7_fu_keccak_423514_423843;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i8_fu_keccak_423514_423846;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i9_fu_keccak_423514_423849;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i0_fu_keccak_423514_423744;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i10_fu_keccak_423514_423754;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i11_fu_keccak_423514_423755;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i12_fu_keccak_423514_423756;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i13_fu_keccak_423514_423757;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i14_fu_keccak_423514_423758;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i15_fu_keccak_423514_423759;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i16_fu_keccak_423514_423760;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i17_fu_keccak_423514_423761;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i18_fu_keccak_423514_423762;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i19_fu_keccak_423514_423763;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i1_fu_keccak_423514_423745;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i20_fu_keccak_423514_423765;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i21_fu_keccak_423514_423766;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i22_fu_keccak_423514_423767;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i23_fu_keccak_423514_423768;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i24_fu_keccak_423514_423769;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i25_fu_keccak_423514_423770;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i26_fu_keccak_423514_423772;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i27_fu_keccak_423514_423773;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i28_fu_keccak_423514_423774;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i29_fu_keccak_423514_423775;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i2_fu_keccak_423514_423746;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i30_fu_keccak_423514_423776;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i31_fu_keccak_423514_423777;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i32_fu_keccak_423514_423779;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i33_fu_keccak_423514_423780;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i34_fu_keccak_423514_423781;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i35_fu_keccak_423514_423782;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i36_fu_keccak_423514_423783;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i37_fu_keccak_423514_423784;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i38_fu_keccak_423514_423786;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i39_fu_keccak_423514_423787;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i3_fu_keccak_423514_423747;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i40_fu_keccak_423514_423788;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i41_fu_keccak_423514_423789;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i42_fu_keccak_423514_423790;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i43_fu_keccak_423514_423791;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i44_fu_keccak_423514_423793;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i45_fu_keccak_423514_423794;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i46_fu_keccak_423514_423795;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i47_fu_keccak_423514_423796;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i48_fu_keccak_423514_423797;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i49_fu_keccak_423514_423798;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i4_fu_keccak_423514_423748;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i50_fu_keccak_423514_423827;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i51_fu_keccak_423514_423830;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i52_fu_keccak_423514_423833;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i53_fu_keccak_423514_423836;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i54_fu_keccak_423514_423839;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i55_fu_keccak_423514_423842;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i56_fu_keccak_423514_423845;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i57_fu_keccak_423514_423848;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i58_fu_keccak_423514_423851;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i59_fu_keccak_423514_423854;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i5_fu_keccak_423514_423749;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i60_fu_keccak_423514_423857;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i61_fu_keccak_423514_423860;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i62_fu_keccak_423514_423863;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i63_fu_keccak_423514_423866;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i64_fu_keccak_423514_423869;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i65_fu_keccak_423514_423872;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i66_fu_keccak_423514_423875;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i67_fu_keccak_423514_423878;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i68_fu_keccak_423514_423881;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i69_fu_keccak_423514_423884;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i6_fu_keccak_423514_423750;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i70_fu_keccak_423514_423887;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i71_fu_keccak_423514_423890;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i72_fu_keccak_423514_423893;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i73_fu_keccak_423514_423896;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i74_fu_keccak_423514_423897;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i75_fu_keccak_423514_423898;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i7_fu_keccak_423514_423751;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i8_fu_keccak_423514_423752;\n  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i9_fu_keccak_423514_423753;\n  wire out_ui_eq_expr_FU_32_32_32_39_i0_fu_keccak_423514_424616;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_40_i0_fu_keccak_423514_423764;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_40_i1_fu_keccak_423514_423771;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_40_i2_fu_keccak_423514_423778;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_40_i3_fu_keccak_423514_423785;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_40_i4_fu_keccak_423514_423792;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_40_i5_fu_keccak_423514_423799;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_41_i0_fu_keccak_423514_423800;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_42_i0_fu_keccak_423514_423801;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_43_i0_fu_keccak_423514_423802;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_44_i0_fu_keccak_423514_423803;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_45_i0_fu_keccak_423514_423804;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_46_i0_fu_keccak_423514_423805;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_47_i0_fu_keccak_423514_423806;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_48_i0_fu_keccak_423514_423807;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_49_i0_fu_keccak_423514_423808;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_50_i0_fu_keccak_423514_423809;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_51_i0_fu_keccak_423514_423810;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_52_i0_fu_keccak_423514_423811;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_53_i0_fu_keccak_423514_423812;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_54_i0_fu_keccak_423514_423813;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_55_i0_fu_keccak_423514_423814;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_56_i0_fu_keccak_423514_423815;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_57_i0_fu_keccak_423514_423816;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_58_i0_fu_keccak_423514_423817;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_59_i0_fu_keccak_423514_423818;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_60_i0_fu_keccak_423514_423819;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_61_i0_fu_keccak_423514_423820;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_62_i0_fu_keccak_423514_423821;\n  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_63_i0_fu_keccak_423514_423822;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_64_i0_fu_keccak_423514_423531;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_65_i0_fu_keccak_423514_423532;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_66_i0_fu_keccak_423514_423533;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_67_i0_fu_keccak_423514_423534;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_68_i0_fu_keccak_423514_423535;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_68_i1_fu_keccak_423514_423743;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_69_i0_fu_keccak_423514_423536;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_70_i0_fu_keccak_423514_423537;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_71_i0_fu_keccak_423514_423538;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_72_i0_fu_keccak_423514_423539;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_73_i0_fu_keccak_423514_423540;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_74_i0_fu_keccak_423514_423541;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_75_i0_fu_keccak_423514_423542;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_76_i0_fu_keccak_423514_423543;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_77_i0_fu_keccak_423514_423544;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_78_i0_fu_keccak_423514_423545;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_79_i0_fu_keccak_423514_423546;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_80_i0_fu_keccak_423514_423547;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_81_i0_fu_keccak_423514_423548;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_82_i0_fu_keccak_423514_423549;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_83_i0_fu_keccak_423514_423550;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_84_i0_fu_keccak_423514_423551;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_85_i0_fu_keccak_423514_423552;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_86_i0_fu_keccak_423514_423553;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_87_i0_fu_keccak_423514_423554;\n  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_87_i1_fu_keccak_423514_424624;\n  wire [28:0] out_ui_rshift_expr_FU_32_0_32_88_i0_fu_keccak_423514_424631;\n  wire [28:0] out_ui_rshift_expr_FU_32_0_32_88_i1_fu_keccak_423514_424636;\n  wire [31:0] out_ui_view_convert_expr_FU_4_i0_fu_keccak_423514_424602;\n  wire [31:0] out_ui_view_convert_expr_FU_6_i0_fu_keccak_423514_424614;\n  wire [63:0] out_uu_conv_conn_obj_0_UUdata_converter_FU_uu_conv_0;\n  wire [63:0] out_uu_conv_conn_obj_10_UUdata_converter_FU_uu_conv_2;\n  wire [63:0] out_uu_conv_conn_obj_11_UUdata_converter_FU_uu_conv_3;\n  wire [63:0] out_uu_conv_conn_obj_12_UUdata_converter_FU_uu_conv_4;\n  wire [63:0] out_uu_conv_conn_obj_13_UUdata_converter_FU_uu_conv_5;\n  wire [63:0] out_uu_conv_conn_obj_14_UUdata_converter_FU_uu_conv_6;\n  wire [63:0] out_uu_conv_conn_obj_15_UUdata_converter_FU_uu_conv_7;\n  wire [63:0] out_uu_conv_conn_obj_16_UUdata_converter_FU_uu_conv_8;\n  wire [63:0] out_uu_conv_conn_obj_17_UUdata_converter_FU_uu_conv_9;\n  wire [63:0] out_uu_conv_conn_obj_18_UUdata_converter_FU_uu_conv_10;\n  wire [63:0] out_uu_conv_conn_obj_19_UUdata_converter_FU_uu_conv_11;\n  wire [63:0] out_uu_conv_conn_obj_1_UUdata_converter_FU_uu_conv_1;\n  wire [63:0] out_uu_conv_conn_obj_20_UUdata_converter_FU_uu_conv_13;\n  wire [63:0] out_uu_conv_conn_obj_21_UUdata_converter_FU_uu_conv_14;\n  wire [63:0] out_uu_conv_conn_obj_22_UUdata_converter_FU_uu_conv_15;\n  wire [63:0] out_uu_conv_conn_obj_23_UUdata_converter_FU_uu_conv_16;\n  wire [63:0] out_uu_conv_conn_obj_24_UUdata_converter_FU_uu_conv_17;\n  wire [63:0] out_uu_conv_conn_obj_2_UUdata_converter_FU_uu_conv_12;\n  wire [63:0] out_uu_conv_conn_obj_3_UUdata_converter_FU_uu_conv_18;\n  wire [63:0] out_uu_conv_conn_obj_4_UUdata_converter_FU_uu_conv_19;\n  wire [63:0] out_uu_conv_conn_obj_5_UUdata_converter_FU_uu_conv_20;\n  wire [63:0] out_uu_conv_conn_obj_6_UUdata_converter_FU_uu_conv_21;\n  wire [63:0] out_uu_conv_conn_obj_7_UUdata_converter_FU_uu_conv_22;\n  wire [63:0] out_uu_conv_conn_obj_8_UUdata_converter_FU_uu_conv_23;\n  wire [63:0] out_uu_conv_conn_obj_9_UUdata_converter_FU_uu_conv_24;\n  wire [63:0] sig_out_bus_mergerMout_Wdata_ram0_;\n  wire [31:0] sig_out_bus_mergerMout_addr_ram1_;\n  wire [6:0] sig_out_bus_mergerMout_data_ram_size2_;\n  wire sig_out_bus_mergerMout_oe_ram3_;\n  wire sig_out_bus_mergerMout_we_ram4_;\n  wire sig_out_bus_mergerSout_DataRdy5_;\n  wire [63:0] sig_out_bus_mergerSout_Rdata_ram6_;\n  \n  BMEMORY_CTRL #(.BITSIZE_in1(64),\n    .BITSIZE_in2(32),\n    .BITSIZE_in3(7),\n    .BITSIZE_out1(64),\n    .BITSIZE_Min_addr_ram(32),\n    .BITSIZE_Mout_addr_ram(32),\n    .BITSIZE_M_Rdata_ram(64),\n    .BITSIZE_Min_Wdata_ram(64),\n    .BITSIZE_Mout_Wdata_ram(64),\n    .BITSIZE_Min_data_ram_size(7),\n    .BITSIZE_Mout_data_ram_size(7)) BMEMORY_CTRL_35_i0 (.out1(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0),\n    .Mout_oe_ram(sig_out_bus_mergerMout_oe_ram3_),\n    .Mout_we_ram(sig_out_bus_mergerMout_we_ram4_),\n    .Mout_addr_ram(sig_out_bus_mergerMout_addr_ram1_),\n    .Mout_Wdata_ram(sig_out_bus_mergerMout_Wdata_ram0_),\n    .Mout_data_ram_size(sig_out_bus_mergerMout_data_ram_size2_),\n    .clock(clock),\n    .in1(out_MUX_0_BMEMORY_CTRL_35_i0_0_3_1),\n    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_3_1),\n    .in3(out_conv_out_const_0_8_7),\n    .in4(out_const_1),\n    .sel_LOAD(fuselector_BMEMORY_CTRL_35_i0_LOAD),\n    .sel_STORE(fuselector_BMEMORY_CTRL_35_i0_STORE),\n    .Min_oe_ram(Min_oe_ram),\n    .Min_we_ram(Min_we_ram),\n    .Min_addr_ram(Min_addr_ram),\n    .M_Rdata_ram(M_Rdata_ram),\n    .Min_Wdata_ram(Min_Wdata_ram),\n    .Min_data_ram_size(Min_data_ram_size),\n    .M_DataRdy(M_DataRdy));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_0 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_0),\n    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0),\n    .in1(out_uu_conv_conn_obj_0_UUdata_converter_FU_uu_conv_0),\n    .in2(out_uu_conv_conn_obj_1_UUdata_converter_FU_uu_conv_1));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_1 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_1),\n    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1),\n    .in1(out_uu_conv_conn_obj_10_UUdata_converter_FU_uu_conv_2),\n    .in2(out_uu_conv_conn_obj_11_UUdata_converter_FU_uu_conv_3));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_10 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_10),\n    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10),\n    .in1(out_uu_conv_conn_obj_5_UUdata_converter_FU_uu_conv_20),\n    .in2(out_uu_conv_conn_obj_6_UUdata_converter_FU_uu_conv_21));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_11 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_11),\n    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11),\n    .in1(out_uu_conv_conn_obj_7_UUdata_converter_FU_uu_conv_22),\n    .in2(out_uu_conv_conn_obj_8_UUdata_converter_FU_uu_conv_23));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_12 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_12),\n    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12),\n    .in1(out_uu_conv_conn_obj_9_UUdata_converter_FU_uu_conv_24),\n    .in2(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_0));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_2 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_2),\n    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2),\n    .in1(out_uu_conv_conn_obj_12_UUdata_converter_FU_uu_conv_4),\n    .in2(out_uu_conv_conn_obj_13_UUdata_converter_FU_uu_conv_5));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_3 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_3),\n    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3),\n    .in1(out_uu_conv_conn_obj_14_UUdata_converter_FU_uu_conv_6),\n    .in2(out_uu_conv_conn_obj_15_UUdata_converter_FU_uu_conv_7));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_4 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_4),\n    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4),\n    .in1(out_uu_conv_conn_obj_16_UUdata_converter_FU_uu_conv_8),\n    .in2(out_uu_conv_conn_obj_17_UUdata_converter_FU_uu_conv_9));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_5 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_5),\n    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5),\n    .in1(out_uu_conv_conn_obj_18_UUdata_converter_FU_uu_conv_10),\n    .in2(out_uu_conv_conn_obj_19_UUdata_converter_FU_uu_conv_11));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_6 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_6),\n    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6),\n    .in1(out_uu_conv_conn_obj_2_UUdata_converter_FU_uu_conv_12),\n    .in2(out_uu_conv_conn_obj_20_UUdata_converter_FU_uu_conv_13));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_7 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_7),\n    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7),\n    .in1(out_uu_conv_conn_obj_21_UUdata_converter_FU_uu_conv_14),\n    .in2(out_uu_conv_conn_obj_22_UUdata_converter_FU_uu_conv_15));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_8 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_8),\n    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8),\n    .in1(out_uu_conv_conn_obj_23_UUdata_converter_FU_uu_conv_16),\n    .in2(out_uu_conv_conn_obj_24_UUdata_converter_FU_uu_conv_17));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_9 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_9),\n    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9),\n    .in1(out_uu_conv_conn_obj_3_UUdata_converter_FU_uu_conv_18),\n    .in2(out_uu_conv_conn_obj_4_UUdata_converter_FU_uu_conv_19));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_1_0 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_1_0),\n    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0),\n    .in1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_1),\n    .in2(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_2));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_1_1 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_1_1),\n    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1),\n    .in1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_3),\n    .in2(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_4));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_1_2 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_1_2),\n    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2),\n    .in1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_5),\n    .in2(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_6));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_1_3 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_1_3),\n    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3),\n    .in1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_7),\n    .in2(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_8));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_1_4 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_1_4),\n    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4),\n    .in1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_9),\n    .in2(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_10));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_1_5 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_1_5),\n    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5),\n    .in1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_11),\n    .in2(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_12));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_2_0 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_2_0),\n    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0),\n    .in1(out_MUX_0_BMEMORY_CTRL_35_i0_0_1_0),\n    .in2(out_MUX_0_BMEMORY_CTRL_35_i0_0_1_1));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_2_1 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_2_1),\n    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1),\n    .in1(out_MUX_0_BMEMORY_CTRL_35_i0_0_1_2),\n    .in2(out_MUX_0_BMEMORY_CTRL_35_i0_0_1_3));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_2_2 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_2_2),\n    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2),\n    .in1(out_MUX_0_BMEMORY_CTRL_35_i0_0_1_4),\n    .in2(out_MUX_0_BMEMORY_CTRL_35_i0_0_1_5));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_3_0 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_3_0),\n    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0),\n    .in1(out_MUX_0_BMEMORY_CTRL_35_i0_0_2_0),\n    .in2(out_MUX_0_BMEMORY_CTRL_35_i0_0_2_1));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_3_1 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_3_1),\n    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1),\n    .in1(out_MUX_0_BMEMORY_CTRL_35_i0_0_2_2),\n    .in2(out_MUX_0_BMEMORY_CTRL_35_i0_0_3_0));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_0 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_0),\n    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0),\n    .in1(out_reg_9_reg_9),\n    .in2(out_reg_8_reg_8));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_1 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_1),\n    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1),\n    .in1(out_reg_7_reg_7),\n    .in2(out_reg_6_reg_6));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_10 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_10),\n    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10),\n    .in1(out_reg_12_reg_12),\n    .in2(out_reg_11_reg_11));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_11 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_11),\n    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11),\n    .in1(out_reg_10_reg_10),\n    .in2(out_reg_1_reg_1));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_12 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_12),\n    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12),\n    .in1(out_reg_0_reg_0),\n    .in2(in_port_Pd226));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_2 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_2),\n    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2),\n    .in1(out_reg_5_reg_5),\n    .in2(out_reg_4_reg_4));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_3 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_3),\n    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3),\n    .in1(out_reg_3_reg_3),\n    .in2(out_reg_24_reg_24));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_4 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_4),\n    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4),\n    .in1(out_reg_23_reg_23),\n    .in2(out_reg_22_reg_22));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_5 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_5),\n    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5),\n    .in1(out_reg_21_reg_21),\n    .in2(out_reg_20_reg_20));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_6 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_6),\n    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6),\n    .in1(out_reg_2_reg_2),\n    .in2(out_reg_19_reg_19));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_7 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_7),\n    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7),\n    .in1(out_reg_18_reg_18),\n    .in2(out_reg_17_reg_17));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_8 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_8),\n    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8),\n    .in1(out_reg_16_reg_16),\n    .in2(out_reg_15_reg_15));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_9 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_9),\n    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9),\n    .in1(out_reg_14_reg_14),\n    .in2(out_reg_13_reg_13));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_1_0 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_0),\n    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0),\n    .in1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_0),\n    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_1));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_1_1 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_1),\n    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1),\n    .in1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_2),\n    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_3));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_1_2 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_2),\n    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2),\n    .in1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_4),\n    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_5));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_1_3 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_3),\n    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3),\n    .in1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_6),\n    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_7));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_1_4 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_4),\n    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4),\n    .in1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_8),\n    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_9));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_1_5 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_5),\n    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5),\n    .in1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_10),\n    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_11));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_1_6 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_6),\n    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6),\n    .in1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_12),\n    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_0));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_2_0 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_2_0),\n    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0),\n    .in1(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_1),\n    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_2));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_2_1 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_2_1),\n    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1),\n    .in1(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_3),\n    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_4));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_2_2 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_2_2),\n    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2),\n    .in1(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_5),\n    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_6));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_3_0 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_3_0),\n    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0),\n    .in1(out_MUX_1_BMEMORY_CTRL_35_i0_1_2_0),\n    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_2_1));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_3_1 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_3_1),\n    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1),\n    .in1(out_MUX_1_BMEMORY_CTRL_35_i0_1_2_2),\n    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_3_0));\n  MUX_GATE #(.BITSIZE_in1(32),\n    .BITSIZE_in2(32),\n    .BITSIZE_out1(32)) MUX_25_reg_24_0_0_0 (.out1(out_MUX_25_reg_24_0_0_0),\n    .sel(selector_MUX_25_reg_24_0_0_0),\n    .in1(out_reg_74_reg_74),\n    .in2(out_ui_view_convert_expr_FU_4_i0_fu_keccak_423514_424602));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_27_reg_26_0_0_0 (.out1(out_MUX_27_reg_26_0_0_0),\n    .sel(selector_MUX_27_reg_26_0_0_0),\n    .in1(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i75_fu_keccak_423514_423898));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_28_reg_27_0_0_0 (.out1(out_MUX_28_reg_27_0_0_0),\n    .sel(selector_MUX_28_reg_27_0_0_0),\n    .in1(out_reg_73_reg_73),\n    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_29_reg_28_0_0_0 (.out1(out_MUX_29_reg_28_0_0_0),\n    .sel(selector_MUX_29_reg_28_0_0_0),\n    .in1(out_reg_72_reg_72),\n    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_30_reg_29_0_0_0 (.out1(out_MUX_30_reg_29_0_0_0),\n    .sel(selector_MUX_30_reg_29_0_0_0),\n    .in1(out_reg_71_reg_71),\n    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_32_reg_30_0_0_0 (.out1(out_MUX_32_reg_30_0_0_0),\n    .sel(selector_MUX_32_reg_30_0_0_0),\n    .in1(out_reg_70_reg_70),\n    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_33_reg_31_0_0_0 (.out1(out_MUX_33_reg_31_0_0_0),\n    .sel(selector_MUX_33_reg_31_0_0_0),\n    .in1(out_reg_69_reg_69),\n    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_34_reg_32_0_0_0 (.out1(out_MUX_34_reg_32_0_0_0),\n    .sel(selector_MUX_34_reg_32_0_0_0),\n    .in1(out_reg_68_reg_68),\n    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_35_reg_33_0_0_0 (.out1(out_MUX_35_reg_33_0_0_0),\n    .sel(selector_MUX_35_reg_33_0_0_0),\n    .in1(out_reg_67_reg_67),\n    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_36_reg_34_0_0_0 (.out1(out_MUX_36_reg_34_0_0_0),\n    .sel(selector_MUX_36_reg_34_0_0_0),\n    .in1(out_reg_66_reg_66),\n    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_37_reg_35_0_0_0 (.out1(out_MUX_37_reg_35_0_0_0),\n    .sel(selector_MUX_37_reg_35_0_0_0),\n    .in1(out_reg_65_reg_65),\n    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_38_reg_36_0_0_0 (.out1(out_MUX_38_reg_36_0_0_0),\n    .sel(selector_MUX_38_reg_36_0_0_0),\n    .in1(out_reg_64_reg_64),\n    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_39_reg_37_0_0_0 (.out1(out_MUX_39_reg_37_0_0_0),\n    .sel(selector_MUX_39_reg_37_0_0_0),\n    .in1(out_reg_63_reg_63),\n    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_40_reg_38_0_0_0 (.out1(out_MUX_40_reg_38_0_0_0),\n    .sel(selector_MUX_40_reg_38_0_0_0),\n    .in1(out_reg_62_reg_62),\n    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_41_reg_39_0_0_0 (.out1(out_MUX_41_reg_39_0_0_0),\n    .sel(selector_MUX_41_reg_39_0_0_0),\n    .in1(out_reg_61_reg_61),\n    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_43_reg_40_0_0_0 (.out1(out_MUX_43_reg_40_0_0_0),\n    .sel(selector_MUX_43_reg_40_0_0_0),\n    .in1(out_reg_60_reg_60),\n    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_44_reg_41_0_0_0 (.out1(out_MUX_44_reg_41_0_0_0),\n    .sel(selector_MUX_44_reg_41_0_0_0),\n    .in1(out_reg_59_reg_59),\n    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_45_reg_42_0_0_0 (.out1(out_MUX_45_reg_42_0_0_0),\n    .sel(selector_MUX_45_reg_42_0_0_0),\n    .in1(out_reg_58_reg_58),\n    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_46_reg_43_0_0_0 (.out1(out_MUX_46_reg_43_0_0_0),\n    .sel(selector_MUX_46_reg_43_0_0_0),\n    .in1(out_reg_57_reg_57),\n    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_47_reg_44_0_0_0 (.out1(out_MUX_47_reg_44_0_0_0),\n    .sel(selector_MUX_47_reg_44_0_0_0),\n    .in1(out_reg_56_reg_56),\n    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_48_reg_45_0_0_0 (.out1(out_MUX_48_reg_45_0_0_0),\n    .sel(selector_MUX_48_reg_45_0_0_0),\n    .in1(out_reg_55_reg_55),\n    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_49_reg_46_0_0_0 (.out1(out_MUX_49_reg_46_0_0_0),\n    .sel(selector_MUX_49_reg_46_0_0_0),\n    .in1(out_reg_54_reg_54),\n    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_50_reg_47_0_0_0 (.out1(out_MUX_50_reg_47_0_0_0),\n    .sel(selector_MUX_50_reg_47_0_0_0),\n    .in1(out_reg_53_reg_53),\n    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_51_reg_48_0_0_0 (.out1(out_MUX_51_reg_48_0_0_0),\n    .sel(selector_MUX_51_reg_48_0_0_0),\n    .in1(out_reg_52_reg_52),\n    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_52_reg_49_0_0_0 (.out1(out_MUX_52_reg_49_0_0_0),\n    .sel(selector_MUX_52_reg_49_0_0_0),\n    .in1(out_reg_51_reg_51),\n    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));\n  MUX_GATE #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) MUX_54_reg_50_0_0_0 (.out1(out_MUX_54_reg_50_0_0_0),\n    .sel(selector_MUX_54_reg_50_0_0_0),\n    .in1(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i73_fu_keccak_423514_423896));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_0 (.out1(out_uu_conv_conn_obj_0_UUdata_converter_FU_uu_conv_0),\n    .in1(out_reg_78_reg_78));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_1 (.out1(out_uu_conv_conn_obj_1_UUdata_converter_FU_uu_conv_1),\n    .in1(out_reg_73_reg_73));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_10 (.out1(out_uu_conv_conn_obj_18_UUdata_converter_FU_uu_conv_10),\n    .in1(out_reg_56_reg_56));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_11 (.out1(out_uu_conv_conn_obj_19_UUdata_converter_FU_uu_conv_11),\n    .in1(out_reg_55_reg_55));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_12 (.out1(out_uu_conv_conn_obj_2_UUdata_converter_FU_uu_conv_12),\n    .in1(out_reg_72_reg_72));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_13 (.out1(out_uu_conv_conn_obj_20_UUdata_converter_FU_uu_conv_13),\n    .in1(out_reg_54_reg_54));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_14 (.out1(out_uu_conv_conn_obj_21_UUdata_converter_FU_uu_conv_14),\n    .in1(out_reg_53_reg_53));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_15 (.out1(out_uu_conv_conn_obj_22_UUdata_converter_FU_uu_conv_15),\n    .in1(out_reg_52_reg_52));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_16 (.out1(out_uu_conv_conn_obj_23_UUdata_converter_FU_uu_conv_16),\n    .in1(out_reg_51_reg_51));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_17 (.out1(out_uu_conv_conn_obj_24_UUdata_converter_FU_uu_conv_17),\n    .in1(out_reg_50_reg_50));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_18 (.out1(out_uu_conv_conn_obj_3_UUdata_converter_FU_uu_conv_18),\n    .in1(out_reg_71_reg_71));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_19 (.out1(out_uu_conv_conn_obj_4_UUdata_converter_FU_uu_conv_19),\n    .in1(out_reg_70_reg_70));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_2 (.out1(out_uu_conv_conn_obj_10_UUdata_converter_FU_uu_conv_2),\n    .in1(out_reg_64_reg_64));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_20 (.out1(out_uu_conv_conn_obj_5_UUdata_converter_FU_uu_conv_20),\n    .in1(out_reg_69_reg_69));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_21 (.out1(out_uu_conv_conn_obj_6_UUdata_converter_FU_uu_conv_21),\n    .in1(out_reg_68_reg_68));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_22 (.out1(out_uu_conv_conn_obj_7_UUdata_converter_FU_uu_conv_22),\n    .in1(out_reg_67_reg_67));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_23 (.out1(out_uu_conv_conn_obj_8_UUdata_converter_FU_uu_conv_23),\n    .in1(out_reg_66_reg_66));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_24 (.out1(out_uu_conv_conn_obj_9_UUdata_converter_FU_uu_conv_24),\n    .in1(out_reg_65_reg_65));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_3 (.out1(out_uu_conv_conn_obj_11_UUdata_converter_FU_uu_conv_3),\n    .in1(out_reg_63_reg_63));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_4 (.out1(out_uu_conv_conn_obj_12_UUdata_converter_FU_uu_conv_4),\n    .in1(out_reg_62_reg_62));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_5 (.out1(out_uu_conv_conn_obj_13_UUdata_converter_FU_uu_conv_5),\n    .in1(out_reg_61_reg_61));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_6 (.out1(out_uu_conv_conn_obj_14_UUdata_converter_FU_uu_conv_6),\n    .in1(out_reg_60_reg_60));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_7 (.out1(out_uu_conv_conn_obj_15_UUdata_converter_FU_uu_conv_7),\n    .in1(out_reg_59_reg_59));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_8 (.out1(out_uu_conv_conn_obj_16_UUdata_converter_FU_uu_conv_8),\n    .in1(out_reg_58_reg_58));\n  UUdata_converter_FU #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_9 (.out1(out_uu_conv_conn_obj_17_UUdata_converter_FU_uu_conv_9),\n    .in1(out_reg_57_reg_57));\n  ARRAY_1D_STD_BRAM #(.BITSIZE_in1(8),\n    .BITSIZE_in2(32),\n    .BITSIZE_in3(7),\n    .BITSIZE_out1(8),\n    .BITSIZE_S_addr_ram(32),\n    .BITSIZE_S_Wdata_ram(64),\n    .BITSIZE_Sin_Rdata_ram(64),\n    .BITSIZE_Sout_Rdata_ram(64),\n    .BITSIZE_S_data_ram_size(7),\n    .MEMORY_INIT_file(\"/home/lennart/.cache/rust-hls/a0f02b6d218bcf7a60d0b2b295928582-h0CFkeWMHp/array_ref_423955.mem\"),\n    .n_elements(192),\n    .data_size(8),\n    .address_space_begin(MEM_var_423955_423514),\n    .address_space_rangesize(1024),\n    .BUS_PIPELINED(1),\n    .BRAM_BITSIZE(64),\n    .PRIVATE_MEMORY(0),\n    .USE_SPARSE_MEMORY(1),\n    .BITSIZE_proxy_in1(64),\n    .BITSIZE_proxy_in2(32),\n    .BITSIZE_proxy_in3(7),\n    .BITSIZE_proxy_out1(64)) array_423955_0 (.Sout_Rdata_ram(sig_out_bus_mergerSout_Rdata_ram6_),\n    .Sout_DataRdy(sig_out_bus_mergerSout_DataRdy5_),\n    .clock(clock),\n    .reset(reset),\n    .in1(8'b00000000),\n    .in2(32'b00000000000000000000000000000000),\n    .in3(7'b0000000),\n    .in4(1'b0),\n    .sel_LOAD(1'b0),\n    .sel_STORE(1'b0),\n    .S_oe_ram(S_oe_ram),\n    .S_we_ram(S_we_ram),\n    .S_addr_ram(S_addr_ram),\n    .S_Wdata_ram(S_Wdata_ram),\n    .Sin_Rdata_ram(Sin_Rdata_ram),\n    .S_data_ram_size(S_data_ram_size),\n    .Sin_DataRdy(Sin_DataRdy),\n    .proxy_in1(64'b0000000000000000000000000000000000000000000000000000000000000000),\n    .proxy_in2(32'b00000000000000000000000000000000),\n    .proxy_in3(7'b0000000),\n    .proxy_sel_LOAD(1'b0),\n    .proxy_sel_STORE(1'b0));\n  constant_value #(.BITSIZE_out1(8),\n    .value(8'b01000000)) const_0 (.out1(out_const_0));\n  constant_value #(.BITSIZE_out1(1),\n    .value(1'b1)) const_1 (.out1(out_const_1));\n  constant_value #(.BITSIZE_out1(6),\n    .value(6'b100100)) const_10 (.out1(out_const_10));\n  constant_value #(.BITSIZE_out1(7),\n    .value(7'b1001000)) const_11 (.out1(out_const_11));\n  constant_value #(.BITSIZE_out1(8),\n    .value(8'b10010000)) const_12 (.out1(out_const_12));\n  constant_value #(.BITSIZE_out1(8),\n    .value(8'b10011000)) const_13 (.out1(out_const_13));\n  constant_value #(.BITSIZE_out1(6),\n    .value(6'b100111)) const_14 (.out1(out_const_14));\n  constant_value #(.BITSIZE_out1(4),\n    .value(4'b1010)) const_15 (.out1(out_const_15));\n  constant_value #(.BITSIZE_out1(5),\n    .value(5'b10100)) const_16 (.out1(out_const_16));\n  constant_value #(.BITSIZE_out1(6),\n    .value(6'b101000)) const_17 (.out1(out_const_17));\n  constant_value #(.BITSIZE_out1(7),\n    .value(7'b1010000)) const_18 (.out1(out_const_18));\n  constant_value #(.BITSIZE_out1(8),\n    .value(8'b10100000)) const_19 (.out1(out_const_19));\n  constant_value #(.BITSIZE_out1(2),\n    .value(2'b10)) const_2 (.out1(out_const_2));\n  constant_value #(.BITSIZE_out1(6),\n    .value(6'b101001)) const_20 (.out1(out_const_20));\n  constant_value #(.BITSIZE_out1(5),\n    .value(5'b10101)) const_21 (.out1(out_const_21));\n  constant_value #(.BITSIZE_out1(8),\n    .value(8'b10101000)) const_22 (.out1(out_const_22));\n  constant_value #(.BITSIZE_out1(6),\n    .value(6'b101011)) const_23 (.out1(out_const_23));\n  constant_value #(.BITSIZE_out1(6),\n    .value(6'b101100)) const_24 (.out1(out_const_24));\n  constant_value #(.BITSIZE_out1(7),\n    .value(7'b1011000)) const_25 (.out1(out_const_25));\n  constant_value #(.BITSIZE_out1(8),\n    .value(8'b10110000)) const_26 (.out1(out_const_26));\n  constant_value #(.BITSIZE_out1(6),\n    .value(6'b101101)) const_27 (.out1(out_const_27));\n  constant_value #(.BITSIZE_out1(8),\n    .value(8'b10111000)) const_28 (.out1(out_const_28));\n  constant_value #(.BITSIZE_out1(32),\n    .value(MEM_var_423955_423514)) const_29 (.out1(out_const_29));\n  constant_value #(.BITSIZE_out1(4),\n    .value(4'b1000)) const_3 (.out1(out_const_3));\n  constant_value #(.BITSIZE_out1(2),\n    .value(2'b11)) const_30 (.out1(out_const_30));\n  constant_value #(.BITSIZE_out1(3),\n    .value(3'b110)) const_31 (.out1(out_const_31));\n  constant_value #(.BITSIZE_out1(5),\n    .value(5'b11000)) const_32 (.out1(out_const_32));\n  constant_value #(.BITSIZE_out1(6),\n    .value(6'b110000)) const_33 (.out1(out_const_33));\n  constant_value #(.BITSIZE_out1(7),\n    .value(7'b1100000)) const_34 (.out1(out_const_34));\n  constant_value #(.BITSIZE_out1(8),\n    .value(8'b11000000)) const_35 (.out1(out_const_35));\n  constant_value #(.BITSIZE_out1(5),\n    .value(5'b11001)) const_36 (.out1(out_const_36));\n  constant_value #(.BITSIZE_out1(7),\n    .value(7'b1101000)) const_37 (.out1(out_const_37));\n  constant_value #(.BITSIZE_out1(5),\n    .value(5'b11011)) const_38 (.out1(out_const_38));\n  constant_value #(.BITSIZE_out1(6),\n    .value(6'b110111)) const_39 (.out1(out_const_39));\n  constant_value #(.BITSIZE_out1(5),\n    .value(5'b10000)) const_4 (.out1(out_const_4));\n  constant_value #(.BITSIZE_out1(4),\n    .value(4'b1110)) const_40 (.out1(out_const_40));\n  constant_value #(.BITSIZE_out1(5),\n    .value(5'b11100)) const_41 (.out1(out_const_41));\n  constant_value #(.BITSIZE_out1(6),\n    .value(6'b111000)) const_42 (.out1(out_const_42));\n  constant_value #(.BITSIZE_out1(7),\n    .value(7'b1110000)) const_43 (.out1(out_const_43));\n  constant_value #(.BITSIZE_out1(4),\n    .value(4'b1111)) const_44 (.out1(out_const_44));\n  constant_value #(.BITSIZE_out1(7),\n    .value(7'b1111000)) const_45 (.out1(out_const_45));\n  constant_value #(.BITSIZE_out1(6),\n    .value(6'b111101)) const_46 (.out1(out_const_46));\n  constant_value #(.BITSIZE_out1(6),\n    .value(6'b111110)) const_47 (.out1(out_const_47));\n  constant_value #(.BITSIZE_out1(64),\n    .value(64'b1111111111111111111111111111111111111111111111111111111111111111)) const_48 (.out1(out_const_48));\n  constant_value #(.BITSIZE_out1(6),\n    .value(6'b100000)) const_5 (.out1(out_const_5));\n  constant_value #(.BITSIZE_out1(7),\n    .value(7'b1000000)) const_6 (.out1(out_const_6));\n  constant_value #(.BITSIZE_out1(8),\n    .value(8'b10000000)) const_7 (.out1(out_const_7));\n  constant_value #(.BITSIZE_out1(8),\n    .value(8'b10001000)) const_8 (.out1(out_const_8));\n  constant_value #(.BITSIZE_out1(5),\n    .value(5'b10010)) const_9 (.out1(out_const_9));\n  UUdata_converter_FU #(.BITSIZE_in1(8),\n    .BITSIZE_out1(7)) conv_out_const_0_8_7 (.out1(out_conv_out_const_0_8_7),\n    .in1(out_const_0));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(6),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_423531 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_64_i0_fu_keccak_423514_423531),\n    .in1(in_port_Pd226),\n    .in2(out_const_17));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(7),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_423532 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_65_i0_fu_keccak_423514_423532),\n    .in1(in_port_Pd226),\n    .in2(out_const_18));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(7),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_423533 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_66_i0_fu_keccak_423514_423533),\n    .in1(in_port_Pd226),\n    .in2(out_const_45));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(8),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_423534 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_67_i0_fu_keccak_423514_423534),\n    .in1(in_port_Pd226),\n    .in2(out_const_19));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(4),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_423535 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_68_i0_fu_keccak_423514_423535),\n    .in1(in_port_Pd226),\n    .in2(out_const_3));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(6),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_423536 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_69_i0_fu_keccak_423514_423536),\n    .in1(in_port_Pd226),\n    .in2(out_const_33));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(7),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_423537 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_70_i0_fu_keccak_423514_423537),\n    .in1(in_port_Pd226),\n    .in2(out_const_25));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(8),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_423538 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_71_i0_fu_keccak_423514_423538),\n    .in1(in_port_Pd226),\n    .in2(out_const_7));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(8),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_423539 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_72_i0_fu_keccak_423514_423539),\n    .in1(in_port_Pd226),\n    .in2(out_const_22));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(5),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_423540 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_73_i0_fu_keccak_423514_423540),\n    .in1(in_port_Pd226),\n    .in2(out_const_4));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(6),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_423541 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_74_i0_fu_keccak_423514_423541),\n    .in1(in_port_Pd226),\n    .in2(out_const_42));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(7),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_423542 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_75_i0_fu_keccak_423514_423542),\n    .in1(in_port_Pd226),\n    .in2(out_const_34));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(8),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_423543 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_76_i0_fu_keccak_423514_423543),\n    .in1(in_port_Pd226),\n    .in2(out_const_8));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(8),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_423544 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_77_i0_fu_keccak_423514_423544),\n    .in1(in_port_Pd226),\n    .in2(out_const_26));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(5),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_423545 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_78_i0_fu_keccak_423514_423545),\n    .in1(in_port_Pd226),\n    .in2(out_const_32));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(7),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_423546 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_79_i0_fu_keccak_423514_423546),\n    .in1(in_port_Pd226),\n    .in2(out_const_6));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(7),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_423547 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_80_i0_fu_keccak_423514_423547),\n    .in1(in_port_Pd226),\n    .in2(out_const_37));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(8),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_423548 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_81_i0_fu_keccak_423514_423548),\n    .in1(in_port_Pd226),\n    .in2(out_const_12));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(8),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_423549 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_82_i0_fu_keccak_423514_423549),\n    .in1(in_port_Pd226),\n    .in2(out_const_28));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(6),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_423550 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_83_i0_fu_keccak_423514_423550),\n    .in1(in_port_Pd226),\n    .in2(out_const_5));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(7),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_423551 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_84_i0_fu_keccak_423514_423551),\n    .in1(in_port_Pd226),\n    .in2(out_const_11));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(7),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_423552 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_85_i0_fu_keccak_423514_423552),\n    .in1(in_port_Pd226),\n    .in2(out_const_43));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(8),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_423553 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_86_i0_fu_keccak_423514_423553),\n    .in1(in_port_Pd226),\n    .in2(out_const_13));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(8),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_423554 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_87_i0_fu_keccak_423514_423554),\n    .in1(in_port_Pd226),\n    .in2(out_const_35));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(4),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_423743 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_68_i1_fu_keccak_423514_423743),\n    .in1(out_reg_24_reg_24),\n    .in2(out_const_3));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423744 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i0_fu_keccak_423514_423744),\n    .in1(out_reg_29_reg_29),\n    .in2(out_reg_30_reg_30));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423745 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i1_fu_keccak_423514_423745),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i0_fu_keccak_423514_423744),\n    .in2(out_reg_28_reg_28));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423746 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i2_fu_keccak_423514_423746),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i1_fu_keccak_423514_423745),\n    .in2(out_reg_27_reg_27));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423747 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i3_fu_keccak_423514_423747),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i2_fu_keccak_423514_423746),\n    .in2(out_reg_26_reg_26));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423748 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i4_fu_keccak_423514_423748),\n    .in1(out_reg_34_reg_34),\n    .in2(out_reg_35_reg_35));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423749 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i5_fu_keccak_423514_423749),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i4_fu_keccak_423514_423748),\n    .in2(out_reg_33_reg_33));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423750 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i6_fu_keccak_423514_423750),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i5_fu_keccak_423514_423749),\n    .in2(out_reg_32_reg_32));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423751 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i7_fu_keccak_423514_423751),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i6_fu_keccak_423514_423750),\n    .in2(out_reg_31_reg_31));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423752 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i8_fu_keccak_423514_423752),\n    .in1(out_reg_39_reg_39),\n    .in2(out_reg_40_reg_40));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423753 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i9_fu_keccak_423514_423753),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i8_fu_keccak_423514_423752),\n    .in2(out_reg_38_reg_38));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423754 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i10_fu_keccak_423514_423754),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i9_fu_keccak_423514_423753),\n    .in2(out_reg_37_reg_37));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423755 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i11_fu_keccak_423514_423755),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i10_fu_keccak_423514_423754),\n    .in2(out_reg_36_reg_36));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423756 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i12_fu_keccak_423514_423756),\n    .in1(out_reg_44_reg_44),\n    .in2(out_reg_45_reg_45));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423757 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i13_fu_keccak_423514_423757),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i12_fu_keccak_423514_423756),\n    .in2(out_reg_43_reg_43));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423758 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i14_fu_keccak_423514_423758),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i13_fu_keccak_423514_423757),\n    .in2(out_reg_42_reg_42));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423759 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i15_fu_keccak_423514_423759),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i14_fu_keccak_423514_423758),\n    .in2(out_reg_41_reg_41));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423760 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i16_fu_keccak_423514_423760),\n    .in1(out_reg_49_reg_49),\n    .in2(out_reg_50_reg_50));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423761 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i17_fu_keccak_423514_423761),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i16_fu_keccak_423514_423760),\n    .in2(out_reg_48_reg_48));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423762 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i18_fu_keccak_423514_423762),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i17_fu_keccak_423514_423761),\n    .in2(out_reg_47_reg_47));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423763 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i19_fu_keccak_423514_423763),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i18_fu_keccak_423514_423762),\n    .in2(out_reg_46_reg_46));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(1),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423764 (.out1(out_ui_fshl_expr_FU_64_64_0_64_40_i0_fu_keccak_423514_423764),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i7_fu_keccak_423514_423751),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i7_fu_keccak_423514_423751),\n    .in3(out_const_1));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423765 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i20_fu_keccak_423514_423765),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_40_i0_fu_keccak_423514_423764),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i19_fu_keccak_423514_423763));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423766 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i21_fu_keccak_423514_423766),\n    .in1(out_reg_26_reg_26),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i20_fu_keccak_423514_423765));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423767 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i22_fu_keccak_423514_423767),\n    .in1(out_reg_27_reg_27),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i20_fu_keccak_423514_423765));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423768 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i23_fu_keccak_423514_423768),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i20_fu_keccak_423514_423765),\n    .in2(out_reg_28_reg_28));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423769 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i24_fu_keccak_423514_423769),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i20_fu_keccak_423514_423765),\n    .in2(out_reg_29_reg_29));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423770 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i25_fu_keccak_423514_423770),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i20_fu_keccak_423514_423765),\n    .in2(out_reg_30_reg_30));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(1),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423771 (.out1(out_ui_fshl_expr_FU_64_64_0_64_40_i1_fu_keccak_423514_423771),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i11_fu_keccak_423514_423755),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i11_fu_keccak_423514_423755),\n    .in3(out_const_1));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423772 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i26_fu_keccak_423514_423772),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i3_fu_keccak_423514_423747),\n    .in2(out_ui_fshl_expr_FU_64_64_0_64_40_i1_fu_keccak_423514_423771));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423773 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i27_fu_keccak_423514_423773),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i26_fu_keccak_423514_423772),\n    .in2(out_reg_31_reg_31));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423774 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i28_fu_keccak_423514_423774),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i26_fu_keccak_423514_423772),\n    .in2(out_reg_32_reg_32));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423775 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i29_fu_keccak_423514_423775),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i26_fu_keccak_423514_423772),\n    .in2(out_reg_33_reg_33));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423776 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i30_fu_keccak_423514_423776),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i26_fu_keccak_423514_423772),\n    .in2(out_reg_34_reg_34));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423777 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i31_fu_keccak_423514_423777),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i26_fu_keccak_423514_423772),\n    .in2(out_reg_35_reg_35));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(1),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423778 (.out1(out_ui_fshl_expr_FU_64_64_0_64_40_i2_fu_keccak_423514_423778),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i15_fu_keccak_423514_423759),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i15_fu_keccak_423514_423759),\n    .in3(out_const_1));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423779 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i32_fu_keccak_423514_423779),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i7_fu_keccak_423514_423751),\n    .in2(out_ui_fshl_expr_FU_64_64_0_64_40_i2_fu_keccak_423514_423778));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423780 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i33_fu_keccak_423514_423780),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i32_fu_keccak_423514_423779),\n    .in2(out_reg_36_reg_36));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423781 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i34_fu_keccak_423514_423781),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i32_fu_keccak_423514_423779),\n    .in2(out_reg_37_reg_37));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423782 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i35_fu_keccak_423514_423782),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i32_fu_keccak_423514_423779),\n    .in2(out_reg_38_reg_38));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423783 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i36_fu_keccak_423514_423783),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i32_fu_keccak_423514_423779),\n    .in2(out_reg_39_reg_39));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423784 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i37_fu_keccak_423514_423784),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i32_fu_keccak_423514_423779),\n    .in2(out_reg_40_reg_40));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(1),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423785 (.out1(out_ui_fshl_expr_FU_64_64_0_64_40_i3_fu_keccak_423514_423785),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i19_fu_keccak_423514_423763),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i19_fu_keccak_423514_423763),\n    .in3(out_const_1));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423786 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i38_fu_keccak_423514_423786),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i11_fu_keccak_423514_423755),\n    .in2(out_ui_fshl_expr_FU_64_64_0_64_40_i3_fu_keccak_423514_423785));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423787 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i39_fu_keccak_423514_423787),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i38_fu_keccak_423514_423786),\n    .in2(out_reg_41_reg_41));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423788 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i40_fu_keccak_423514_423788),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i38_fu_keccak_423514_423786),\n    .in2(out_reg_42_reg_42));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423789 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i41_fu_keccak_423514_423789),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i38_fu_keccak_423514_423786),\n    .in2(out_reg_43_reg_43));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423790 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i42_fu_keccak_423514_423790),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i38_fu_keccak_423514_423786),\n    .in2(out_reg_44_reg_44));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423791 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i43_fu_keccak_423514_423791),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i38_fu_keccak_423514_423786),\n    .in2(out_reg_45_reg_45));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(1),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423792 (.out1(out_ui_fshl_expr_FU_64_64_0_64_40_i4_fu_keccak_423514_423792),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i3_fu_keccak_423514_423747),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i3_fu_keccak_423514_423747),\n    .in3(out_const_1));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423793 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i44_fu_keccak_423514_423793),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_40_i4_fu_keccak_423514_423792),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i15_fu_keccak_423514_423759));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423794 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i45_fu_keccak_423514_423794),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i44_fu_keccak_423514_423793),\n    .in2(out_reg_46_reg_46));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423795 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i46_fu_keccak_423514_423795),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i44_fu_keccak_423514_423793),\n    .in2(out_reg_47_reg_47));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423796 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i47_fu_keccak_423514_423796),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i44_fu_keccak_423514_423793),\n    .in2(out_reg_48_reg_48));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423797 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i48_fu_keccak_423514_423797),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i44_fu_keccak_423514_423793),\n    .in2(out_reg_49_reg_49));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423798 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i49_fu_keccak_423514_423798),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i44_fu_keccak_423514_423793),\n    .in2(out_reg_50_reg_50));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(1),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423799 (.out1(out_ui_fshl_expr_FU_64_64_0_64_40_i5_fu_keccak_423514_423799),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i27_fu_keccak_423514_423773),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i27_fu_keccak_423514_423773),\n    .in3(out_const_1));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(2),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423800 (.out1(out_ui_fshl_expr_FU_64_64_0_64_41_i0_fu_keccak_423514_423800),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i23_fu_keccak_423514_423768),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i23_fu_keccak_423514_423768),\n    .in3(out_const_30));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(3),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423801 (.out1(out_ui_fshl_expr_FU_64_64_0_64_42_i0_fu_keccak_423514_423801),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i34_fu_keccak_423514_423781),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i34_fu_keccak_423514_423781),\n    .in3(out_const_31));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(4),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423802 (.out1(out_ui_fshl_expr_FU_64_64_0_64_43_i0_fu_keccak_423514_423802),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i29_fu_keccak_423514_423775),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i29_fu_keccak_423514_423775),\n    .in3(out_const_15));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(4),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423803 (.out1(out_ui_fshl_expr_FU_64_64_0_64_44_i0_fu_keccak_423514_423803),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i36_fu_keccak_423514_423783),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i36_fu_keccak_423514_423783),\n    .in3(out_const_44));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(5),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423804 (.out1(out_ui_fshl_expr_FU_64_64_0_64_45_i0_fu_keccak_423514_423804),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i42_fu_keccak_423514_423790),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i42_fu_keccak_423514_423790),\n    .in3(out_const_21));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(5),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423805 (.out1(out_ui_fshl_expr_FU_64_64_0_64_46_i0_fu_keccak_423514_423805),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i39_fu_keccak_423514_423787),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i39_fu_keccak_423514_423787),\n    .in3(out_const_41));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(6),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423806 (.out1(out_ui_fshl_expr_FU_64_64_0_64_47_i0_fu_keccak_423514_423806),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i22_fu_keccak_423514_423767),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i22_fu_keccak_423514_423767),\n    .in3(out_const_10));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(6),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423807 (.out1(out_ui_fshl_expr_FU_64_64_0_64_48_i0_fu_keccak_423514_423807),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i30_fu_keccak_423514_423776),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i30_fu_keccak_423514_423776),\n    .in3(out_const_27));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(6),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423808 (.out1(out_ui_fshl_expr_FU_64_64_0_64_49_i0_fu_keccak_423514_423808),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i40_fu_keccak_423514_423788),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i40_fu_keccak_423514_423788),\n    .in3(out_const_39));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(2),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423809 (.out1(out_ui_fshl_expr_FU_64_64_0_64_50_i0_fu_keccak_423514_423809),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i31_fu_keccak_423514_423777),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i31_fu_keccak_423514_423777),\n    .in3(out_const_2));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(4),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423810 (.out1(out_ui_fshl_expr_FU_64_64_0_64_51_i0_fu_keccak_423514_423810),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i49_fu_keccak_423514_423798),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i49_fu_keccak_423514_423798),\n    .in3(out_const_40));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(5),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423811 (.out1(out_ui_fshl_expr_FU_64_64_0_64_52_i0_fu_keccak_423514_423811),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i45_fu_keccak_423514_423794),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i45_fu_keccak_423514_423794),\n    .in3(out_const_38));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(6),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423812 (.out1(out_ui_fshl_expr_FU_64_64_0_64_53_i0_fu_keccak_423514_423812),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i24_fu_keccak_423514_423769),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i24_fu_keccak_423514_423769),\n    .in3(out_const_20));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(6),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423813 (.out1(out_ui_fshl_expr_FU_64_64_0_64_54_i0_fu_keccak_423514_423813),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i43_fu_keccak_423514_423791),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i43_fu_keccak_423514_423791),\n    .in3(out_const_42));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(4),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423814 (.out1(out_ui_fshl_expr_FU_64_64_0_64_55_i0_fu_keccak_423514_423814),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i48_fu_keccak_423514_423797),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i48_fu_keccak_423514_423797),\n    .in3(out_const_3));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(5),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423815 (.out1(out_ui_fshl_expr_FU_64_64_0_64_56_i0_fu_keccak_423514_423815),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i41_fu_keccak_423514_423789),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i41_fu_keccak_423514_423789),\n    .in3(out_const_36));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(6),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423816 (.out1(out_ui_fshl_expr_FU_64_64_0_64_57_i0_fu_keccak_423514_423816),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i35_fu_keccak_423514_423782),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i35_fu_keccak_423514_423782),\n    .in3(out_const_23));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(6),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423817 (.out1(out_ui_fshl_expr_FU_64_64_0_64_58_i0_fu_keccak_423514_423817),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i33_fu_keccak_423514_423780),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i33_fu_keccak_423514_423780),\n    .in3(out_const_47));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(5),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423818 (.out1(out_ui_fshl_expr_FU_64_64_0_64_59_i0_fu_keccak_423514_423818),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i25_fu_keccak_423514_423770),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i25_fu_keccak_423514_423770),\n    .in3(out_const_9));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(6),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423819 (.out1(out_ui_fshl_expr_FU_64_64_0_64_60_i0_fu_keccak_423514_423819),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i47_fu_keccak_423514_423796),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i47_fu_keccak_423514_423796),\n    .in3(out_const_14));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(6),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423820 (.out1(out_ui_fshl_expr_FU_64_64_0_64_61_i0_fu_keccak_423514_423820),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i37_fu_keccak_423514_423784),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i37_fu_keccak_423514_423784),\n    .in3(out_const_46));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(5),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423821 (.out1(out_ui_fshl_expr_FU_64_64_0_64_62_i0_fu_keccak_423514_423821),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i46_fu_keccak_423514_423795),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i46_fu_keccak_423514_423795),\n    .in3(out_const_16));\n  ui_fshl_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_in3(6),\n    .BITSIZE_out1(64),\n    .PRECISION(64)) fu_keccak_423514_423822 (.out1(out_ui_fshl_expr_FU_64_64_0_64_63_i0_fu_keccak_423514_423822),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i28_fu_keccak_423514_423774),\n    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i28_fu_keccak_423514_423774),\n    .in3(out_const_24));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423823 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i0_fu_keccak_423514_423823),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_63_i0_fu_keccak_423514_423822),\n    .in2(out_const_48));\n  ui_bit_and_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423824 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i0_fu_keccak_423514_423824),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_57_i0_fu_keccak_423514_423816),\n    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i0_fu_keccak_423514_423823));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423825 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i1_fu_keccak_423514_423825),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_57_i0_fu_keccak_423514_423816),\n    .in2(out_const_48));\n  ui_bit_and_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423826 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i1_fu_keccak_423514_423826),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_45_i0_fu_keccak_423514_423804),\n    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i1_fu_keccak_423514_423825));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423827 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i50_fu_keccak_423514_423827),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_63_i0_fu_keccak_423514_423822),\n    .in2(out_ui_bit_and_expr_FU_64_64_64_36_i1_fu_keccak_423514_423826));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423828 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i2_fu_keccak_423514_423828),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_45_i0_fu_keccak_423514_423804),\n    .in2(out_const_48));\n  ui_bit_and_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423829 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i2_fu_keccak_423514_423829),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_51_i0_fu_keccak_423514_423810),\n    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i2_fu_keccak_423514_423828));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423830 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i51_fu_keccak_423514_423830),\n    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i2_fu_keccak_423514_423829),\n    .in2(out_ui_fshl_expr_FU_64_64_0_64_57_i0_fu_keccak_423514_423816));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423831 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i3_fu_keccak_423514_423831),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_51_i0_fu_keccak_423514_423810),\n    .in2(out_const_48));\n  ui_bit_and_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423832 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i3_fu_keccak_423514_423832),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i21_fu_keccak_423514_423766),\n    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i3_fu_keccak_423514_423831));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423833 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i52_fu_keccak_423514_423833),\n    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i3_fu_keccak_423514_423832),\n    .in2(out_ui_fshl_expr_FU_64_64_0_64_45_i0_fu_keccak_423514_423804));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423834 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i4_fu_keccak_423514_423834),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i21_fu_keccak_423514_423766),\n    .in2(out_const_48));\n  ui_bit_and_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423835 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i4_fu_keccak_423514_423835),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_63_i0_fu_keccak_423514_423822),\n    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i4_fu_keccak_423514_423834));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423836 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i53_fu_keccak_423514_423836),\n    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i4_fu_keccak_423514_423835),\n    .in2(out_ui_fshl_expr_FU_64_64_0_64_51_i0_fu_keccak_423514_423810));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423837 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i5_fu_keccak_423514_423837),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_62_i0_fu_keccak_423514_423821),\n    .in2(out_const_48));\n  ui_bit_and_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423838 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i5_fu_keccak_423514_423838),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_41_i0_fu_keccak_423514_423800),\n    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i5_fu_keccak_423514_423837));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423839 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i54_fu_keccak_423514_423839),\n    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i5_fu_keccak_423514_423838),\n    .in2(out_ui_fshl_expr_FU_64_64_0_64_46_i0_fu_keccak_423514_423805));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423840 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i6_fu_keccak_423514_423840),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_41_i0_fu_keccak_423514_423800),\n    .in2(out_const_48));\n  ui_bit_and_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423841 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i6_fu_keccak_423514_423841),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_48_i0_fu_keccak_423514_423807),\n    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i6_fu_keccak_423514_423840));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423842 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i55_fu_keccak_423514_423842),\n    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i6_fu_keccak_423514_423841),\n    .in2(out_ui_fshl_expr_FU_64_64_0_64_62_i0_fu_keccak_423514_423821));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423843 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i7_fu_keccak_423514_423843),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_48_i0_fu_keccak_423514_423807),\n    .in2(out_const_48));\n  ui_bit_and_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423844 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i7_fu_keccak_423514_423844),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_61_i0_fu_keccak_423514_423820),\n    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i7_fu_keccak_423514_423843));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423845 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i56_fu_keccak_423514_423845),\n    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i7_fu_keccak_423514_423844),\n    .in2(out_ui_fshl_expr_FU_64_64_0_64_41_i0_fu_keccak_423514_423800));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423846 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i8_fu_keccak_423514_423846),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_61_i0_fu_keccak_423514_423820),\n    .in2(out_const_48));\n  ui_bit_and_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423847 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i8_fu_keccak_423514_423847),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_46_i0_fu_keccak_423514_423805),\n    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i8_fu_keccak_423514_423846));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423848 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i57_fu_keccak_423514_423848),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_48_i0_fu_keccak_423514_423807),\n    .in2(out_ui_bit_and_expr_FU_64_64_64_36_i8_fu_keccak_423514_423847));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423849 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i9_fu_keccak_423514_423849),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_46_i0_fu_keccak_423514_423805),\n    .in2(out_const_48));\n  ui_bit_and_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423850 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i9_fu_keccak_423514_423850),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_62_i0_fu_keccak_423514_423821),\n    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i9_fu_keccak_423514_423849));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423851 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i58_fu_keccak_423514_423851),\n    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i9_fu_keccak_423514_423850),\n    .in2(out_ui_fshl_expr_FU_64_64_0_64_61_i0_fu_keccak_423514_423820));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423852 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i10_fu_keccak_423514_423852),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_42_i0_fu_keccak_423514_423801),\n    .in2(out_const_48));\n  ui_bit_and_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423853 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i10_fu_keccak_423514_423853),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_56_i0_fu_keccak_423514_423815),\n    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i10_fu_keccak_423514_423852));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423854 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i59_fu_keccak_423514_423854),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_40_i5_fu_keccak_423514_423799),\n    .in2(out_ui_bit_and_expr_FU_64_64_64_36_i10_fu_keccak_423514_423853));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423855 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i11_fu_keccak_423514_423855),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_56_i0_fu_keccak_423514_423815),\n    .in2(out_const_48));\n  ui_bit_and_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423856 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i11_fu_keccak_423514_423856),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_55_i0_fu_keccak_423514_423814),\n    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i11_fu_keccak_423514_423855));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423857 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i60_fu_keccak_423514_423857),\n    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i11_fu_keccak_423514_423856),\n    .in2(out_ui_fshl_expr_FU_64_64_0_64_42_i0_fu_keccak_423514_423801));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423858 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i12_fu_keccak_423514_423858),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_55_i0_fu_keccak_423514_423814),\n    .in2(out_const_48));\n  ui_bit_and_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423859 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i12_fu_keccak_423514_423859),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_59_i0_fu_keccak_423514_423818),\n    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i12_fu_keccak_423514_423858));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423860 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i61_fu_keccak_423514_423860),\n    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i12_fu_keccak_423514_423859),\n    .in2(out_ui_fshl_expr_FU_64_64_0_64_56_i0_fu_keccak_423514_423815));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423861 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i13_fu_keccak_423514_423861),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_59_i0_fu_keccak_423514_423818),\n    .in2(out_const_48));\n  ui_bit_and_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423862 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i13_fu_keccak_423514_423862),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_40_i5_fu_keccak_423514_423799),\n    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i13_fu_keccak_423514_423861));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423863 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i62_fu_keccak_423514_423863),\n    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i13_fu_keccak_423514_423862),\n    .in2(out_ui_fshl_expr_FU_64_64_0_64_55_i0_fu_keccak_423514_423814));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423864 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i14_fu_keccak_423514_423864),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_40_i5_fu_keccak_423514_423799),\n    .in2(out_const_48));\n  ui_bit_and_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423865 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i14_fu_keccak_423514_423865),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_42_i0_fu_keccak_423514_423801),\n    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i14_fu_keccak_423514_423864));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423866 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i63_fu_keccak_423514_423866),\n    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i14_fu_keccak_423514_423865),\n    .in2(out_ui_fshl_expr_FU_64_64_0_64_59_i0_fu_keccak_423514_423818));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423867 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i15_fu_keccak_423514_423867),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_47_i0_fu_keccak_423514_423806),\n    .in2(out_const_48));\n  ui_bit_and_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423868 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i15_fu_keccak_423514_423868),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_43_i0_fu_keccak_423514_423802),\n    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i15_fu_keccak_423514_423867));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423869 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i64_fu_keccak_423514_423869),\n    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i15_fu_keccak_423514_423868),\n    .in2(out_ui_fshl_expr_FU_64_64_0_64_52_i0_fu_keccak_423514_423811));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423870 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i16_fu_keccak_423514_423870),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_43_i0_fu_keccak_423514_423802),\n    .in2(out_const_48));\n  ui_bit_and_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423871 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i16_fu_keccak_423514_423871),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_44_i0_fu_keccak_423514_423803),\n    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i16_fu_keccak_423514_423870));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423872 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i65_fu_keccak_423514_423872),\n    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i16_fu_keccak_423514_423871),\n    .in2(out_ui_fshl_expr_FU_64_64_0_64_47_i0_fu_keccak_423514_423806));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423873 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i17_fu_keccak_423514_423873),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_44_i0_fu_keccak_423514_423803),\n    .in2(out_const_48));\n  ui_bit_and_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423874 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i17_fu_keccak_423514_423874),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_54_i0_fu_keccak_423514_423813),\n    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i17_fu_keccak_423514_423873));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423875 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i66_fu_keccak_423514_423875),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_43_i0_fu_keccak_423514_423802),\n    .in2(out_ui_bit_and_expr_FU_64_64_64_36_i17_fu_keccak_423514_423874));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423876 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i18_fu_keccak_423514_423876),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_54_i0_fu_keccak_423514_423813),\n    .in2(out_const_48));\n  ui_bit_and_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423877 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i18_fu_keccak_423514_423877),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_52_i0_fu_keccak_423514_423811),\n    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i18_fu_keccak_423514_423876));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423878 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i67_fu_keccak_423514_423878),\n    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i18_fu_keccak_423514_423877),\n    .in2(out_ui_fshl_expr_FU_64_64_0_64_44_i0_fu_keccak_423514_423803));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423879 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i19_fu_keccak_423514_423879),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_52_i0_fu_keccak_423514_423811),\n    .in2(out_const_48));\n  ui_bit_and_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423880 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i19_fu_keccak_423514_423880),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_47_i0_fu_keccak_423514_423806),\n    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i19_fu_keccak_423514_423879));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423881 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i68_fu_keccak_423514_423881),\n    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i19_fu_keccak_423514_423880),\n    .in2(out_ui_fshl_expr_FU_64_64_0_64_54_i0_fu_keccak_423514_423813));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423882 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i20_fu_keccak_423514_423882),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_49_i0_fu_keccak_423514_423808),\n    .in2(out_const_48));\n  ui_bit_and_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423883 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i20_fu_keccak_423514_423883),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_60_i0_fu_keccak_423514_423819),\n    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i20_fu_keccak_423514_423882));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423884 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i69_fu_keccak_423514_423884),\n    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i20_fu_keccak_423514_423883),\n    .in2(out_ui_fshl_expr_FU_64_64_0_64_58_i0_fu_keccak_423514_423817));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423885 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i21_fu_keccak_423514_423885),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_60_i0_fu_keccak_423514_423819),\n    .in2(out_const_48));\n  ui_bit_and_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423886 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i21_fu_keccak_423514_423886),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_53_i0_fu_keccak_423514_423812),\n    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i21_fu_keccak_423514_423885));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423887 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i70_fu_keccak_423514_423887),\n    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i21_fu_keccak_423514_423886),\n    .in2(out_ui_fshl_expr_FU_64_64_0_64_49_i0_fu_keccak_423514_423808));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423888 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i22_fu_keccak_423514_423888),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_53_i0_fu_keccak_423514_423812),\n    .in2(out_const_48));\n  ui_bit_and_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423889 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i22_fu_keccak_423514_423889),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_50_i0_fu_keccak_423514_423809),\n    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i22_fu_keccak_423514_423888));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423890 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i71_fu_keccak_423514_423890),\n    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i22_fu_keccak_423514_423889),\n    .in2(out_ui_fshl_expr_FU_64_64_0_64_60_i0_fu_keccak_423514_423819));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423891 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i23_fu_keccak_423514_423891),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_50_i0_fu_keccak_423514_423809),\n    .in2(out_const_48));\n  ui_bit_and_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423892 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i23_fu_keccak_423514_423892),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_58_i0_fu_keccak_423514_423817),\n    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i23_fu_keccak_423514_423891));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423893 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i72_fu_keccak_423514_423893),\n    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i23_fu_keccak_423514_423892),\n    .in2(out_ui_fshl_expr_FU_64_64_0_64_53_i0_fu_keccak_423514_423812));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423894 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i24_fu_keccak_423514_423894),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_58_i0_fu_keccak_423514_423817),\n    .in2(out_const_48));\n  ui_bit_and_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423895 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i24_fu_keccak_423514_423895),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_49_i0_fu_keccak_423514_423808),\n    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i24_fu_keccak_423514_423894));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423896 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i73_fu_keccak_423514_423896),\n    .in1(out_ui_fshl_expr_FU_64_64_0_64_50_i0_fu_keccak_423514_423809),\n    .in2(out_ui_bit_and_expr_FU_64_64_64_36_i24_fu_keccak_423514_423895));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423897 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i74_fu_keccak_423514_423897),\n    .in1(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0),\n    .in2(out_reg_76_reg_76));\n  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),\n    .BITSIZE_in2(64),\n    .BITSIZE_out1(64)) fu_keccak_423514_423898 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i75_fu_keccak_423514_423898),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i74_fu_keccak_423514_423897),\n    .in2(out_reg_75_reg_75));\n  read_cond_FU #(.BITSIZE_in1(1)) fu_keccak_423514_423900 (.out1(out_read_cond_FU_33_i0_fu_keccak_423514_423900),\n    .in1(out_reg_77_reg_77));\n  ui_view_convert_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) fu_keccak_423514_424602 (.out1(out_ui_view_convert_expr_FU_4_i0_fu_keccak_423514_424602),\n    .in1(out_addr_expr_FU_3_i0_fu_keccak_423514_424612));\n  addr_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) fu_keccak_423514_424612 (.out1(out_addr_expr_FU_3_i0_fu_keccak_423514_424612),\n    .in1(out_const_29));\n  ui_view_convert_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) fu_keccak_423514_424614 (.out1(out_ui_view_convert_expr_FU_6_i0_fu_keccak_423514_424614),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_87_i1_fu_keccak_423514_424624));\n  ui_eq_expr_FU #(.BITSIZE_in1(29),\n    .BITSIZE_in2(29),\n    .BITSIZE_out1(1)) fu_keccak_423514_424616 (.out1(out_ui_eq_expr_FU_32_32_32_39_i0_fu_keccak_423514_424616),\n    .in1(out_ui_rshift_expr_FU_32_0_32_88_i0_fu_keccak_423514_424631),\n    .in2(out_reg_25_reg_25));\n  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(8),\n    .BITSIZE_out1(32),\n    .LSB_PARAMETER(0)) fu_keccak_423514_424624 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_87_i1_fu_keccak_423514_424624),\n    .in1(out_addr_expr_FU_5_i0_fu_keccak_423514_424627),\n    .in2(out_const_35));\n  addr_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) fu_keccak_423514_424627 (.out1(out_addr_expr_FU_5_i0_fu_keccak_423514_424627),\n    .in1(out_const_29));\n  ui_rshift_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(2),\n    .BITSIZE_out1(29),\n    .PRECISION(32)) fu_keccak_423514_424631 (.out1(out_ui_rshift_expr_FU_32_0_32_88_i0_fu_keccak_423514_424631),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_68_i1_fu_keccak_423514_423743),\n    .in2(out_const_30));\n  ui_rshift_expr_FU #(.BITSIZE_in1(32),\n    .BITSIZE_in2(2),\n    .BITSIZE_out1(29),\n    .PRECISION(32)) fu_keccak_423514_424636 (.out1(out_ui_rshift_expr_FU_32_0_32_88_i1_fu_keccak_423514_424636),\n    .in1(out_ui_view_convert_expr_FU_6_i0_fu_keccak_423514_424614),\n    .in2(out_const_30));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_0 (.out1(out_reg_0_reg_0),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_64_i0_fu_keccak_423514_423531),\n    .wenable(wrenable_reg_0));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_1 (.out1(out_reg_1_reg_1),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_65_i0_fu_keccak_423514_423532),\n    .wenable(wrenable_reg_1));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_10 (.out1(out_reg_10_reg_10),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_74_i0_fu_keccak_423514_423541),\n    .wenable(wrenable_reg_10));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_11 (.out1(out_reg_11_reg_11),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_75_i0_fu_keccak_423514_423542),\n    .wenable(wrenable_reg_11));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_12 (.out1(out_reg_12_reg_12),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_76_i0_fu_keccak_423514_423543),\n    .wenable(wrenable_reg_12));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_13 (.out1(out_reg_13_reg_13),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_77_i0_fu_keccak_423514_423544),\n    .wenable(wrenable_reg_13));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_14 (.out1(out_reg_14_reg_14),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_78_i0_fu_keccak_423514_423545),\n    .wenable(wrenable_reg_14));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_15 (.out1(out_reg_15_reg_15),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_79_i0_fu_keccak_423514_423546),\n    .wenable(wrenable_reg_15));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_16 (.out1(out_reg_16_reg_16),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_80_i0_fu_keccak_423514_423547),\n    .wenable(wrenable_reg_16));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_17 (.out1(out_reg_17_reg_17),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_81_i0_fu_keccak_423514_423548),\n    .wenable(wrenable_reg_17));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_18 (.out1(out_reg_18_reg_18),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_82_i0_fu_keccak_423514_423549),\n    .wenable(wrenable_reg_18));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_19 (.out1(out_reg_19_reg_19),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_83_i0_fu_keccak_423514_423550),\n    .wenable(wrenable_reg_19));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_2 (.out1(out_reg_2_reg_2),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_66_i0_fu_keccak_423514_423533),\n    .wenable(wrenable_reg_2));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_20 (.out1(out_reg_20_reg_20),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_84_i0_fu_keccak_423514_423551),\n    .wenable(wrenable_reg_20));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_21 (.out1(out_reg_21_reg_21),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_85_i0_fu_keccak_423514_423552),\n    .wenable(wrenable_reg_21));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_22 (.out1(out_reg_22_reg_22),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_86_i0_fu_keccak_423514_423553),\n    .wenable(wrenable_reg_22));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_23 (.out1(out_reg_23_reg_23),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_87_i0_fu_keccak_423514_423554),\n    .wenable(wrenable_reg_23));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_24 (.out1(out_reg_24_reg_24),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_25_reg_24_0_0_0),\n    .wenable(wrenable_reg_24));\n  register_SE #(.BITSIZE_in1(29),\n    .BITSIZE_out1(29)) reg_25 (.out1(out_reg_25_reg_25),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_rshift_expr_FU_32_0_32_88_i1_fu_keccak_423514_424636),\n    .wenable(wrenable_reg_25));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_26 (.out1(out_reg_26_reg_26),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_27_reg_26_0_0_0),\n    .wenable(wrenable_reg_26));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_27 (.out1(out_reg_27_reg_27),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_28_reg_27_0_0_0),\n    .wenable(wrenable_reg_27));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_28 (.out1(out_reg_28_reg_28),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_29_reg_28_0_0_0),\n    .wenable(wrenable_reg_28));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_29 (.out1(out_reg_29_reg_29),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_30_reg_29_0_0_0),\n    .wenable(wrenable_reg_29));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_3 (.out1(out_reg_3_reg_3),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_67_i0_fu_keccak_423514_423534),\n    .wenable(wrenable_reg_3));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_30 (.out1(out_reg_30_reg_30),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_32_reg_30_0_0_0),\n    .wenable(wrenable_reg_30));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_31 (.out1(out_reg_31_reg_31),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_33_reg_31_0_0_0),\n    .wenable(wrenable_reg_31));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_32 (.out1(out_reg_32_reg_32),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_34_reg_32_0_0_0),\n    .wenable(wrenable_reg_32));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_33 (.out1(out_reg_33_reg_33),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_35_reg_33_0_0_0),\n    .wenable(wrenable_reg_33));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_34 (.out1(out_reg_34_reg_34),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_36_reg_34_0_0_0),\n    .wenable(wrenable_reg_34));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_35 (.out1(out_reg_35_reg_35),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_37_reg_35_0_0_0),\n    .wenable(wrenable_reg_35));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_36 (.out1(out_reg_36_reg_36),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_38_reg_36_0_0_0),\n    .wenable(wrenable_reg_36));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_37 (.out1(out_reg_37_reg_37),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_39_reg_37_0_0_0),\n    .wenable(wrenable_reg_37));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_38 (.out1(out_reg_38_reg_38),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_40_reg_38_0_0_0),\n    .wenable(wrenable_reg_38));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_39 (.out1(out_reg_39_reg_39),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_41_reg_39_0_0_0),\n    .wenable(wrenable_reg_39));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_4 (.out1(out_reg_4_reg_4),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_68_i0_fu_keccak_423514_423535),\n    .wenable(wrenable_reg_4));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_40 (.out1(out_reg_40_reg_40),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_43_reg_40_0_0_0),\n    .wenable(wrenable_reg_40));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_41 (.out1(out_reg_41_reg_41),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_44_reg_41_0_0_0),\n    .wenable(wrenable_reg_41));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_42 (.out1(out_reg_42_reg_42),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_45_reg_42_0_0_0),\n    .wenable(wrenable_reg_42));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_43 (.out1(out_reg_43_reg_43),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_46_reg_43_0_0_0),\n    .wenable(wrenable_reg_43));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_44 (.out1(out_reg_44_reg_44),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_47_reg_44_0_0_0),\n    .wenable(wrenable_reg_44));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_45 (.out1(out_reg_45_reg_45),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_48_reg_45_0_0_0),\n    .wenable(wrenable_reg_45));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_46 (.out1(out_reg_46_reg_46),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_49_reg_46_0_0_0),\n    .wenable(wrenable_reg_46));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_47 (.out1(out_reg_47_reg_47),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_50_reg_47_0_0_0),\n    .wenable(wrenable_reg_47));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_48 (.out1(out_reg_48_reg_48),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_51_reg_48_0_0_0),\n    .wenable(wrenable_reg_48));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_49 (.out1(out_reg_49_reg_49),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_52_reg_49_0_0_0),\n    .wenable(wrenable_reg_49));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_5 (.out1(out_reg_5_reg_5),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_69_i0_fu_keccak_423514_423536),\n    .wenable(wrenable_reg_5));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_50 (.out1(out_reg_50_reg_50),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_MUX_54_reg_50_0_0_0),\n    .wenable(wrenable_reg_50));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_51 (.out1(out_reg_51_reg_51),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i68_fu_keccak_423514_423881),\n    .wenable(wrenable_reg_51));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_52 (.out1(out_reg_52_reg_52),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i63_fu_keccak_423514_423866),\n    .wenable(wrenable_reg_52));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_53 (.out1(out_reg_53_reg_53),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i58_fu_keccak_423514_423851),\n    .wenable(wrenable_reg_53));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_54 (.out1(out_reg_54_reg_54),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i53_fu_keccak_423514_423836),\n    .wenable(wrenable_reg_54));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_55 (.out1(out_reg_55_reg_55),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i72_fu_keccak_423514_423893),\n    .wenable(wrenable_reg_55));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_56 (.out1(out_reg_56_reg_56),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i67_fu_keccak_423514_423878),\n    .wenable(wrenable_reg_56));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_57 (.out1(out_reg_57_reg_57),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i62_fu_keccak_423514_423863),\n    .wenable(wrenable_reg_57));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_58 (.out1(out_reg_58_reg_58),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i57_fu_keccak_423514_423848),\n    .wenable(wrenable_reg_58));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_59 (.out1(out_reg_59_reg_59),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i52_fu_keccak_423514_423833),\n    .wenable(wrenable_reg_59));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_6 (.out1(out_reg_6_reg_6),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_70_i0_fu_keccak_423514_423537),\n    .wenable(wrenable_reg_6));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_60 (.out1(out_reg_60_reg_60),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i71_fu_keccak_423514_423890),\n    .wenable(wrenable_reg_60));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_61 (.out1(out_reg_61_reg_61),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i66_fu_keccak_423514_423875),\n    .wenable(wrenable_reg_61));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_62 (.out1(out_reg_62_reg_62),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i61_fu_keccak_423514_423860),\n    .wenable(wrenable_reg_62));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_63 (.out1(out_reg_63_reg_63),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i56_fu_keccak_423514_423845),\n    .wenable(wrenable_reg_63));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_64 (.out1(out_reg_64_reg_64),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i51_fu_keccak_423514_423830),\n    .wenable(wrenable_reg_64));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_65 (.out1(out_reg_65_reg_65),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i70_fu_keccak_423514_423887),\n    .wenable(wrenable_reg_65));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_66 (.out1(out_reg_66_reg_66),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i65_fu_keccak_423514_423872),\n    .wenable(wrenable_reg_66));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_67 (.out1(out_reg_67_reg_67),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i60_fu_keccak_423514_423857),\n    .wenable(wrenable_reg_67));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_68 (.out1(out_reg_68_reg_68),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i55_fu_keccak_423514_423842),\n    .wenable(wrenable_reg_68));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_69 (.out1(out_reg_69_reg_69),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i50_fu_keccak_423514_423827),\n    .wenable(wrenable_reg_69));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_7 (.out1(out_reg_7_reg_7),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_71_i0_fu_keccak_423514_423538),\n    .wenable(wrenable_reg_7));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_70 (.out1(out_reg_70_reg_70),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i69_fu_keccak_423514_423884),\n    .wenable(wrenable_reg_70));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_71 (.out1(out_reg_71_reg_71),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i64_fu_keccak_423514_423869),\n    .wenable(wrenable_reg_71));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_72 (.out1(out_reg_72_reg_72),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i59_fu_keccak_423514_423854),\n    .wenable(wrenable_reg_72));\n  register_SE #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_73 (.out1(out_reg_73_reg_73),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i54_fu_keccak_423514_423839),\n    .wenable(wrenable_reg_73));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_74 (.out1(out_reg_74_reg_74),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_68_i1_fu_keccak_423514_423743),\n    .wenable(wrenable_reg_74));\n  register_STD #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_75 (.out1(out_reg_75_reg_75),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i21_fu_keccak_423514_423766),\n    .wenable(wrenable_reg_75));\n  register_STD #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_76 (.out1(out_reg_76_reg_76),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i0_fu_keccak_423514_423824),\n    .wenable(wrenable_reg_76));\n  register_STD #(.BITSIZE_in1(1),\n    .BITSIZE_out1(1)) reg_77 (.out1(out_reg_77_reg_77),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_eq_expr_FU_32_32_32_39_i0_fu_keccak_423514_424616),\n    .wenable(wrenable_reg_77));\n  register_STD #(.BITSIZE_in1(64),\n    .BITSIZE_out1(64)) reg_78 (.out1(out_reg_78_reg_78),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i75_fu_keccak_423514_423898),\n    .wenable(wrenable_reg_78));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_8 (.out1(out_reg_8_reg_8),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_72_i0_fu_keccak_423514_423539),\n    .wenable(wrenable_reg_8));\n  register_SE #(.BITSIZE_in1(32),\n    .BITSIZE_out1(32)) reg_9 (.out1(out_reg_9_reg_9),\n    .clock(clock),\n    .reset(reset),\n    .in1(out_ui_pointer_plus_expr_FU_32_0_32_73_i0_fu_keccak_423514_423540),\n    .wenable(wrenable_reg_9));\n  // io-signal post fix\n  assign Sout_Rdata_ram = sig_out_bus_mergerSout_Rdata_ram6_;\n  assign Sout_DataRdy = sig_out_bus_mergerSout_DataRdy5_;\n  assign Mout_oe_ram = sig_out_bus_mergerMout_oe_ram3_;\n  assign Mout_we_ram = sig_out_bus_mergerMout_we_ram4_;\n  assign Mout_addr_ram = sig_out_bus_mergerMout_addr_ram1_;\n  assign Mout_Wdata_ram = sig_out_bus_mergerMout_Wdata_ram0_;\n  assign Mout_data_ram_size = sig_out_bus_mergerMout_data_ram_size2_;\n  assign OUT_CONDITION_keccak_423514_423900 = out_read_cond_FU_33_i0_fu_keccak_423514_423900;\n\nendmodule\n\n// FSM based controller description for keccak\n// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.\n// Author(s): Component automatically generated by bambu\n// License: THIS COMPONENT IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n`timescale 1ns / 1ps\nmodule controller_keccak(done_port,\n  fuselector_BMEMORY_CTRL_35_i0_LOAD,\n  fuselector_BMEMORY_CTRL_35_i0_STORE,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0,\n  selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0,\n  selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1,\n  selector_MUX_25_reg_24_0_0_0,\n  selector_MUX_27_reg_26_0_0_0,\n  selector_MUX_28_reg_27_0_0_0,\n  selector_MUX_29_reg_28_0_0_0,\n  selector_MUX_30_reg_29_0_0_0,\n  selector_MUX_32_reg_30_0_0_0,\n  selector_MUX_33_reg_31_0_0_0,\n  selector_MUX_34_reg_32_0_0_0,\n  selector_MUX_35_reg_33_0_0_0,\n  selector_MUX_36_reg_34_0_0_0,\n  selector_MUX_37_reg_35_0_0_0,\n  selector_MUX_38_reg_36_0_0_0,\n  selector_MUX_39_reg_37_0_0_0,\n  selector_MUX_40_reg_38_0_0_0,\n  selector_MUX_41_reg_39_0_0_0,\n  selector_MUX_43_reg_40_0_0_0,\n  selector_MUX_44_reg_41_0_0_0,\n  selector_MUX_45_reg_42_0_0_0,\n  selector_MUX_46_reg_43_0_0_0,\n  selector_MUX_47_reg_44_0_0_0,\n  selector_MUX_48_reg_45_0_0_0,\n  selector_MUX_49_reg_46_0_0_0,\n  selector_MUX_50_reg_47_0_0_0,\n  selector_MUX_51_reg_48_0_0_0,\n  selector_MUX_52_reg_49_0_0_0,\n  selector_MUX_54_reg_50_0_0_0,\n  wrenable_reg_0,\n  wrenable_reg_1,\n  wrenable_reg_10,\n  wrenable_reg_11,\n  wrenable_reg_12,\n  wrenable_reg_13,\n  wrenable_reg_14,\n  wrenable_reg_15,\n  wrenable_reg_16,\n  wrenable_reg_17,\n  wrenable_reg_18,\n  wrenable_reg_19,\n  wrenable_reg_2,\n  wrenable_reg_20,\n  wrenable_reg_21,\n  wrenable_reg_22,\n  wrenable_reg_23,\n  wrenable_reg_24,\n  wrenable_reg_25,\n  wrenable_reg_26,\n  wrenable_reg_27,\n  wrenable_reg_28,\n  wrenable_reg_29,\n  wrenable_reg_3,\n  wrenable_reg_30,\n  wrenable_reg_31,\n  wrenable_reg_32,\n  wrenable_reg_33,\n  wrenable_reg_34,\n  wrenable_reg_35,\n  wrenable_reg_36,\n  wrenable_reg_37,\n  wrenable_reg_38,\n  wrenable_reg_39,\n  wrenable_reg_4,\n  wrenable_reg_40,\n  wrenable_reg_41,\n  wrenable_reg_42,\n  wrenable_reg_43,\n  wrenable_reg_44,\n  wrenable_reg_45,\n  wrenable_reg_46,\n  wrenable_reg_47,\n  wrenable_reg_48,\n  wrenable_reg_49,\n  wrenable_reg_5,\n  wrenable_reg_50,\n  wrenable_reg_51,\n  wrenable_reg_52,\n  wrenable_reg_53,\n  wrenable_reg_54,\n  wrenable_reg_55,\n  wrenable_reg_56,\n  wrenable_reg_57,\n  wrenable_reg_58,\n  wrenable_reg_59,\n  wrenable_reg_6,\n  wrenable_reg_60,\n  wrenable_reg_61,\n  wrenable_reg_62,\n  wrenable_reg_63,\n  wrenable_reg_64,\n  wrenable_reg_65,\n  wrenable_reg_66,\n  wrenable_reg_67,\n  wrenable_reg_68,\n  wrenable_reg_69,\n  wrenable_reg_7,\n  wrenable_reg_70,\n  wrenable_reg_71,\n  wrenable_reg_72,\n  wrenable_reg_73,\n  wrenable_reg_74,\n  wrenable_reg_75,\n  wrenable_reg_76,\n  wrenable_reg_77,\n  wrenable_reg_78,\n  wrenable_reg_8,\n  wrenable_reg_9,\n  OUT_CONDITION_keccak_423514_423900,\n  clock,\n  reset,\n  start_port);\n  // IN\n  input OUT_CONDITION_keccak_423514_423900;\n  input clock;\n  input reset;\n  input start_port;\n  // OUT\n  output done_port;\n  output fuselector_BMEMORY_CTRL_35_i0_LOAD;\n  output fuselector_BMEMORY_CTRL_35_i0_STORE;\n  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0;\n  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1;\n  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10;\n  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11;\n  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12;\n  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2;\n  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3;\n  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4;\n  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5;\n  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6;\n  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7;\n  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8;\n  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9;\n  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0;\n  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1;\n  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2;\n  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3;\n  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4;\n  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5;\n  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0;\n  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1;\n  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2;\n  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0;\n  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1;\n  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0;\n  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1;\n  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10;\n  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11;\n  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12;\n  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2;\n  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3;\n  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4;\n  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5;\n  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6;\n  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7;\n  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8;\n  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9;\n  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0;\n  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1;\n  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2;\n  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3;\n  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4;\n  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5;\n  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6;\n  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0;\n  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1;\n  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2;\n  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0;\n  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1;\n  output selector_MUX_25_reg_24_0_0_0;\n  output selector_MUX_27_reg_26_0_0_0;\n  output selector_MUX_28_reg_27_0_0_0;\n  output selector_MUX_29_reg_28_0_0_0;\n  output selector_MUX_30_reg_29_0_0_0;\n  output selector_MUX_32_reg_30_0_0_0;\n  output selector_MUX_33_reg_31_0_0_0;\n  output selector_MUX_34_reg_32_0_0_0;\n  output selector_MUX_35_reg_33_0_0_0;\n  output selector_MUX_36_reg_34_0_0_0;\n  output selector_MUX_37_reg_35_0_0_0;\n  output selector_MUX_38_reg_36_0_0_0;\n  output selector_MUX_39_reg_37_0_0_0;\n  output selector_MUX_40_reg_38_0_0_0;\n  output selector_MUX_41_reg_39_0_0_0;\n  output selector_MUX_43_reg_40_0_0_0;\n  output selector_MUX_44_reg_41_0_0_0;\n  output selector_MUX_45_reg_42_0_0_0;\n  output selector_MUX_46_reg_43_0_0_0;\n  output selector_MUX_47_reg_44_0_0_0;\n  output selector_MUX_48_reg_45_0_0_0;\n  output selector_MUX_49_reg_46_0_0_0;\n  output selector_MUX_50_reg_47_0_0_0;\n  output selector_MUX_51_reg_48_0_0_0;\n  output selector_MUX_52_reg_49_0_0_0;\n  output selector_MUX_54_reg_50_0_0_0;\n  output wrenable_reg_0;\n  output wrenable_reg_1;\n  output wrenable_reg_10;\n  output wrenable_reg_11;\n  output wrenable_reg_12;\n  output wrenable_reg_13;\n  output wrenable_reg_14;\n  output wrenable_reg_15;\n  output wrenable_reg_16;\n  output wrenable_reg_17;\n  output wrenable_reg_18;\n  output wrenable_reg_19;\n  output wrenable_reg_2;\n  output wrenable_reg_20;\n  output wrenable_reg_21;\n  output wrenable_reg_22;\n  output wrenable_reg_23;\n  output wrenable_reg_24;\n  output wrenable_reg_25;\n  output wrenable_reg_26;\n  output wrenable_reg_27;\n  output wrenable_reg_28;\n  output wrenable_reg_29;\n  output wrenable_reg_3;\n  output wrenable_reg_30;\n  output wrenable_reg_31;\n  output wrenable_reg_32;\n  output wrenable_reg_33;\n  output wrenable_reg_34;\n  output wrenable_reg_35;\n  output wrenable_reg_36;\n  output wrenable_reg_37;\n  output wrenable_reg_38;\n  output wrenable_reg_39;\n  output wrenable_reg_4;\n  output wrenable_reg_40;\n  output wrenable_reg_41;\n  output wrenable_reg_42;\n  output wrenable_reg_43;\n  output wrenable_reg_44;\n  output wrenable_reg_45;\n  output wrenable_reg_46;\n  output wrenable_reg_47;\n  output wrenable_reg_48;\n  output wrenable_reg_49;\n  output wrenable_reg_5;\n  output wrenable_reg_50;\n  output wrenable_reg_51;\n  output wrenable_reg_52;\n  output wrenable_reg_53;\n  output wrenable_reg_54;\n  output wrenable_reg_55;\n  output wrenable_reg_56;\n  output wrenable_reg_57;\n  output wrenable_reg_58;\n  output wrenable_reg_59;\n  output wrenable_reg_6;\n  output wrenable_reg_60;\n  output wrenable_reg_61;\n  output wrenable_reg_62;\n  output wrenable_reg_63;\n  output wrenable_reg_64;\n  output wrenable_reg_65;\n  output wrenable_reg_66;\n  output wrenable_reg_67;\n  output wrenable_reg_68;\n  output wrenable_reg_69;\n  output wrenable_reg_7;\n  output wrenable_reg_70;\n  output wrenable_reg_71;\n  output wrenable_reg_72;\n  output wrenable_reg_73;\n  output wrenable_reg_74;\n  output wrenable_reg_75;\n  output wrenable_reg_76;\n  output wrenable_reg_77;\n  output wrenable_reg_78;\n  output wrenable_reg_8;\n  output wrenable_reg_9;\n  parameter [53:0] S_0 = 54'b000000000000000000000000000000000000000000000000000001,\n    S_1 = 54'b000000000000000000000000000000000000000000000000000010,\n    S_2 = 54'b000000000000000000000000000000000000000000000000000100,\n    S_3 = 54'b000000000000000000000000000000000000000000000000001000,\n    S_4 = 54'b000000000000000000000000000000000000000000000000010000,\n    S_5 = 54'b000000000000000000000000000000000000000000000000100000,\n    S_6 = 54'b000000000000000000000000000000000000000000000001000000,\n    S_7 = 54'b000000000000000000000000000000000000000000000010000000,\n    S_8 = 54'b000000000000000000000000000000000000000000000100000000,\n    S_9 = 54'b000000000000000000000000000000000000000000001000000000,\n    S_10 = 54'b000000000000000000000000000000000000000000010000000000,\n    S_11 = 54'b000000000000000000000000000000000000000000100000000000,\n    S_12 = 54'b000000000000000000000000000000000000000001000000000000,\n    S_13 = 54'b000000000000000000000000000000000000000010000000000000,\n    S_14 = 54'b000000000000000000000000000000000000000100000000000000,\n    S_15 = 54'b000000000000000000000000000000000000001000000000000000,\n    S_16 = 54'b000000000000000000000000000000000000010000000000000000,\n    S_17 = 54'b000000000000000000000000000000000000100000000000000000,\n    S_18 = 54'b000000000000000000000000000000000001000000000000000000,\n    S_19 = 54'b000000000000000000000000000000000010000000000000000000,\n    S_20 = 54'b000000000000000000000000000000000100000000000000000000,\n    S_21 = 54'b000000000000000000000000000000001000000000000000000000,\n    S_22 = 54'b000000000000000000000000000000010000000000000000000000,\n    S_23 = 54'b000000000000000000000000000000100000000000000000000000,\n    S_24 = 54'b000000000000000000000000000001000000000000000000000000,\n    S_25 = 54'b000000000000000000000000000010000000000000000000000000,\n    S_26 = 54'b000000000000000000000000000100000000000000000000000000,\n    S_27 = 54'b000000000000000000000000001000000000000000000000000000,\n    S_28 = 54'b000000000000000000000000010000000000000000000000000000,\n    S_29 = 54'b000000000000000000000000100000000000000000000000000000,\n    S_30 = 54'b000000000000000000000001000000000000000000000000000000,\n    S_31 = 54'b000000000000000000000010000000000000000000000000000000,\n    S_32 = 54'b000000000000000000000100000000000000000000000000000000,\n    S_33 = 54'b000000000000000000001000000000000000000000000000000000,\n    S_34 = 54'b000000000000000000010000000000000000000000000000000000,\n    S_35 = 54'b000000000000000000100000000000000000000000000000000000,\n    S_36 = 54'b000000000000000001000000000000000000000000000000000000,\n    S_37 = 54'b000000000000000010000000000000000000000000000000000000,\n    S_38 = 54'b000000000000000100000000000000000000000000000000000000,\n    S_39 = 54'b000000000000001000000000000000000000000000000000000000,\n    S_40 = 54'b000000000000010000000000000000000000000000000000000000,\n    S_41 = 54'b000000000000100000000000000000000000000000000000000000,\n    S_42 = 54'b000000000001000000000000000000000000000000000000000000,\n    S_43 = 54'b000000000010000000000000000000000000000000000000000000,\n    S_44 = 54'b000000000100000000000000000000000000000000000000000000,\n    S_45 = 54'b000000001000000000000000000000000000000000000000000000,\n    S_46 = 54'b000000010000000000000000000000000000000000000000000000,\n    S_47 = 54'b000000100000000000000000000000000000000000000000000000,\n    S_48 = 54'b000001000000000000000000000000000000000000000000000000,\n    S_49 = 54'b000010000000000000000000000000000000000000000000000000,\n    S_50 = 54'b000100000000000000000000000000000000000000000000000000,\n    S_51 = 54'b001000000000000000000000000000000000000000000000000000,\n    S_52 = 54'b010000000000000000000000000000000000000000000000000000,\n    S_53 = 54'b100000000000000000000000000000000000000000000000000000;\n  reg [53:0] _present_state=S_0, _next_state;\n  reg done_port;\n  reg fuselector_BMEMORY_CTRL_35_i0_LOAD;\n  reg fuselector_BMEMORY_CTRL_35_i0_STORE;\n  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0;\n  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1;\n  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10;\n  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11;\n  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12;\n  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2;\n  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3;\n  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4;\n  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5;\n  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6;\n  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7;\n  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8;\n  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9;\n  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0;\n  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1;\n  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2;\n  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3;\n  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4;\n  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5;\n  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0;\n  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1;\n  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2;\n  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0;\n  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1;\n  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0;\n  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1;\n  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10;\n  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11;\n  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12;\n  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2;\n  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3;\n  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4;\n  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5;\n  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6;\n  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7;\n  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8;\n  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9;\n  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0;\n  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1;\n  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2;\n  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3;\n  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4;\n  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5;\n  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6;\n  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0;\n  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1;\n  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2;\n  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0;\n  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1;\n  reg selector_MUX_25_reg_24_0_0_0;\n  reg selector_MUX_27_reg_26_0_0_0;\n  reg selector_MUX_28_reg_27_0_0_0;\n  reg selector_MUX_29_reg_28_0_0_0;\n  reg selector_MUX_30_reg_29_0_0_0;\n  reg selector_MUX_32_reg_30_0_0_0;\n  reg selector_MUX_33_reg_31_0_0_0;\n  reg selector_MUX_34_reg_32_0_0_0;\n  reg selector_MUX_35_reg_33_0_0_0;\n  reg selector_MUX_36_reg_34_0_0_0;\n  reg selector_MUX_37_reg_35_0_0_0;\n  reg selector_MUX_38_reg_36_0_0_0;\n  reg selector_MUX_39_reg_37_0_0_0;\n  reg selector_MUX_40_reg_38_0_0_0;\n  reg selector_MUX_41_reg_39_0_0_0;\n  reg selector_MUX_43_reg_40_0_0_0;\n  reg selector_MUX_44_reg_41_0_0_0;\n  reg selector_MUX_45_reg_42_0_0_0;\n  reg selector_MUX_46_reg_43_0_0_0;\n  reg selector_MUX_47_reg_44_0_0_0;\n  reg selector_MUX_48_reg_45_0_0_0;\n  reg selector_MUX_49_reg_46_0_0_0;\n  reg selector_MUX_50_reg_47_0_0_0;\n  reg selector_MUX_51_reg_48_0_0_0;\n  reg selector_MUX_52_reg_49_0_0_0;\n  reg selector_MUX_54_reg_50_0_0_0;\n  reg wrenable_reg_0;\n  reg wrenable_reg_1;\n  reg wrenable_reg_10;\n  reg wrenable_reg_11;\n  reg wrenable_reg_12;\n  reg wrenable_reg_13;\n  reg wrenable_reg_14;\n  reg wrenable_reg_15;\n  reg wrenable_reg_16;\n  reg wrenable_reg_17;\n  reg wrenable_reg_18;\n  reg wrenable_reg_19;\n  reg wrenable_reg_2;\n  reg wrenable_reg_20;\n  reg wrenable_reg_21;\n  reg wrenable_reg_22;\n  reg wrenable_reg_23;\n  reg wrenable_reg_24;\n  reg wrenable_reg_25;\n  reg wrenable_reg_26;\n  reg wrenable_reg_27;\n  reg wrenable_reg_28;\n  reg wrenable_reg_29;\n  reg wrenable_reg_3;\n  reg wrenable_reg_30;\n  reg wrenable_reg_31;\n  reg wrenable_reg_32;\n  reg wrenable_reg_33;\n  reg wrenable_reg_34;\n  reg wrenable_reg_35;\n  reg wrenable_reg_36;\n  reg wrenable_reg_37;\n  reg wrenable_reg_38;\n  reg wrenable_reg_39;\n  reg wrenable_reg_4;\n  reg wrenable_reg_40;\n  reg wrenable_reg_41;\n  reg wrenable_reg_42;\n  reg wrenable_reg_43;\n  reg wrenable_reg_44;\n  reg wrenable_reg_45;\n  reg wrenable_reg_46;\n  reg wrenable_reg_47;\n  reg wrenable_reg_48;\n  reg wrenable_reg_49;\n  reg wrenable_reg_5;\n  reg wrenable_reg_50;\n  reg wrenable_reg_51;\n  reg wrenable_reg_52;\n  reg wrenable_reg_53;\n  reg wrenable_reg_54;\n  reg wrenable_reg_55;\n  reg wrenable_reg_56;\n  reg wrenable_reg_57;\n  reg wrenable_reg_58;\n  reg wrenable_reg_59;\n  reg wrenable_reg_6;\n  reg wrenable_reg_60;\n  reg wrenable_reg_61;\n  reg wrenable_reg_62;\n  reg wrenable_reg_63;\n  reg wrenable_reg_64;\n  reg wrenable_reg_65;\n  reg wrenable_reg_66;\n  reg wrenable_reg_67;\n  reg wrenable_reg_68;\n  reg wrenable_reg_69;\n  reg wrenable_reg_7;\n  reg wrenable_reg_70;\n  reg wrenable_reg_71;\n  reg wrenable_reg_72;\n  reg wrenable_reg_73;\n  reg wrenable_reg_74;\n  reg wrenable_reg_75;\n  reg wrenable_reg_76;\n  reg wrenable_reg_77;\n  reg wrenable_reg_78;\n  reg wrenable_reg_8;\n  reg wrenable_reg_9;\n  \n  always @(posedge clock)\n    if (reset == 1'b0) _present_state <= S_0;\n    else _present_state <= _next_state;\n  \n  always @(*)\n  begin\n    done_port = 1'b0;\n    fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b0;\n    fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b0;\n    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0 = 1'b0;\n    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1 = 1'b0;\n    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10 = 1'b0;\n    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11 = 1'b0;\n    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12 = 1'b0;\n    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2 = 1'b0;\n    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3 = 1'b0;\n    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4 = 1'b0;\n    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5 = 1'b0;\n    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6 = 1'b0;\n    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7 = 1'b0;\n    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8 = 1'b0;\n    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9 = 1'b0;\n    selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0 = 1'b0;\n    selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1 = 1'b0;\n    selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2 = 1'b0;\n    selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3 = 1'b0;\n    selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4 = 1'b0;\n    selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5 = 1'b0;\n    selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0 = 1'b0;\n    selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1 = 1'b0;\n    selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2 = 1'b0;\n    selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0 = 1'b0;\n    selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b0;\n    selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b0;\n    selector_MUX_25_reg_24_0_0_0 = 1'b0;\n    selector_MUX_27_reg_26_0_0_0 = 1'b0;\n    selector_MUX_28_reg_27_0_0_0 = 1'b0;\n    selector_MUX_29_reg_28_0_0_0 = 1'b0;\n    selector_MUX_30_reg_29_0_0_0 = 1'b0;\n    selector_MUX_32_reg_30_0_0_0 = 1'b0;\n    selector_MUX_33_reg_31_0_0_0 = 1'b0;\n    selector_MUX_34_reg_32_0_0_0 = 1'b0;\n    selector_MUX_35_reg_33_0_0_0 = 1'b0;\n    selector_MUX_36_reg_34_0_0_0 = 1'b0;\n    selector_MUX_37_reg_35_0_0_0 = 1'b0;\n    selector_MUX_38_reg_36_0_0_0 = 1'b0;\n    selector_MUX_39_reg_37_0_0_0 = 1'b0;\n    selector_MUX_40_reg_38_0_0_0 = 1'b0;\n    selector_MUX_41_reg_39_0_0_0 = 1'b0;\n    selector_MUX_43_reg_40_0_0_0 = 1'b0;\n    selector_MUX_44_reg_41_0_0_0 = 1'b0;\n    selector_MUX_45_reg_42_0_0_0 = 1'b0;\n    selector_MUX_46_reg_43_0_0_0 = 1'b0;\n    selector_MUX_47_reg_44_0_0_0 = 1'b0;\n    selector_MUX_48_reg_45_0_0_0 = 1'b0;\n    selector_MUX_49_reg_46_0_0_0 = 1'b0;\n    selector_MUX_50_reg_47_0_0_0 = 1'b0;\n    selector_MUX_51_reg_48_0_0_0 = 1'b0;\n    selector_MUX_52_reg_49_0_0_0 = 1'b0;\n    selector_MUX_54_reg_50_0_0_0 = 1'b0;\n    wrenable_reg_0 = 1'b0;\n    wrenable_reg_1 = 1'b0;\n    wrenable_reg_10 = 1'b0;\n    wrenable_reg_11 = 1'b0;\n    wrenable_reg_12 = 1'b0;\n    wrenable_reg_13 = 1'b0;\n    wrenable_reg_14 = 1'b0;\n    wrenable_reg_15 = 1'b0;\n    wrenable_reg_16 = 1'b0;\n    wrenable_reg_17 = 1'b0;\n    wrenable_reg_18 = 1'b0;\n    wrenable_reg_19 = 1'b0;\n    wrenable_reg_2 = 1'b0;\n    wrenable_reg_20 = 1'b0;\n    wrenable_reg_21 = 1'b0;\n    wrenable_reg_22 = 1'b0;\n    wrenable_reg_23 = 1'b0;\n    wrenable_reg_24 = 1'b0;\n    wrenable_reg_25 = 1'b0;\n    wrenable_reg_26 = 1'b0;\n    wrenable_reg_27 = 1'b0;\n    wrenable_reg_28 = 1'b0;\n    wrenable_reg_29 = 1'b0;\n    wrenable_reg_3 = 1'b0;\n    wrenable_reg_30 = 1'b0;\n    wrenable_reg_31 = 1'b0;\n    wrenable_reg_32 = 1'b0;\n    wrenable_reg_33 = 1'b0;\n    wrenable_reg_34 = 1'b0;\n    wrenable_reg_35 = 1'b0;\n    wrenable_reg_36 = 1'b0;\n    wrenable_reg_37 = 1'b0;\n    wrenable_reg_38 = 1'b0;\n    wrenable_reg_39 = 1'b0;\n    wrenable_reg_4 = 1'b0;\n    wrenable_reg_40 = 1'b0;\n    wrenable_reg_41 = 1'b0;\n    wrenable_reg_42 = 1'b0;\n    wrenable_reg_43 = 1'b0;\n    wrenable_reg_44 = 1'b0;\n    wrenable_reg_45 = 1'b0;\n    wrenable_reg_46 = 1'b0;\n    wrenable_reg_47 = 1'b0;\n    wrenable_reg_48 = 1'b0;\n    wrenable_reg_49 = 1'b0;\n    wrenable_reg_5 = 1'b0;\n    wrenable_reg_50 = 1'b0;\n    wrenable_reg_51 = 1'b0;\n    wrenable_reg_52 = 1'b0;\n    wrenable_reg_53 = 1'b0;\n    wrenable_reg_54 = 1'b0;\n    wrenable_reg_55 = 1'b0;\n    wrenable_reg_56 = 1'b0;\n    wrenable_reg_57 = 1'b0;\n    wrenable_reg_58 = 1'b0;\n    wrenable_reg_59 = 1'b0;\n    wrenable_reg_6 = 1'b0;\n    wrenable_reg_60 = 1'b0;\n    wrenable_reg_61 = 1'b0;\n    wrenable_reg_62 = 1'b0;\n    wrenable_reg_63 = 1'b0;\n    wrenable_reg_64 = 1'b0;\n    wrenable_reg_65 = 1'b0;\n    wrenable_reg_66 = 1'b0;\n    wrenable_reg_67 = 1'b0;\n    wrenable_reg_68 = 1'b0;\n    wrenable_reg_69 = 1'b0;\n    wrenable_reg_7 = 1'b0;\n    wrenable_reg_70 = 1'b0;\n    wrenable_reg_71 = 1'b0;\n    wrenable_reg_72 = 1'b0;\n    wrenable_reg_73 = 1'b0;\n    wrenable_reg_74 = 1'b0;\n    wrenable_reg_75 = 1'b0;\n    wrenable_reg_76 = 1'b0;\n    wrenable_reg_77 = 1'b0;\n    wrenable_reg_78 = 1'b0;\n    wrenable_reg_8 = 1'b0;\n    wrenable_reg_9 = 1'b0;\n    case (_present_state)\n      S_0 :\n        if(start_port == 1'b1)\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;\n          wrenable_reg_0 = 1'b1;\n          wrenable_reg_1 = 1'b1;\n          wrenable_reg_10 = 1'b1;\n          wrenable_reg_11 = 1'b1;\n          wrenable_reg_12 = 1'b1;\n          wrenable_reg_13 = 1'b1;\n          wrenable_reg_14 = 1'b1;\n          wrenable_reg_15 = 1'b1;\n          wrenable_reg_16 = 1'b1;\n          wrenable_reg_17 = 1'b1;\n          wrenable_reg_18 = 1'b1;\n          wrenable_reg_19 = 1'b1;\n          wrenable_reg_2 = 1'b1;\n          wrenable_reg_20 = 1'b1;\n          wrenable_reg_21 = 1'b1;\n          wrenable_reg_22 = 1'b1;\n          wrenable_reg_23 = 1'b1;\n          wrenable_reg_24 = 1'b1;\n          wrenable_reg_25 = 1'b1;\n          wrenable_reg_3 = 1'b1;\n          wrenable_reg_4 = 1'b1;\n          wrenable_reg_5 = 1'b1;\n          wrenable_reg_6 = 1'b1;\n          wrenable_reg_7 = 1'b1;\n          wrenable_reg_8 = 1'b1;\n          wrenable_reg_9 = 1'b1;\n          _next_state = S_1;\n        end\n        else\n        begin\n          _next_state = S_0;\n        end\n      S_1 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;\n          selector_MUX_27_reg_26_0_0_0 = 1'b1;\n          wrenable_reg_26 = 1'b1;\n          _next_state = S_2;\n        end\n      S_2 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;\n          wrenable_reg_27 = 1'b1;\n          _next_state = S_3;\n        end\n      S_3 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1 = 1'b1;\n          wrenable_reg_28 = 1'b1;\n          _next_state = S_4;\n        end\n      S_4 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;\n          wrenable_reg_29 = 1'b1;\n          _next_state = S_5;\n        end\n      S_5 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;\n          wrenable_reg_30 = 1'b1;\n          _next_state = S_6;\n        end\n      S_6 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;\n          wrenable_reg_31 = 1'b1;\n          _next_state = S_7;\n        end\n      S_7 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;\n          wrenable_reg_32 = 1'b1;\n          _next_state = S_8;\n        end\n      S_8 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;\n          wrenable_reg_33 = 1'b1;\n          _next_state = S_9;\n        end\n      S_9 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;\n          wrenable_reg_34 = 1'b1;\n          _next_state = S_10;\n        end\n      S_10 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;\n          wrenable_reg_35 = 1'b1;\n          _next_state = S_11;\n        end\n      S_11 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;\n          wrenable_reg_36 = 1'b1;\n          _next_state = S_12;\n        end\n      S_12 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;\n          wrenable_reg_37 = 1'b1;\n          _next_state = S_13;\n        end\n      S_13 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;\n          wrenable_reg_38 = 1'b1;\n          _next_state = S_14;\n        end\n      S_14 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          wrenable_reg_39 = 1'b1;\n          _next_state = S_15;\n        end\n      S_15 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9 = 1'b1;\n          wrenable_reg_40 = 1'b1;\n          _next_state = S_16;\n        end\n      S_16 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4 = 1'b1;\n          wrenable_reg_41 = 1'b1;\n          _next_state = S_17;\n        end\n      S_17 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4 = 1'b1;\n          wrenable_reg_42 = 1'b1;\n          _next_state = S_18;\n        end\n      S_18 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1 = 1'b1;\n          wrenable_reg_43 = 1'b1;\n          _next_state = S_19;\n        end\n      S_19 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1 = 1'b1;\n          wrenable_reg_44 = 1'b1;\n          _next_state = S_20;\n        end\n      S_20 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1 = 1'b1;\n          wrenable_reg_45 = 1'b1;\n          _next_state = S_21;\n        end\n      S_21 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;\n          wrenable_reg_46 = 1'b1;\n          _next_state = S_22;\n        end\n      S_22 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;\n          wrenable_reg_47 = 1'b1;\n          _next_state = S_23;\n        end\n      S_23 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;\n          wrenable_reg_48 = 1'b1;\n          _next_state = S_24;\n        end\n      S_24 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;\n          wrenable_reg_49 = 1'b1;\n          _next_state = S_25;\n        end\n      S_25 :\n        begin\n          selector_MUX_54_reg_50_0_0_0 = 1'b1;\n          wrenable_reg_50 = 1'b1;\n          _next_state = S_26;\n        end\n      S_26 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;\n          wrenable_reg_50 = 1'b1;\n          wrenable_reg_51 = 1'b1;\n          wrenable_reg_52 = 1'b1;\n          wrenable_reg_53 = 1'b1;\n          wrenable_reg_54 = 1'b1;\n          wrenable_reg_55 = 1'b1;\n          wrenable_reg_56 = 1'b1;\n          wrenable_reg_57 = 1'b1;\n          wrenable_reg_58 = 1'b1;\n          wrenable_reg_59 = 1'b1;\n          wrenable_reg_60 = 1'b1;\n          wrenable_reg_61 = 1'b1;\n          wrenable_reg_62 = 1'b1;\n          wrenable_reg_63 = 1'b1;\n          wrenable_reg_64 = 1'b1;\n          wrenable_reg_65 = 1'b1;\n          wrenable_reg_66 = 1'b1;\n          wrenable_reg_67 = 1'b1;\n          wrenable_reg_68 = 1'b1;\n          wrenable_reg_69 = 1'b1;\n          wrenable_reg_70 = 1'b1;\n          wrenable_reg_71 = 1'b1;\n          wrenable_reg_72 = 1'b1;\n          wrenable_reg_73 = 1'b1;\n          wrenable_reg_74 = 1'b1;\n          wrenable_reg_75 = 1'b1;\n          wrenable_reg_76 = 1'b1;\n          wrenable_reg_77 = 1'b1;\n          _next_state = S_27;\n        end\n      S_27 :\n        begin\n          selector_MUX_25_reg_24_0_0_0 = 1'b1;\n          selector_MUX_28_reg_27_0_0_0 = 1'b1;\n          selector_MUX_29_reg_28_0_0_0 = 1'b1;\n          selector_MUX_30_reg_29_0_0_0 = 1'b1;\n          selector_MUX_32_reg_30_0_0_0 = 1'b1;\n          selector_MUX_33_reg_31_0_0_0 = 1'b1;\n          selector_MUX_34_reg_32_0_0_0 = 1'b1;\n          selector_MUX_35_reg_33_0_0_0 = 1'b1;\n          selector_MUX_36_reg_34_0_0_0 = 1'b1;\n          selector_MUX_37_reg_35_0_0_0 = 1'b1;\n          selector_MUX_38_reg_36_0_0_0 = 1'b1;\n          selector_MUX_39_reg_37_0_0_0 = 1'b1;\n          selector_MUX_40_reg_38_0_0_0 = 1'b1;\n          selector_MUX_41_reg_39_0_0_0 = 1'b1;\n          selector_MUX_43_reg_40_0_0_0 = 1'b1;\n          selector_MUX_44_reg_41_0_0_0 = 1'b1;\n          selector_MUX_45_reg_42_0_0_0 = 1'b1;\n          selector_MUX_46_reg_43_0_0_0 = 1'b1;\n          selector_MUX_47_reg_44_0_0_0 = 1'b1;\n          selector_MUX_48_reg_45_0_0_0 = 1'b1;\n          selector_MUX_49_reg_46_0_0_0 = 1'b1;\n          selector_MUX_50_reg_47_0_0_0 = 1'b1;\n          selector_MUX_51_reg_48_0_0_0 = 1'b1;\n          selector_MUX_52_reg_49_0_0_0 = 1'b1;\n          wrenable_reg_24 = 1'b1;\n          wrenable_reg_26 = 1'b1;\n          wrenable_reg_27 = 1'b1;\n          wrenable_reg_28 = 1'b1;\n          wrenable_reg_29 = 1'b1;\n          wrenable_reg_30 = 1'b1;\n          wrenable_reg_31 = 1'b1;\n          wrenable_reg_32 = 1'b1;\n          wrenable_reg_33 = 1'b1;\n          wrenable_reg_34 = 1'b1;\n          wrenable_reg_35 = 1'b1;\n          wrenable_reg_36 = 1'b1;\n          wrenable_reg_37 = 1'b1;\n          wrenable_reg_38 = 1'b1;\n          wrenable_reg_39 = 1'b1;\n          wrenable_reg_40 = 1'b1;\n          wrenable_reg_41 = 1'b1;\n          wrenable_reg_42 = 1'b1;\n          wrenable_reg_43 = 1'b1;\n          wrenable_reg_44 = 1'b1;\n          wrenable_reg_45 = 1'b1;\n          wrenable_reg_46 = 1'b1;\n          wrenable_reg_47 = 1'b1;\n          wrenable_reg_48 = 1'b1;\n          wrenable_reg_49 = 1'b1;\n          wrenable_reg_78 = 1'b1;\n          if (OUT_CONDITION_keccak_423514_423900 == 1'b1)\n            begin\n              _next_state = S_28;\n              selector_MUX_25_reg_24_0_0_0 = 1'b0;\n              selector_MUX_28_reg_27_0_0_0 = 1'b0;\n              selector_MUX_29_reg_28_0_0_0 = 1'b0;\n              selector_MUX_30_reg_29_0_0_0 = 1'b0;\n              selector_MUX_32_reg_30_0_0_0 = 1'b0;\n              selector_MUX_33_reg_31_0_0_0 = 1'b0;\n              selector_MUX_34_reg_32_0_0_0 = 1'b0;\n              selector_MUX_35_reg_33_0_0_0 = 1'b0;\n              selector_MUX_36_reg_34_0_0_0 = 1'b0;\n              selector_MUX_37_reg_35_0_0_0 = 1'b0;\n              selector_MUX_38_reg_36_0_0_0 = 1'b0;\n              selector_MUX_39_reg_37_0_0_0 = 1'b0;\n              selector_MUX_40_reg_38_0_0_0 = 1'b0;\n              selector_MUX_41_reg_39_0_0_0 = 1'b0;\n              selector_MUX_43_reg_40_0_0_0 = 1'b0;\n              selector_MUX_44_reg_41_0_0_0 = 1'b0;\n              selector_MUX_45_reg_42_0_0_0 = 1'b0;\n              selector_MUX_46_reg_43_0_0_0 = 1'b0;\n              selector_MUX_47_reg_44_0_0_0 = 1'b0;\n              selector_MUX_48_reg_45_0_0_0 = 1'b0;\n              selector_MUX_49_reg_46_0_0_0 = 1'b0;\n              selector_MUX_50_reg_47_0_0_0 = 1'b0;\n              selector_MUX_51_reg_48_0_0_0 = 1'b0;\n              selector_MUX_52_reg_49_0_0_0 = 1'b0;\n              wrenable_reg_24 = 1'b0;\n              wrenable_reg_26 = 1'b0;\n              wrenable_reg_27 = 1'b0;\n              wrenable_reg_28 = 1'b0;\n              wrenable_reg_29 = 1'b0;\n              wrenable_reg_30 = 1'b0;\n              wrenable_reg_31 = 1'b0;\n              wrenable_reg_32 = 1'b0;\n              wrenable_reg_33 = 1'b0;\n              wrenable_reg_34 = 1'b0;\n              wrenable_reg_35 = 1'b0;\n              wrenable_reg_36 = 1'b0;\n              wrenable_reg_37 = 1'b0;\n              wrenable_reg_38 = 1'b0;\n              wrenable_reg_39 = 1'b0;\n              wrenable_reg_40 = 1'b0;\n              wrenable_reg_41 = 1'b0;\n              wrenable_reg_42 = 1'b0;\n              wrenable_reg_43 = 1'b0;\n              wrenable_reg_44 = 1'b0;\n              wrenable_reg_45 = 1'b0;\n              wrenable_reg_46 = 1'b0;\n              wrenable_reg_47 = 1'b0;\n              wrenable_reg_48 = 1'b0;\n              wrenable_reg_49 = 1'b0;\n            end\n          else\n            begin\n              _next_state = S_26;\n              wrenable_reg_78 = 1'b0;\n            end\n        end\n      S_28 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;\n          _next_state = S_29;\n        end\n      S_29 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;\n          _next_state = S_30;\n        end\n      S_30 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;\n          _next_state = S_31;\n        end\n      S_31 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1 = 1'b1;\n          _next_state = S_32;\n        end\n      S_32 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;\n          _next_state = S_33;\n        end\n      S_33 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;\n          _next_state = S_34;\n        end\n      S_34 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;\n          _next_state = S_35;\n        end\n      S_35 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;\n          _next_state = S_36;\n        end\n      S_36 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;\n          _next_state = S_37;\n        end\n      S_37 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;\n          _next_state = S_38;\n        end\n      S_38 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;\n          _next_state = S_39;\n        end\n      S_39 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;\n          _next_state = S_40;\n        end\n      S_40 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;\n          _next_state = S_41;\n        end\n      S_41 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;\n          _next_state = S_42;\n        end\n      S_42 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0 = 1'b1;\n          _next_state = S_43;\n        end\n      S_43 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9 = 1'b1;\n          _next_state = S_44;\n        end\n      S_44 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4 = 1'b1;\n          _next_state = S_45;\n        end\n      S_45 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4 = 1'b1;\n          _next_state = S_46;\n        end\n      S_46 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1 = 1'b1;\n          _next_state = S_47;\n        end\n      S_47 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1 = 1'b1;\n          _next_state = S_48;\n        end\n      S_48 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1 = 1'b1;\n          _next_state = S_49;\n        end\n      S_49 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7 = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;\n          _next_state = S_50;\n        end\n      S_50 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;\n          _next_state = S_51;\n        end\n      S_51 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;\n          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;\n          _next_state = S_52;\n        end\n      S_52 :\n        begin\n          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2 = 1'b1;\n          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;\n          _next_state = S_53;\n          done_port = 1'b1;\n        end\n      S_53 :\n        begin\n          _next_state = S_0;\n        end\n      default :\n        begin\n          _next_state = S_0;\n        end\n    endcase\n  end\nendmodule\n\n// This component is part of the BAMBU/PANDA IP LIBRARY\n// Copyright (C) 2004-2023 Politecnico di Milano\n// Author(s): Marco Lattuada <marco.lattuada@polimi.it>\n// License: PANDA_LGPLv3\n`timescale 1ns / 1ps\nmodule flipflop_AR(clock,\n  reset,\n  in1,\n  out1);\n  parameter BITSIZE_in1=1,\n    BITSIZE_out1=1;\n  // IN\n  input clock;\n  input reset;\n  input in1;\n  // OUT\n  output out1;\n  \n  reg reg_out1 =0;\n  assign out1 = reg_out1;\n  always @(posedge clock )\n    if (reset == 1'b0)\n      reg_out1 <= {BITSIZE_out1{1'b0}};\n    else\n      reg_out1 <= in1;\nendmodule\n\n// Top component for keccak\n// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.\n// Author(s): Component automatically generated by bambu\n// License: THIS COMPONENT IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n`timescale 1ns / 1ps\nmodule _keccak(clock,\n  reset,\n  start_port,\n  done_port,\n  Pd226,\n  S_oe_ram,\n  S_we_ram,\n  S_addr_ram,\n  S_Wdata_ram,\n  S_data_ram_size,\n  M_Rdata_ram,\n  M_DataRdy,\n  Sin_Rdata_ram,\n  Sin_DataRdy,\n  Min_oe_ram,\n  Min_we_ram,\n  Min_addr_ram,\n  Min_Wdata_ram,\n  Min_data_ram_size,\n  Sout_Rdata_ram,\n  Sout_DataRdy,\n  Mout_oe_ram,\n  Mout_we_ram,\n  Mout_addr_ram,\n  Mout_Wdata_ram,\n  Mout_data_ram_size);\n  // IN\n  input clock;\n  input reset;\n  input start_port;\n  input [31:0] Pd226;\n  input S_oe_ram;\n  input S_we_ram;\n  input [31:0] S_addr_ram;\n  input [63:0] S_Wdata_ram;\n  input [6:0] S_data_ram_size;\n  input [63:0] M_Rdata_ram;\n  input M_DataRdy;\n  input [63:0] Sin_Rdata_ram;\n  input Sin_DataRdy;\n  input Min_oe_ram;\n  input Min_we_ram;\n  input [31:0] Min_addr_ram;\n  input [63:0] Min_Wdata_ram;\n  input [6:0] Min_data_ram_size;\n  // OUT\n  output done_port;\n  output [63:0] Sout_Rdata_ram;\n  output Sout_DataRdy;\n  output Mout_oe_ram;\n  output Mout_we_ram;\n  output [31:0] Mout_addr_ram;\n  output [63:0] Mout_Wdata_ram;\n  output [6:0] Mout_data_ram_size;\n  // Component and signal declarations\n  wire OUT_CONDITION_keccak_423514_423900;\n  wire done_delayed_REG_signal_in;\n  wire done_delayed_REG_signal_out;\n  wire fuselector_BMEMORY_CTRL_35_i0_LOAD;\n  wire fuselector_BMEMORY_CTRL_35_i0_STORE;\n  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0;\n  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1;\n  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10;\n  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11;\n  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12;\n  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2;\n  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3;\n  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4;\n  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5;\n  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6;\n  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7;\n  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8;\n  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9;\n  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0;\n  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1;\n  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2;\n  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3;\n  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4;\n  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5;\n  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0;\n  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1;\n  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2;\n  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0;\n  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1;\n  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0;\n  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1;\n  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10;\n  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11;\n  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12;\n  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2;\n  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3;\n  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4;\n  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5;\n  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6;\n  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7;\n  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8;\n  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9;\n  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0;\n  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1;\n  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2;\n  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3;\n  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4;\n  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5;\n  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6;\n  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0;\n  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1;\n  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2;\n  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0;\n  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1;\n  wire selector_MUX_25_reg_24_0_0_0;\n  wire selector_MUX_27_reg_26_0_0_0;\n  wire selector_MUX_28_reg_27_0_0_0;\n  wire selector_MUX_29_reg_28_0_0_0;\n  wire selector_MUX_30_reg_29_0_0_0;\n  wire selector_MUX_32_reg_30_0_0_0;\n  wire selector_MUX_33_reg_31_0_0_0;\n  wire selector_MUX_34_reg_32_0_0_0;\n  wire selector_MUX_35_reg_33_0_0_0;\n  wire selector_MUX_36_reg_34_0_0_0;\n  wire selector_MUX_37_reg_35_0_0_0;\n  wire selector_MUX_38_reg_36_0_0_0;\n  wire selector_MUX_39_reg_37_0_0_0;\n  wire selector_MUX_40_reg_38_0_0_0;\n  wire selector_MUX_41_reg_39_0_0_0;\n  wire selector_MUX_43_reg_40_0_0_0;\n  wire selector_MUX_44_reg_41_0_0_0;\n  wire selector_MUX_45_reg_42_0_0_0;\n  wire selector_MUX_46_reg_43_0_0_0;\n  wire selector_MUX_47_reg_44_0_0_0;\n  wire selector_MUX_48_reg_45_0_0_0;\n  wire selector_MUX_49_reg_46_0_0_0;\n  wire selector_MUX_50_reg_47_0_0_0;\n  wire selector_MUX_51_reg_48_0_0_0;\n  wire selector_MUX_52_reg_49_0_0_0;\n  wire selector_MUX_54_reg_50_0_0_0;\n  wire wrenable_reg_0;\n  wire wrenable_reg_1;\n  wire wrenable_reg_10;\n  wire wrenable_reg_11;\n  wire wrenable_reg_12;\n  wire wrenable_reg_13;\n  wire wrenable_reg_14;\n  wire wrenable_reg_15;\n  wire wrenable_reg_16;\n  wire wrenable_reg_17;\n  wire wrenable_reg_18;\n  wire wrenable_reg_19;\n  wire wrenable_reg_2;\n  wire wrenable_reg_20;\n  wire wrenable_reg_21;\n  wire wrenable_reg_22;\n  wire wrenable_reg_23;\n  wire wrenable_reg_24;\n  wire wrenable_reg_25;\n  wire wrenable_reg_26;\n  wire wrenable_reg_27;\n  wire wrenable_reg_28;\n  wire wrenable_reg_29;\n  wire wrenable_reg_3;\n  wire wrenable_reg_30;\n  wire wrenable_reg_31;\n  wire wrenable_reg_32;\n  wire wrenable_reg_33;\n  wire wrenable_reg_34;\n  wire wrenable_reg_35;\n  wire wrenable_reg_36;\n  wire wrenable_reg_37;\n  wire wrenable_reg_38;\n  wire wrenable_reg_39;\n  wire wrenable_reg_4;\n  wire wrenable_reg_40;\n  wire wrenable_reg_41;\n  wire wrenable_reg_42;\n  wire wrenable_reg_43;\n  wire wrenable_reg_44;\n  wire wrenable_reg_45;\n  wire wrenable_reg_46;\n  wire wrenable_reg_47;\n  wire wrenable_reg_48;\n  wire wrenable_reg_49;\n  wire wrenable_reg_5;\n  wire wrenable_reg_50;\n  wire wrenable_reg_51;\n  wire wrenable_reg_52;\n  wire wrenable_reg_53;\n  wire wrenable_reg_54;\n  wire wrenable_reg_55;\n  wire wrenable_reg_56;\n  wire wrenable_reg_57;\n  wire wrenable_reg_58;\n  wire wrenable_reg_59;\n  wire wrenable_reg_6;\n  wire wrenable_reg_60;\n  wire wrenable_reg_61;\n  wire wrenable_reg_62;\n  wire wrenable_reg_63;\n  wire wrenable_reg_64;\n  wire wrenable_reg_65;\n  wire wrenable_reg_66;\n  wire wrenable_reg_67;\n  wire wrenable_reg_68;\n  wire wrenable_reg_69;\n  wire wrenable_reg_7;\n  wire wrenable_reg_70;\n  wire wrenable_reg_71;\n  wire wrenable_reg_72;\n  wire wrenable_reg_73;\n  wire wrenable_reg_74;\n  wire wrenable_reg_75;\n  wire wrenable_reg_76;\n  wire wrenable_reg_77;\n  wire wrenable_reg_78;\n  wire wrenable_reg_8;\n  wire wrenable_reg_9;\n  \n  controller_keccak Controller_i (.done_port(done_delayed_REG_signal_in),\n    .fuselector_BMEMORY_CTRL_35_i0_LOAD(fuselector_BMEMORY_CTRL_35_i0_LOAD),\n    .fuselector_BMEMORY_CTRL_35_i0_STORE(fuselector_BMEMORY_CTRL_35_i0_STORE),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0(selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1(selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2(selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0(selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1(selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0(selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1(selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2(selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0(selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1(selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1),\n    .selector_MUX_25_reg_24_0_0_0(selector_MUX_25_reg_24_0_0_0),\n    .selector_MUX_27_reg_26_0_0_0(selector_MUX_27_reg_26_0_0_0),\n    .selector_MUX_28_reg_27_0_0_0(selector_MUX_28_reg_27_0_0_0),\n    .selector_MUX_29_reg_28_0_0_0(selector_MUX_29_reg_28_0_0_0),\n    .selector_MUX_30_reg_29_0_0_0(selector_MUX_30_reg_29_0_0_0),\n    .selector_MUX_32_reg_30_0_0_0(selector_MUX_32_reg_30_0_0_0),\n    .selector_MUX_33_reg_31_0_0_0(selector_MUX_33_reg_31_0_0_0),\n    .selector_MUX_34_reg_32_0_0_0(selector_MUX_34_reg_32_0_0_0),\n    .selector_MUX_35_reg_33_0_0_0(selector_MUX_35_reg_33_0_0_0),\n    .selector_MUX_36_reg_34_0_0_0(selector_MUX_36_reg_34_0_0_0),\n    .selector_MUX_37_reg_35_0_0_0(selector_MUX_37_reg_35_0_0_0),\n    .selector_MUX_38_reg_36_0_0_0(selector_MUX_38_reg_36_0_0_0),\n    .selector_MUX_39_reg_37_0_0_0(selector_MUX_39_reg_37_0_0_0),\n    .selector_MUX_40_reg_38_0_0_0(selector_MUX_40_reg_38_0_0_0),\n    .selector_MUX_41_reg_39_0_0_0(selector_MUX_41_reg_39_0_0_0),\n    .selector_MUX_43_reg_40_0_0_0(selector_MUX_43_reg_40_0_0_0),\n    .selector_MUX_44_reg_41_0_0_0(selector_MUX_44_reg_41_0_0_0),\n    .selector_MUX_45_reg_42_0_0_0(selector_MUX_45_reg_42_0_0_0),\n    .selector_MUX_46_reg_43_0_0_0(selector_MUX_46_reg_43_0_0_0),\n    .selector_MUX_47_reg_44_0_0_0(selector_MUX_47_reg_44_0_0_0),\n    .selector_MUX_48_reg_45_0_0_0(selector_MUX_48_reg_45_0_0_0),\n    .selector_MUX_49_reg_46_0_0_0(selector_MUX_49_reg_46_0_0_0),\n    .selector_MUX_50_reg_47_0_0_0(selector_MUX_50_reg_47_0_0_0),\n    .selector_MUX_51_reg_48_0_0_0(selector_MUX_51_reg_48_0_0_0),\n    .selector_MUX_52_reg_49_0_0_0(selector_MUX_52_reg_49_0_0_0),\n    .selector_MUX_54_reg_50_0_0_0(selector_MUX_54_reg_50_0_0_0),\n    .wrenable_reg_0(wrenable_reg_0),\n    .wrenable_reg_1(wrenable_reg_1),\n    .wrenable_reg_10(wrenable_reg_10),\n    .wrenable_reg_11(wrenable_reg_11),\n    .wrenable_reg_12(wrenable_reg_12),\n    .wrenable_reg_13(wrenable_reg_13),\n    .wrenable_reg_14(wrenable_reg_14),\n    .wrenable_reg_15(wrenable_reg_15),\n    .wrenable_reg_16(wrenable_reg_16),\n    .wrenable_reg_17(wrenable_reg_17),\n    .wrenable_reg_18(wrenable_reg_18),\n    .wrenable_reg_19(wrenable_reg_19),\n    .wrenable_reg_2(wrenable_reg_2),\n    .wrenable_reg_20(wrenable_reg_20),\n    .wrenable_reg_21(wrenable_reg_21),\n    .wrenable_reg_22(wrenable_reg_22),\n    .wrenable_reg_23(wrenable_reg_23),\n    .wrenable_reg_24(wrenable_reg_24),\n    .wrenable_reg_25(wrenable_reg_25),\n    .wrenable_reg_26(wrenable_reg_26),\n    .wrenable_reg_27(wrenable_reg_27),\n    .wrenable_reg_28(wrenable_reg_28),\n    .wrenable_reg_29(wrenable_reg_29),\n    .wrenable_reg_3(wrenable_reg_3),\n    .wrenable_reg_30(wrenable_reg_30),\n    .wrenable_reg_31(wrenable_reg_31),\n    .wrenable_reg_32(wrenable_reg_32),\n    .wrenable_reg_33(wrenable_reg_33),\n    .wrenable_reg_34(wrenable_reg_34),\n    .wrenable_reg_35(wrenable_reg_35),\n    .wrenable_reg_36(wrenable_reg_36),\n    .wrenable_reg_37(wrenable_reg_37),\n    .wrenable_reg_38(wrenable_reg_38),\n    .wrenable_reg_39(wrenable_reg_39),\n    .wrenable_reg_4(wrenable_reg_4),\n    .wrenable_reg_40(wrenable_reg_40),\n    .wrenable_reg_41(wrenable_reg_41),\n    .wrenable_reg_42(wrenable_reg_42),\n    .wrenable_reg_43(wrenable_reg_43),\n    .wrenable_reg_44(wrenable_reg_44),\n    .wrenable_reg_45(wrenable_reg_45),\n    .wrenable_reg_46(wrenable_reg_46),\n    .wrenable_reg_47(wrenable_reg_47),\n    .wrenable_reg_48(wrenable_reg_48),\n    .wrenable_reg_49(wrenable_reg_49),\n    .wrenable_reg_5(wrenable_reg_5),\n    .wrenable_reg_50(wrenable_reg_50),\n    .wrenable_reg_51(wrenable_reg_51),\n    .wrenable_reg_52(wrenable_reg_52),\n    .wrenable_reg_53(wrenable_reg_53),\n    .wrenable_reg_54(wrenable_reg_54),\n    .wrenable_reg_55(wrenable_reg_55),\n    .wrenable_reg_56(wrenable_reg_56),\n    .wrenable_reg_57(wrenable_reg_57),\n    .wrenable_reg_58(wrenable_reg_58),\n    .wrenable_reg_59(wrenable_reg_59),\n    .wrenable_reg_6(wrenable_reg_6),\n    .wrenable_reg_60(wrenable_reg_60),\n    .wrenable_reg_61(wrenable_reg_61),\n    .wrenable_reg_62(wrenable_reg_62),\n    .wrenable_reg_63(wrenable_reg_63),\n    .wrenable_reg_64(wrenable_reg_64),\n    .wrenable_reg_65(wrenable_reg_65),\n    .wrenable_reg_66(wrenable_reg_66),\n    .wrenable_reg_67(wrenable_reg_67),\n    .wrenable_reg_68(wrenable_reg_68),\n    .wrenable_reg_69(wrenable_reg_69),\n    .wrenable_reg_7(wrenable_reg_7),\n    .wrenable_reg_70(wrenable_reg_70),\n    .wrenable_reg_71(wrenable_reg_71),\n    .wrenable_reg_72(wrenable_reg_72),\n    .wrenable_reg_73(wrenable_reg_73),\n    .wrenable_reg_74(wrenable_reg_74),\n    .wrenable_reg_75(wrenable_reg_75),\n    .wrenable_reg_76(wrenable_reg_76),\n    .wrenable_reg_77(wrenable_reg_77),\n    .wrenable_reg_78(wrenable_reg_78),\n    .wrenable_reg_8(wrenable_reg_8),\n    .wrenable_reg_9(wrenable_reg_9),\n    .OUT_CONDITION_keccak_423514_423900(OUT_CONDITION_keccak_423514_423900),\n    .clock(clock),\n    .reset(reset),\n    .start_port(start_port));\n  datapath_keccak #(.MEM_var_423955_423514(1024)) Datapath_i (.Sout_Rdata_ram(Sout_Rdata_ram),\n    .Sout_DataRdy(Sout_DataRdy),\n    .Mout_oe_ram(Mout_oe_ram),\n    .Mout_we_ram(Mout_we_ram),\n    .Mout_addr_ram(Mout_addr_ram),\n    .Mout_Wdata_ram(Mout_Wdata_ram),\n    .Mout_data_ram_size(Mout_data_ram_size),\n    .OUT_CONDITION_keccak_423514_423900(OUT_CONDITION_keccak_423514_423900),\n    .clock(clock),\n    .reset(reset),\n    .in_port_Pd226(Pd226),\n    .S_oe_ram(S_oe_ram),\n    .S_we_ram(S_we_ram),\n    .S_addr_ram(S_addr_ram),\n    .S_Wdata_ram(S_Wdata_ram),\n    .S_data_ram_size(S_data_ram_size),\n    .M_Rdata_ram(M_Rdata_ram),\n    .M_DataRdy(M_DataRdy),\n    .Sin_Rdata_ram(Sin_Rdata_ram),\n    .Sin_DataRdy(Sin_DataRdy),\n    .Min_oe_ram(Min_oe_ram),\n    .Min_we_ram(Min_we_ram),\n    .Min_addr_ram(Min_addr_ram),\n    .Min_Wdata_ram(Min_Wdata_ram),\n    .Min_data_ram_size(Min_data_ram_size),\n    .fuselector_BMEMORY_CTRL_35_i0_LOAD(fuselector_BMEMORY_CTRL_35_i0_LOAD),\n    .fuselector_BMEMORY_CTRL_35_i0_STORE(fuselector_BMEMORY_CTRL_35_i0_STORE),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0(selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1(selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2(selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0(selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0),\n    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1(selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0(selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1(selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2(selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0(selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0),\n    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1(selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1),\n    .selector_MUX_25_reg_24_0_0_0(selector_MUX_25_reg_24_0_0_0),\n    .selector_MUX_27_reg_26_0_0_0(selector_MUX_27_reg_26_0_0_0),\n    .selector_MUX_28_reg_27_0_0_0(selector_MUX_28_reg_27_0_0_0),\n    .selector_MUX_29_reg_28_0_0_0(selector_MUX_29_reg_28_0_0_0),\n    .selector_MUX_30_reg_29_0_0_0(selector_MUX_30_reg_29_0_0_0),\n    .selector_MUX_32_reg_30_0_0_0(selector_MUX_32_reg_30_0_0_0),\n    .selector_MUX_33_reg_31_0_0_0(selector_MUX_33_reg_31_0_0_0),\n    .selector_MUX_34_reg_32_0_0_0(selector_MUX_34_reg_32_0_0_0),\n    .selector_MUX_35_reg_33_0_0_0(selector_MUX_35_reg_33_0_0_0),\n    .selector_MUX_36_reg_34_0_0_0(selector_MUX_36_reg_34_0_0_0),\n    .selector_MUX_37_reg_35_0_0_0(selector_MUX_37_reg_35_0_0_0),\n    .selector_MUX_38_reg_36_0_0_0(selector_MUX_38_reg_36_0_0_0),\n    .selector_MUX_39_reg_37_0_0_0(selector_MUX_39_reg_37_0_0_0),\n    .selector_MUX_40_reg_38_0_0_0(selector_MUX_40_reg_38_0_0_0),\n    .selector_MUX_41_reg_39_0_0_0(selector_MUX_41_reg_39_0_0_0),\n    .selector_MUX_43_reg_40_0_0_0(selector_MUX_43_reg_40_0_0_0),\n    .selector_MUX_44_reg_41_0_0_0(selector_MUX_44_reg_41_0_0_0),\n    .selector_MUX_45_reg_42_0_0_0(selector_MUX_45_reg_42_0_0_0),\n    .selector_MUX_46_reg_43_0_0_0(selector_MUX_46_reg_43_0_0_0),\n    .selector_MUX_47_reg_44_0_0_0(selector_MUX_47_reg_44_0_0_0),\n    .selector_MUX_48_reg_45_0_0_0(selector_MUX_48_reg_45_0_0_0),\n    .selector_MUX_49_reg_46_0_0_0(selector_MUX_49_reg_46_0_0_0),\n    .selector_MUX_50_reg_47_0_0_0(selector_MUX_50_reg_47_0_0_0),\n    .selector_MUX_51_reg_48_0_0_0(selector_MUX_51_reg_48_0_0_0),\n    .selector_MUX_52_reg_49_0_0_0(selector_MUX_52_reg_49_0_0_0),\n    .selector_MUX_54_reg_50_0_0_0(selector_MUX_54_reg_50_0_0_0),\n    .wrenable_reg_0(wrenable_reg_0),\n    .wrenable_reg_1(wrenable_reg_1),\n    .wrenable_reg_10(wrenable_reg_10),\n    .wrenable_reg_11(wrenable_reg_11),\n    .wrenable_reg_12(wrenable_reg_12),\n    .wrenable_reg_13(wrenable_reg_13),\n    .wrenable_reg_14(wrenable_reg_14),\n    .wrenable_reg_15(wrenable_reg_15),\n    .wrenable_reg_16(wrenable_reg_16),\n    .wrenable_reg_17(wrenable_reg_17),\n    .wrenable_reg_18(wrenable_reg_18),\n    .wrenable_reg_19(wrenable_reg_19),\n    .wrenable_reg_2(wrenable_reg_2),\n    .wrenable_reg_20(wrenable_reg_20),\n    .wrenable_reg_21(wrenable_reg_21),\n    .wrenable_reg_22(wrenable_reg_22),\n    .wrenable_reg_23(wrenable_reg_23),\n    .wrenable_reg_24(wrenable_reg_24),\n    .wrenable_reg_25(wrenable_reg_25),\n    .wrenable_reg_26(wrenable_reg_26),\n    .wrenable_reg_27(wrenable_reg_27),\n    .wrenable_reg_28(wrenable_reg_28),\n    .wrenable_reg_29(wrenable_reg_29),\n    .wrenable_reg_3(wrenable_reg_3),\n    .wrenable_reg_30(wrenable_reg_30),\n    .wrenable_reg_31(wrenable_reg_31),\n    .wrenable_reg_32(wrenable_reg_32),\n    .wrenable_reg_33(wrenable_reg_33),\n    .wrenable_reg_34(wrenable_reg_34),\n    .wrenable_reg_35(wrenable_reg_35),\n    .wrenable_reg_36(wrenable_reg_36),\n    .wrenable_reg_37(wrenable_reg_37),\n    .wrenable_reg_38(wrenable_reg_38),\n    .wrenable_reg_39(wrenable_reg_39),\n    .wrenable_reg_4(wrenable_reg_4),\n    .wrenable_reg_40(wrenable_reg_40),\n    .wrenable_reg_41(wrenable_reg_41),\n    .wrenable_reg_42(wrenable_reg_42),\n    .wrenable_reg_43(wrenable_reg_43),\n    .wrenable_reg_44(wrenable_reg_44),\n    .wrenable_reg_45(wrenable_reg_45),\n    .wrenable_reg_46(wrenable_reg_46),\n    .wrenable_reg_47(wrenable_reg_47),\n    .wrenable_reg_48(wrenable_reg_48),\n    .wrenable_reg_49(wrenable_reg_49),\n    .wrenable_reg_5(wrenable_reg_5),\n    .wrenable_reg_50(wrenable_reg_50),\n    .wrenable_reg_51(wrenable_reg_51),\n    .wrenable_reg_52(wrenable_reg_52),\n    .wrenable_reg_53(wrenable_reg_53),\n    .wrenable_reg_54(wrenable_reg_54),\n    .wrenable_reg_55(wrenable_reg_55),\n    .wrenable_reg_56(wrenable_reg_56),\n    .wrenable_reg_57(wrenable_reg_57),\n    .wrenable_reg_58(wrenable_reg_58),\n    .wrenable_reg_59(wrenable_reg_59),\n    .wrenable_reg_6(wrenable_reg_6),\n    .wrenable_reg_60(wrenable_reg_60),\n    .wrenable_reg_61(wrenable_reg_61),\n    .wrenable_reg_62(wrenable_reg_62),\n    .wrenable_reg_63(wrenable_reg_63),\n    .wrenable_reg_64(wrenable_reg_64),\n    .wrenable_reg_65(wrenable_reg_65),\n    .wrenable_reg_66(wrenable_reg_66),\n    .wrenable_reg_67(wrenable_reg_67),\n    .wrenable_reg_68(wrenable_reg_68),\n    .wrenable_reg_69(wrenable_reg_69),\n    .wrenable_reg_7(wrenable_reg_7),\n    .wrenable_reg_70(wrenable_reg_70),\n    .wrenable_reg_71(wrenable_reg_71),\n    .wrenable_reg_72(wrenable_reg_72),\n    .wrenable_reg_73(wrenable_reg_73),\n    .wrenable_reg_74(wrenable_reg_74),\n    .wrenable_reg_75(wrenable_reg_75),\n    .wrenable_reg_76(wrenable_reg_76),\n    .wrenable_reg_77(wrenable_reg_77),\n    .wrenable_reg_78(wrenable_reg_78),\n    .wrenable_reg_8(wrenable_reg_8),\n    .wrenable_reg_9(wrenable_reg_9));\n  flipflop_AR #(.BITSIZE_in1(1),\n    .BITSIZE_out1(1)) done_delayed_REG (.out1(done_delayed_REG_signal_out),\n    .clock(clock),\n    .reset(reset),\n    .in1(done_delayed_REG_signal_in));\n  // io-signal post fix\n  assign done_port = done_delayed_REG_signal_out;\n\nendmodule\n\n// Minimal interface for function: keccak\n// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.\n// Author(s): Component automatically generated by bambu\n// License: THIS COMPONENT IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n`timescale 1ns / 1ps\nmodule keccak(clk,\n  reset,\n  start_port,\n  Pd226,\n  M_Rdata_ram,\n  M_DataRdy,\n  done_port,\n  Mout_oe_ram,\n  Mout_we_ram,\n  Mout_addr_ram,\n  Mout_Wdata_ram,\n  Mout_data_ram_size);\n  // IN\n  input clk;\n  input reset;\n  input start_port;\n  input [31:0] Pd226;\n  input [63:0] M_Rdata_ram;\n  input M_DataRdy;\n  // OUT\n  output done_port;\n  output Mout_oe_ram;\n  output Mout_we_ram;\n  output [31:0] Mout_addr_ram;\n  output [63:0] Mout_Wdata_ram;\n  output [6:0] Mout_data_ram_size;\n  // Component and signal declarations\n  wire M_DataRdy_INT;\n  wire [63:0] M_Rdata_ram_INT;\n  wire [63:0] Mout_Wdata_ram_INT;\n  wire [31:0] Mout_addr_ram_INT;\n  wire [6:0] Mout_data_ram_size_INT;\n  wire Mout_oe_ram_INT;\n  wire Mout_we_ram_INT;\n  wire Sout_DataRdy_INT;\n  wire [63:0] Sout_Rdata_ram_INT;\n  \n  _keccak _keccak_i0 (.done_port(done_port),\n    .Sout_Rdata_ram(Sout_Rdata_ram_INT),\n    .Sout_DataRdy(Sout_DataRdy_INT),\n    .Mout_oe_ram(Mout_oe_ram_INT),\n    .Mout_we_ram(Mout_we_ram_INT),\n    .Mout_addr_ram(Mout_addr_ram_INT),\n    .Mout_Wdata_ram(Mout_Wdata_ram_INT),\n    .Mout_data_ram_size(Mout_data_ram_size_INT),\n    .clock(clk),\n    .reset(reset),\n    .start_port(start_port),\n    .Pd226(Pd226),\n    .S_oe_ram(Mout_oe_ram_INT),\n    .S_we_ram(Mout_we_ram_INT),\n    .S_addr_ram(Mout_addr_ram_INT),\n    .S_Wdata_ram(Mout_Wdata_ram_INT),\n    .S_data_ram_size(Mout_data_ram_size_INT),\n    .M_Rdata_ram(Sout_Rdata_ram_INT),\n    .M_DataRdy(Sout_DataRdy_INT),\n    .Sin_Rdata_ram(M_Rdata_ram_INT),\n    .Sin_DataRdy(M_DataRdy_INT),\n    .Min_oe_ram(1'b0),\n    .Min_we_ram(1'b0),\n    .Min_addr_ram(32'b00000000000000000000000000000000),\n    .Min_Wdata_ram(64'b0000000000000000000000000000000000000000000000000000000000000000),\n    .Min_data_ram_size(7'b0000000));\n  // io-signal post fix\n  assign M_Rdata_ram_INT = M_Rdata_ram;\n  assign M_DataRdy_INT = M_DataRdy;\n  assign Mout_oe_ram = Mout_oe_ram_INT;\n  assign Mout_we_ram = Mout_we_ram_INT;\n  assign Mout_addr_ram = Mout_addr_ram_INT;\n  assign Mout_Wdata_ram = Mout_Wdata_ram_INT;\n  assign Mout_data_ram_size = Mout_data_ram_size_INT;\n\nendmodule\n\n\n"
                .into(),
        })
    }
}


#[allow(dead_code)]
const VERILOG: &str = r#"// 
// Politecnico di Milano
// Code created using PandA - Version: PandA 2023.2 - Revision 891ec3caed502474cab0813cc4a9fc678deabaa5 - Date 2023-06-23T22:47:22
// /nix/store/9c5lz0md936sjhs9hw1ya6kghvkfc4zg-bambu-wrapped/bin/bambu executed with: /nix/store/9c5lz0md936sjhs9hw1ya6kghvkfc4zg-bambu-wrapped/bin/bambu --simulator=VERILATOR --top-fname=keccak --clock-name=clk --compiler=I386_CLANG16 -Os --channels-type=MEM_ACC_11 --channels-number=1 keccak.ll 
// 
// Send any bug to: panda-info@polimi.it
// ************************************************************************
// The following text holds for all the components tagged with PANDA_LGPLv3.
// They are all part of the BAMBU/PANDA IP LIBRARY.
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with the PandA framework; see the files COPYING.LIB
// If not, see <http://www.gnu.org/licenses/>.
// ************************************************************************

`ifdef __ICARUS__
  `define _SIM_HAVE_CLOG2
`endif
`ifdef VERILATOR
  `define _SIM_HAVE_CLOG2
`endif
`ifdef MODEL_TECH
  `define _SIM_HAVE_CLOG2
`endif
`ifdef VCS
  `define _SIM_HAVE_CLOG2
`endif
`ifdef NCVERILOG
  `define _SIM_HAVE_CLOG2
`endif
`ifdef XILINX_SIMULATOR
  `define _SIM_HAVE_CLOG2
`endif
`ifdef XILINX_ISIM
  `define _SIM_HAVE_CLOG2
`endif

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>, Christian Pilato <christian.pilato@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module constant_value(out1);
  parameter BITSIZE_out1=1,
    value=1'b0;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = value;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module register_SE(clock,
  reset,
  in1,
  wenable,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_out1=1;
  // IN
  input clock;
  input reset;
  input [BITSIZE_in1-1:0] in1;
  input wenable;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  
  reg [BITSIZE_out1-1:0] reg_out1 =0;
  assign out1 = reg_out1;
  always @(posedge clock)
    if (wenable)
      reg_out1 <= in1;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module register_STD(clock,
  reset,
  in1,
  wenable,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_out1=1;
  // IN
  input clock;
  input reset;
  input [BITSIZE_in1-1:0] in1;
  input wenable;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  reg [BITSIZE_out1-1:0] reg_out1 =0;
  assign out1 = reg_out1;
  always @(posedge clock)
    reg_out1 <= in1;

endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ADDRESS_DECODING_LOGIC(clock,
  reset,
  in1,
  in2,
  in3,
  sel_LOAD,
  sel_STORE,
  S_oe_ram,
  S_we_ram,
  S_addr_ram,
  S_Wdata_ram,
  Sin_Rdata_ram,
  S_data_ram_size,
  Sin_DataRdy,
  out1,
  Sout_Rdata_ram,
  Sout_DataRdy,
  proxy_in1,
  proxy_in2,
  proxy_in3,
  proxy_sel_LOAD,
  proxy_sel_STORE,
  proxy_out1,
  dout_a,
  dout_b,
  memory_addr_a,
  memory_addr_b,
  din_value_aggregated,
  be,
  bram_write);
  parameter BITSIZE_in1=1,
    BITSIZE_in2=1,
    BITSIZE_in3=1,
    BITSIZE_out1=1,
    BITSIZE_S_addr_ram=1,
    BITSIZE_S_Wdata_ram=8,
    BITSIZE_Sin_Rdata_ram=8,
    BITSIZE_Sout_Rdata_ram=8,
    BITSIZE_S_data_ram_size=1,
    address_space_begin=0,
    address_space_rangesize=4,
    BUS_PIPELINED=1,
    BRAM_BITSIZE=32,
    PRIVATE_MEMORY=0,
    USE_SPARSE_MEMORY=1,
    HIGH_LATENCY=0,
    BITSIZE_proxy_in1=1,
    BITSIZE_proxy_in2=1,
    BITSIZE_proxy_in3=1,
    BITSIZE_proxy_out1=1,
    BITSIZE_dout_a=1,
    BITSIZE_dout_b=1,
    BITSIZE_memory_addr_a=1,
    BITSIZE_memory_addr_b=1,
    BITSIZE_din_value_aggregated=1,
    BITSIZE_be=1,
    nbit_read_addr=32,
    n_byte_on_databus=4,
    n_mem_elements=4,
    n_bytes=4;
  // IN
  input clock;
  input reset;
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  input [BITSIZE_in3-1:0] in3;
  input sel_LOAD;
  input sel_STORE;
  input S_oe_ram;
  input S_we_ram;
  input [BITSIZE_S_addr_ram-1:0] S_addr_ram;
  input [BITSIZE_S_Wdata_ram-1:0] S_Wdata_ram;
  input [BITSIZE_Sin_Rdata_ram-1:0] Sin_Rdata_ram;
  input [BITSIZE_S_data_ram_size-1:0] S_data_ram_size;
  input Sin_DataRdy;
  input [BITSIZE_proxy_in1-1:0] proxy_in1;
  input [BITSIZE_proxy_in2-1:0] proxy_in2;
  input [BITSIZE_proxy_in3-1:0] proxy_in3;
  input proxy_sel_LOAD;
  input proxy_sel_STORE;
  input [BITSIZE_dout_a-1:0] dout_a;
  input [BITSIZE_dout_b-1:0] dout_b;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  output [BITSIZE_Sout_Rdata_ram-1:0] Sout_Rdata_ram;
  output Sout_DataRdy;
  output [BITSIZE_proxy_out1-1:0] proxy_out1;
  output [BITSIZE_memory_addr_a-1:0] memory_addr_a;
  output [BITSIZE_memory_addr_b-1:0] memory_addr_b;
  output [BITSIZE_din_value_aggregated-1:0] din_value_aggregated;
  output [BITSIZE_be-1:0] be;
  output bram_write;
  `ifndef _SIM_HAVE_CLOG2
    function integer log2;
       input integer value;
       integer temp_value;
      begin
        temp_value = value-1;
        for (log2=0; temp_value>0; log2=log2+1)
          temp_value = temp_value>>1;
      end
    endfunction
  `endif
  `ifdef _SIM_HAVE_CLOG2
    parameter nbit_addr = BITSIZE_S_addr_ram/*n_bytes ==  1 ? 1 : $clog2(n_bytes)*/;
    parameter nbits_address_space_rangesize = $clog2(address_space_rangesize);
    parameter nbits_byte_offset = n_byte_on_databus==1 ? 1 : $clog2(n_byte_on_databus);
  `else
    parameter nbit_addr = BITSIZE_S_addr_ram/*n_bytes ==  1 ? 1 : log2(n_bytes)*/;
    parameter nbits_address_space_rangesize = log2(address_space_rangesize);
    parameter nbits_byte_offset = n_byte_on_databus==1 ? 1 : log2(n_byte_on_databus);
  `endif
  
  
  function [n_byte_on_databus*2-1:0] CONV;
    input [n_byte_on_databus*2-1:0] po2;
  begin
    case (po2)
      1:CONV=(1<<1)-1;
      2:CONV=(1<<2)-1;
      4:CONV=(1<<4)-1;
      8:CONV=(1<<8)-1;
      16:CONV=(1<<16)-1;
      32:CONV=(1<<32)-1;
      default:CONV=-1;
    endcase
  end
  endfunction
  wire [2*BRAM_BITSIZE-1:0] dout;
  wire [2*BRAM_BITSIZE-1:0] out1_shifted;
  wire [2*BRAM_BITSIZE-1:0] S_Wdata_ram_int;
  wire cs, oe_ram_cs, we_ram_cs;
  wire [n_byte_on_databus*2-1:0] conv_in;
  wire [n_byte_on_databus*2-1:0] conv_out;
  wire [nbits_byte_offset-1:0] byte_offset;
  wire [BITSIZE_in2-1:0] tmp_addr;
  wire [nbit_addr-1:0] relative_addr;
  
  reg we_ram_cs_delayed =0;
  reg oe_ram_cs_delayed =0;
  reg oe_ram_cs_delayed_registered =0;
  reg oe_ram_cs_delayed_registered1 =0;
  reg [nbits_byte_offset-1:0] delayed_byte_offset =0;
  reg [nbits_byte_offset-1:0] delayed_byte_offset_registered =0;
  reg [nbits_byte_offset-1:0] delayed_byte_offset_registered1 =0;
  
  assign tmp_addr = (proxy_sel_LOAD||proxy_sel_STORE) ? proxy_in2 : in2;
  
  generate
  genvar j0_a;
    for (j0_a=0; j0_a<n_byte_on_databus; j0_a=j0_a+1)
    begin  : dout_a_computation
      assign dout[(j0_a+1)*8-1:j0_a*8] = dout_a[(j0_a+1)*8-1:j0_a*8];
    end
  endgenerate
  
  generate
  genvar j0_b;
    for (j0_b=0; j0_b<n_byte_on_databus; j0_b=j0_b+1)
    begin  : dout_b_computation
      assign dout[(j0_b+n_byte_on_databus+1)*8-1:(j0_b+n_byte_on_databus)*8] = dout_b[(j0_b+1)*8-1:j0_b*8];
    end
  endgenerate
  
  generate
    if(PRIVATE_MEMORY==0 && USE_SPARSE_MEMORY==0)
      assign cs = (S_addr_ram >= (address_space_begin)) && (S_addr_ram < (address_space_begin+address_space_rangesize));
    else if(PRIVATE_MEMORY==0 && nbits_address_space_rangesize < 32)
      assign cs = S_addr_ram[nbit_addr-1:nbits_address_space_rangesize] == address_space_begin[((nbit_addr-1) < 32 ? (nbit_addr-1) : 31):nbits_address_space_rangesize];
    else
      assign cs = 1'b0;
  endgenerate
  assign oe_ram_cs = S_oe_ram && cs;
  assign we_ram_cs = S_we_ram && cs;
  generate
    if(PRIVATE_MEMORY==0 && USE_SPARSE_MEMORY==0)
      assign relative_addr = (sel_STORE===1'b1 || sel_LOAD===1'b1 || proxy_sel_STORE===1'b1 || proxy_sel_LOAD===1'b1) ? tmp_addr-address_space_begin[((nbit_addr-1) < 32 ? (nbit_addr-1) : 31):0] : S_addr_ram-address_space_begin[((nbit_addr-1) < 32 ? (nbit_addr-1) : 31):0];
    else if(PRIVATE_MEMORY==0)
      assign relative_addr = (sel_STORE===1'b1 || sel_LOAD===1'b1 || proxy_sel_STORE===1'b1 || proxy_sel_LOAD===1'b1) ? tmp_addr[nbits_address_space_rangesize-1:0] : S_addr_ram[nbits_address_space_rangesize-1:0];
    else if(USE_SPARSE_MEMORY==1)
      assign relative_addr = tmp_addr[nbits_address_space_rangesize-1:0];
    else
      assign relative_addr = tmp_addr-address_space_begin[((nbit_addr-1) < 32 ? (nbit_addr-1) : 31):0];
  endgenerate
  
  generate
    if (n_mem_elements==1)
      assign memory_addr_a = {nbit_read_addr{1'b0}};
    else if(n_byte_on_databus==1)
      assign memory_addr_a = relative_addr[nbit_read_addr-1:0];
    else
      assign memory_addr_a = relative_addr[nbit_read_addr+nbits_byte_offset-1:nbits_byte_offset];
  endgenerate
  
  generate
    if (n_bytes <= BRAM_BITSIZE/8)
      assign memory_addr_b = {nbit_read_addr{1'b0}};
    else if(n_byte_on_databus==1)
      assign memory_addr_b = relative_addr[nbit_read_addr-1:0] + 1'b1;
    else
      assign memory_addr_b = relative_addr[nbit_read_addr+nbits_byte_offset-1:nbits_byte_offset] + 1'b1;
  endgenerate
  
  generate
    if (n_byte_on_databus==1)
      assign byte_offset = {nbits_byte_offset{1'b0}};
    else
      assign byte_offset = relative_addr[nbits_byte_offset-1:0];
  endgenerate
  
  generate
    if(PRIVATE_MEMORY==0)
    begin
      assign conv_in = proxy_sel_STORE ? proxy_in3[BITSIZE_proxy_in3-1:3] : (sel_STORE ? in3[BITSIZE_in3-1:3] : S_data_ram_size[BITSIZE_S_data_ram_size-1:3]);
      assign conv_out = CONV(conv_in);
      assign be = conv_out << byte_offset;
    end
    else
    begin
      assign conv_in = proxy_sel_STORE ? proxy_in3[BITSIZE_proxy_in3-1:3] : in3[BITSIZE_in3-1:3];
      assign conv_out = CONV(conv_in);
      assign be = conv_out << byte_offset;
    end
  endgenerate
  
  generate
    if (BITSIZE_S_Wdata_ram < 2*BRAM_BITSIZE)
      assign S_Wdata_ram_int = {{2*BRAM_BITSIZE-BITSIZE_S_Wdata_ram{1'b0}}, S_Wdata_ram};
    else
      assign S_Wdata_ram_int = S_Wdata_ram[2*BRAM_BITSIZE-1:0];
  endgenerate
  
  generate
    if(PRIVATE_MEMORY==0)
      assign din_value_aggregated = proxy_sel_STORE ? proxy_in1 << byte_offset*8 : (sel_STORE ? in1 << byte_offset*8 : S_Wdata_ram_int << byte_offset*8);
    else
      assign din_value_aggregated = proxy_sel_STORE ? proxy_in1 << byte_offset*8 : in1 << byte_offset*8;
  endgenerate
  
  assign out1_shifted = dout >> delayed_byte_offset*8;
  assign out1 = out1_shifted;
  assign proxy_out1 = out1_shifted;
  
  always @(posedge clock )
  begin
    if(reset == 1'b0)
    begin
      oe_ram_cs_delayed <= 1'b0;
      if(HIGH_LATENCY != 0) oe_ram_cs_delayed_registered <= 1'b0;
      if(HIGH_LATENCY == 2) oe_ram_cs_delayed_registered1 <= 1'b0;
    end
    else
    begin
      if(HIGH_LATENCY == 0)
      begin
        oe_ram_cs_delayed <= oe_ram_cs & (!oe_ram_cs_delayed | BUS_PIPELINED);
      end
      else if(HIGH_LATENCY == 1)
      begin
        oe_ram_cs_delayed_registered <= oe_ram_cs & ((!oe_ram_cs_delayed_registered & !oe_ram_cs_delayed) | BUS_PIPELINED);
        oe_ram_cs_delayed <= oe_ram_cs_delayed_registered;
      end
      else
      begin
        oe_ram_cs_delayed_registered1 <= oe_ram_cs & ((!oe_ram_cs_delayed_registered1 & !oe_ram_cs_delayed_registered & !oe_ram_cs_delayed) | BUS_PIPELINED);
        oe_ram_cs_delayed_registered <= oe_ram_cs_delayed_registered1;
        oe_ram_cs_delayed <= oe_ram_cs_delayed_registered;
      end
    end
  end
  
  always @(posedge clock)
  begin
    if(HIGH_LATENCY == 0)
      delayed_byte_offset <= byte_offset;
    else if(HIGH_LATENCY == 1)
    begin
      delayed_byte_offset_registered <= byte_offset;
      delayed_byte_offset <= delayed_byte_offset_registered;
    end
    else
    begin
      delayed_byte_offset_registered1 <= byte_offset;
      delayed_byte_offset_registered <= delayed_byte_offset_registered1;
      delayed_byte_offset <= delayed_byte_offset_registered;
    end
  end
  
  always @(posedge clock )
  begin
    if(reset == 1'b0)
      we_ram_cs_delayed <= 1'b0;
    else
      we_ram_cs_delayed <= we_ram_cs & !we_ram_cs_delayed;
  end
  
  generate
    if(PRIVATE_MEMORY==1)
      assign Sout_Rdata_ram =Sin_Rdata_ram;
    else if (BITSIZE_Sout_Rdata_ram <= 2*BRAM_BITSIZE)
      assign Sout_Rdata_ram = oe_ram_cs_delayed ? out1_shifted[BITSIZE_Sout_Rdata_ram-1:0] : Sin_Rdata_ram;
    else
      assign Sout_Rdata_ram = oe_ram_cs_delayed ? {{BITSIZE_Sout_Rdata_ram-2*BRAM_BITSIZE{1'b0}}, out1_shifted} : Sin_Rdata_ram;
  endgenerate
  
  generate
    if(PRIVATE_MEMORY==1)
      assign Sout_DataRdy = Sin_DataRdy;
    else
      assign Sout_DataRdy = oe_ram_cs_delayed | Sin_DataRdy | we_ram_cs_delayed;
  endgenerate
  
  assign bram_write = sel_STORE || proxy_sel_STORE || we_ram_cs;
  
  // Add assertion here
  // psl default clock = (posedge clock);
  // psl ERROR_S_data_ram_size: assert never {S_data_ram_size>2*BRAM_BITSIZE && (we_ram_cs || oe_ram_cs)};
  // psl ERROR_memory_addr: assert never {memory_addr_a>=n_mem_elements && (we_ram_cs || oe_ram_cs || sel_STORE || sel_LOAD || proxy_sel_STORE || proxy_sel_LOAD)};
  // psl ERROR_relative_addr: assert never {relative_addr+(S_data_ram_size/8) >n_bytes && (we_ram_cs || oe_ram_cs)};
  // psl ERROR_unaligned_access: assert never {byte_offset+S_data_ram_size[BITSIZE_S_data_ram_size-1:3] > BRAM_BITSIZE/4 && (we_ram_cs || oe_ram_cs)};
  // psl ERROR_oe_ram_cs_we_ram_cs: assert never {(we_ram_cs & oe_ram_cs) != 0};
  // psl ERROR_LOAD_S_oe_ram: assert never {sel_LOAD && oe_ram_cs};
  // psl ERROR_proxy_LOAD_S_oe_ram: assert never {proxy_sel_LOAD && oe_ram_cs};
  // psl ERROR_STORE_S_we_ram: assert never {sel_STORE && we_ram_cs};
  // psl ERROR_proxy_STORE_S_we_ram: assert never {proxy_sel_STORE && we_ram_cs};
  // psl ERROR_LOAD_we_ram_cs: assert never {sel_LOAD && we_ram_cs};
  // psl ERROR_proxy_LOAD_we_ram_cs: assert never {proxy_sel_LOAD && we_ram_cs};
  // psl ERROR_STORE_oe_ram_cs: assert never {sel_STORE && oe_ram_cs};
  // psl ERROR_proxy_STORE_oe_ram_cs: assert never {proxy_sel_STORE && oe_ram_cs};
  // psl ERROR_Sin_DataRdy_oe_ram_cs_delayed: assert never {Sin_DataRdy && oe_ram_cs_delayed};
  // psl ERROR_in3_size: assert never {in3>2*BRAM_BITSIZE && (sel_STORE || sel_LOAD)};
  // psl ERROR_proxy_in3_size: assert never {proxy_in3>2*BRAM_BITSIZE && (proxy_sel_STORE || proxy_sel_LOAD)};
  // psl ERROR_requested_size: assert never {BITSIZE_out1<in3 && (sel_LOAD)};
  // psl ERROR_proxy_requested_size: assert never {BITSIZE_proxy_out1<proxy_in3 && (proxy_sel_LOAD)};
  // psl ERROR_STORE_LOAD: assert never {sel_STORE && sel_LOAD};
  // psl ERROR_proxy_STORE_proxy_LOAD: assert never {proxy_sel_STORE && proxy_sel_LOAD};
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2016-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module BRAM_MEMORY_CORE_SMALL(clock,
  bram_write0,
  bram_write1,
  memory_addr_a,
  memory_addr_b,
  din_value_aggregated,
  be,
  dout_a,
  dout_b);
  parameter BITSIZE_dout_a=1,
    BITSIZE_dout_b=1,
    BITSIZE_memory_addr_a=1,
    BITSIZE_memory_addr_b=1,
    BITSIZE_din_value_aggregated=1,
    BITSIZE_be=1,
    MEMORY_INIT_file="array.mem",
    n_byte_on_databus=4,
    n_mem_elements=4,
    n_bytes=4,
    HIGH_LATENCY=0;
  // IN
  input clock;
  input bram_write0;
  input bram_write1;
  input [BITSIZE_memory_addr_a-1:0] memory_addr_a;
  input [BITSIZE_memory_addr_b-1:0] memory_addr_b;
  input [BITSIZE_din_value_aggregated-1:0] din_value_aggregated;
  input [BITSIZE_be-1:0] be;
  // OUT
  output [BITSIZE_dout_a-1:0] dout_a;
  output [BITSIZE_dout_b-1:0] dout_b;
  
  reg bram_write01 =0;
  reg bram_write11 =0;
  reg [BITSIZE_memory_addr_a-1:0] memory_addr_a1 =0;
  reg [BITSIZE_memory_addr_b-1:0] memory_addr_b1 =0;
  reg [BITSIZE_be-1:0] be1 =0;
  reg [BITSIZE_din_value_aggregated-1:0] din_value_aggregated1 =0;
  reg [(n_byte_on_databus)*8-1:0] dout_a_tmp =0;
  reg [(n_byte_on_databus)*8-1:0] dout_b_tmp =0;
  reg [(n_byte_on_databus)*8-1:0] dout_a_registered =0;
  reg [(n_byte_on_databus)*8-1:0] dout_b_registered =0;
  reg [(n_byte_on_databus)*8-1:0] memory [0:n_mem_elements-1]/* synthesis syn_ramstyle = "no_rw_check" */ ;
  
  generate
    if(HIGH_LATENCY==2)
    begin
      always @ (posedge clock)
      begin
         memory_addr_a1 <= memory_addr_a;
         memory_addr_b1 <= memory_addr_b;
         bram_write01 <= bram_write0;
         bram_write11 <= bram_write1;
         be1 <= be;
         din_value_aggregated1 <= din_value_aggregated;
      end
    end
  endgenerate
  
  assign dout_a = dout_a_tmp;
  assign dout_b = dout_b_tmp;
  initial
  begin
    $readmemb(MEMORY_INIT_file, memory, 0, n_mem_elements-1);
  end
  
  always @(posedge clock)
  begin
    if(HIGH_LATENCY == 0||HIGH_LATENCY == 1)
    begin
      if (bram_write0)
      begin : L11_write
        integer i11;
        for (i11=0; i11<n_byte_on_databus; i11=i11+1)
        begin
          if(be[i11])
            memory[memory_addr_a][i11*8+:8] <= din_value_aggregated[i11*8+:8];
        end
      end
    end
    else
    begin
      if (bram_write01)
      begin : L11_write1
        integer i11;
        for (i11=0; i11<n_byte_on_databus; i11=i11+1)
        begin
          if(be1[i11])
            memory[memory_addr_a1][i11*8+:8] <= din_value_aggregated1[i11*8+:8];
        end
      end
    end
    if(HIGH_LATENCY == 0)
      dout_a_tmp <= memory[memory_addr_a];
    else if(HIGH_LATENCY == 1)
    begin
      dout_a_registered <= memory[memory_addr_a];
      dout_a_tmp <= dout_a_registered;
    end
    else
    begin
      dout_a_registered <= memory[memory_addr_a1];
      dout_a_tmp <= dout_a_registered;
    end
    if(HIGH_LATENCY == 0||HIGH_LATENCY == 1)
    begin
      if (bram_write1)
      begin : L22_write
        integer i22;
        for (i22=0; i22<n_byte_on_databus; i22=i22+1)
        begin
          if(be[i22+n_byte_on_databus])
            memory[memory_addr_b][i22*8+:8] <= din_value_aggregated[(i22+n_byte_on_databus)*8+:8];
        end
      end
    end
    else
    begin
      if (bram_write11)
      begin : L22_write1
        integer i22;
        for (i22=0; i22<n_byte_on_databus; i22=i22+1)
        begin
          if(be1[i22+n_byte_on_databus])
            memory[memory_addr_b1][i22*8+:8] <= din_value_aggregated1[(i22+n_byte_on_databus)*8+:8];
        end
      end
    end
    if(HIGH_LATENCY == 0)
      dout_b_tmp <= memory[memory_addr_b];
    else if(HIGH_LATENCY == 1)
    begin
      dout_b_registered <= memory[memory_addr_b];
      dout_b_tmp <= dout_b_registered;
    end
    else
    begin
      dout_b_registered <= memory[memory_addr_b1];
      dout_b_tmp <= dout_b_registered;
    end
  end

endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2016-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module TRUE_DUAL_PORT_BYTE_ENABLING_RAM(clock,
  bram_write0,
  bram_write1,
  memory_addr_a,
  memory_addr_b,
  din_value_aggregated,
  be,
  dout_a,
  dout_b);
  parameter BITSIZE_dout_a=1,
    BITSIZE_dout_b=1,
    BITSIZE_memory_addr_a=1,
    BITSIZE_memory_addr_b=1,
    BITSIZE_din_value_aggregated=1,
    BITSIZE_be=1,
    MEMORY_INIT_file="array.mem",
    BRAM_BITSIZE=32,
    n_byte_on_databus=4,
    n_mem_elements=4,
    HIGH_LATENCY=0;
  // IN
  input clock;
  input bram_write0;
  input bram_write1;
  input [BITSIZE_memory_addr_a-1:0] memory_addr_a;
  input [BITSIZE_memory_addr_b-1:0] memory_addr_b;
  input [BITSIZE_din_value_aggregated-1:0] din_value_aggregated;
  input [BITSIZE_be-1:0] be;
  // OUT
  output [BITSIZE_dout_a-1:0] dout_a;
  output [BITSIZE_dout_b-1:0] dout_b;
  
  wire [n_byte_on_databus-1:0] we_a;
  wire [n_byte_on_databus-1:0] we_b;
  reg [n_byte_on_databus-1:0] we_a1 =0;
  reg [n_byte_on_databus-1:0] we_b1 =0;
  reg [BITSIZE_din_value_aggregated-1:0] din_value_aggregated1 =0;
  
  reg [BITSIZE_dout_a-1:0] dout_a =0;
  reg [BITSIZE_dout_a-1:0] dout_a_registered =0;
  reg [BITSIZE_dout_b-1:0] dout_b =0;
  reg [BITSIZE_dout_b-1:0] dout_b_registered =0;
  reg [BITSIZE_memory_addr_a-1:0] memory_addr_a1 =0;
  reg [BITSIZE_memory_addr_b-1:0] memory_addr_b1 =0;
  reg [BRAM_BITSIZE-1:0] memory [0:n_mem_elements-1] /* synthesis syn_ramstyle = "no_rw_check" */;
  
  initial
  begin
    $readmemb(MEMORY_INIT_file, memory, 0, n_mem_elements-1);
  end
  
  always @(posedge clock)
  begin
    if(HIGH_LATENCY==0)
    begin
      dout_a <= memory[memory_addr_a];
    end
    else if(HIGH_LATENCY==1)
    begin
      dout_a_registered <= memory[memory_addr_a];
      dout_a <= dout_a_registered;
    end
    else
    begin
      memory_addr_a1 <= memory_addr_a;
      we_a1 <= we_a;
      din_value_aggregated1 <= din_value_aggregated;
      dout_a_registered <= memory[memory_addr_a1];
      dout_a <= dout_a_registered;
    end
  end
  
  generate
  genvar i11;
    for (i11=0; i11<n_byte_on_databus; i11=i11+1)
    begin : L11_write_a
      always @(posedge clock)
      begin
        if(HIGH_LATENCY==0||HIGH_LATENCY==1)
        begin
          if(we_a[i11])
            memory[memory_addr_a][(i11+1)*8-1:i11*8] <= din_value_aggregated[(i11+1)*8-1:i11*8];
        end
        else
        begin
          if(we_a1[i11])
            memory[memory_addr_a1][(i11+1)*8-1:i11*8] <= din_value_aggregated1[(i11+1)*8-1:i11*8];
        end
      end
    end
  endgenerate
  
    always @(posedge clock)
    begin
      if(HIGH_LATENCY==0)
      begin
        dout_b <= memory[memory_addr_b];
      end
      else if(HIGH_LATENCY==1)
      begin
        dout_b_registered <= memory[memory_addr_b];
        dout_b <= dout_b_registered;
      end
      else
      begin
        memory_addr_b1 <= memory_addr_b;
        we_b1 <= we_b;
        dout_b_registered <= memory[memory_addr_b1];
        dout_b <= dout_b_registered;
      end
    end
    for (i11=0; i11<n_byte_on_databus; i11=i11+1)
    begin : L11_write_b
      always @(posedge clock)
      begin
        if(HIGH_LATENCY==0||HIGH_LATENCY==1)
        begin
          if(we_b[i11])
            memory[memory_addr_b][(i11+1)*8-1:i11*8] <= din_value_aggregated[(i11+1+n_byte_on_databus)*8-1:(i11+n_byte_on_databus)*8];
        end
        else
        begin
          if(we_b1[i11])
            memory[memory_addr_b1][(i11+1)*8-1:i11*8] <= din_value_aggregated1[(i11+1+n_byte_on_databus)*8-1:(i11+n_byte_on_databus)*8];
        end
      end
    end
  
  generate
  genvar i2_a;
    for (i2_a=0; i2_a<n_byte_on_databus; i2_a=i2_a+1)
    begin  : write_enable_a
      assign we_a[i2_a] = (bram_write0) && be[i2_a];
    end
  endgenerate
  
  generate
  genvar i2_b;
    for (i2_b=0; i2_b<n_byte_on_databus; i2_b=i2_b+1)
    begin  : write_enable_b
      assign we_b[i2_b] = (bram_write1) && be[i2_b+n_byte_on_databus];
    end
  endgenerate
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2016-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module BRAM_MEMORY_CORE(clock,
  bram_write,
  memory_addr_a,
  memory_addr_b,
  din_value_aggregated,
  be,
  dout_a,
  dout_b);
  parameter BITSIZE_dout_a=1,
    BITSIZE_dout_b=1,
    BITSIZE_memory_addr_a=1,
    BITSIZE_memory_addr_b=1,
    BITSIZE_din_value_aggregated=1,
    BITSIZE_be=1,
    MEMORY_INIT_file="array.mem",
    BRAM_BITSIZE=32,
    nbit_read_addr=32,
    n_byte_on_databus=4,
    n_mem_elements=4,
    n_bytes=4,
    HIGH_LATENCY=0;
  // IN
  input clock;
  input bram_write;
  input [BITSIZE_memory_addr_a-1:0] memory_addr_a;
  input [BITSIZE_memory_addr_b-1:0] memory_addr_b;
  input [BITSIZE_din_value_aggregated-1:0] din_value_aggregated;
  input [BITSIZE_be-1:0] be;
  // OUT
  output [BITSIZE_dout_a-1:0] dout_a;
  output [BITSIZE_dout_b-1:0] dout_b;
  
  generate
  if(n_mem_elements == 1)
  begin
    BRAM_MEMORY_CORE_SMALL #(.BITSIZE_memory_addr_a(BITSIZE_memory_addr_a), .BITSIZE_memory_addr_b(BITSIZE_memory_addr_b), .BITSIZE_din_value_aggregated(BITSIZE_din_value_aggregated), .BITSIZE_be(BITSIZE_be), .BITSIZE_dout_a(BITSIZE_dout_a), .BITSIZE_dout_b(BITSIZE_dout_b), .MEMORY_INIT_file(MEMORY_INIT_file), .n_byte_on_databus(n_byte_on_databus), .n_mem_elements(n_mem_elements), .n_bytes(n_bytes), .HIGH_LATENCY(HIGH_LATENCY)) BRAM_MEMORY_instance_small (.clock(clock), .bram_write0(bram_write), .bram_write1(bram_write), .memory_addr_a(memory_addr_a), .memory_addr_b(memory_addr_b), .din_value_aggregated(din_value_aggregated), .be(be), .dout_a(dout_a), .dout_b(dout_b));
  end
  else
  begin
    TRUE_DUAL_PORT_BYTE_ENABLING_RAM #(.BITSIZE_memory_addr_a(BITSIZE_memory_addr_a), .BITSIZE_memory_addr_b(BITSIZE_memory_addr_b), .BITSIZE_din_value_aggregated(BITSIZE_din_value_aggregated), .BITSIZE_be(BITSIZE_be), .BITSIZE_dout_a(BITSIZE_dout_a), .BITSIZE_dout_b(BITSIZE_dout_b), .MEMORY_INIT_file(MEMORY_INIT_file), .BRAM_BITSIZE(BRAM_BITSIZE), .n_byte_on_databus(n_byte_on_databus), .n_mem_elements(n_mem_elements), .HIGH_LATENCY(HIGH_LATENCY)) TRUE_DUAL_PORT_BYTE_ENABLING_RAM_instance (.clock(clock), .bram_write0(bram_write), .bram_write1(bram_write), .memory_addr_a(memory_addr_a), .memory_addr_b(memory_addr_b), .din_value_aggregated(din_value_aggregated), .be(be), .dout_a(dout_a), .dout_b(dout_b));
  end
  endgenerate

endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ARRAY_1D_STD_BRAM_SP(clock,
  reset,
  in1,
  in2,
  in3,
  sel_LOAD,
  sel_STORE,
  S_oe_ram,
  S_we_ram,
  S_addr_ram,
  S_Wdata_ram,
  Sin_Rdata_ram,
  S_data_ram_size,
  Sin_DataRdy,
  out1,
  Sout_Rdata_ram,
  Sout_DataRdy,
  proxy_in1,
  proxy_in2,
  proxy_in3,
  proxy_sel_LOAD,
  proxy_sel_STORE,
  proxy_out1);
  parameter BITSIZE_in1=1,
    BITSIZE_in2=1,
    BITSIZE_in3=1,
    BITSIZE_out1=1,
    BITSIZE_S_addr_ram=1,
    BITSIZE_S_Wdata_ram=8,
    BITSIZE_Sin_Rdata_ram=8,
    BITSIZE_Sout_Rdata_ram=8,
    BITSIZE_S_data_ram_size=1,
    MEMORY_INIT_file="array.mem",
    n_elements=1,
    data_size=32,
    address_space_begin=0,
    address_space_rangesize=4,
    BUS_PIPELINED=1,
    BRAM_BITSIZE=32,
    PRIVATE_MEMORY=0,
    USE_SPARSE_MEMORY=1,
    HIGH_LATENCY=0,
    BITSIZE_proxy_in1=1,
    BITSIZE_proxy_in2=1,
    BITSIZE_proxy_in3=1,
    BITSIZE_proxy_out1=1;
  // IN
  input clock;
  input reset;
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  input [BITSIZE_in3-1:0] in3;
  input sel_LOAD;
  input sel_STORE;
  input S_oe_ram;
  input S_we_ram;
  input [BITSIZE_S_addr_ram-1:0] S_addr_ram;
  input [BITSIZE_S_Wdata_ram-1:0] S_Wdata_ram;
  input [BITSIZE_Sin_Rdata_ram-1:0] Sin_Rdata_ram;
  input [BITSIZE_S_data_ram_size-1:0] S_data_ram_size;
  input Sin_DataRdy;
  input [BITSIZE_proxy_in1-1:0] proxy_in1;
  input [BITSIZE_proxy_in2-1:0] proxy_in2;
  input [BITSIZE_proxy_in3-1:0] proxy_in3;
  input proxy_sel_LOAD;
  input proxy_sel_STORE;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  output [BITSIZE_Sout_Rdata_ram-1:0] Sout_Rdata_ram;
  output Sout_DataRdy;
  output [BITSIZE_proxy_out1-1:0] proxy_out1;
  `ifndef _SIM_HAVE_CLOG2
    function integer log2;
       input integer value;
       integer temp_value;
      begin
        temp_value = value-1;
        for (log2=0; temp_value>0; log2=log2+1)
          temp_value = temp_value>>1;
      end
    endfunction
  `endif
  parameter n_bytes = (n_elements*data_size)/8 == 0 ? 1 : (n_elements*data_size)/8;
  parameter n_byte_on_databus = BRAM_BITSIZE/8;
  parameter n_mem_elements = n_bytes/(n_byte_on_databus) + (n_bytes%(n_byte_on_databus) == 0 ? 0 : 1);
  `ifdef _SIM_HAVE_CLOG2
    parameter nbit_read_addr = n_mem_elements == 1 ? 1 : $clog2(n_mem_elements);
  `else
    parameter nbit_read_addr = n_mem_elements == 1 ? 1 : log2(n_mem_elements);
  `endif
    
  wire [nbit_read_addr-1:0] memory_addr_a;
  wire [nbit_read_addr-1:0] memory_addr_b;
  wire [n_byte_on_databus*2-1:0] be;
  
  wire [2*BRAM_BITSIZE-1:0] din_value_aggregated;
  wire bram_write;
  wire [BRAM_BITSIZE-1:0] dout_a;
  wire [BRAM_BITSIZE-1:0] dout_b;
  
  BRAM_MEMORY_CORE #(.BITSIZE_memory_addr_a(nbit_read_addr), .BITSIZE_memory_addr_b(nbit_read_addr), .BITSIZE_din_value_aggregated(2*BRAM_BITSIZE), .BITSIZE_be(n_byte_on_databus*2), .BITSIZE_dout_a(BRAM_BITSIZE), .BITSIZE_dout_b(BRAM_BITSIZE), .MEMORY_INIT_file(MEMORY_INIT_file), .BRAM_BITSIZE(BRAM_BITSIZE), .nbit_read_addr(nbit_read_addr), .n_byte_on_databus(n_byte_on_databus), .n_mem_elements(n_mem_elements), .n_bytes(n_bytes), .HIGH_LATENCY(HIGH_LATENCY)) BRAM_MEMORY_instance (.clock(clock), .bram_write(bram_write), .memory_addr_a(memory_addr_a), .memory_addr_b(memory_addr_b), .din_value_aggregated(din_value_aggregated), .be(be), .dout_a(dout_a), .dout_b(dout_b));
  
  ADDRESS_DECODING_LOGIC #(.BITSIZE_memory_addr_a(nbit_read_addr), .BITSIZE_memory_addr_b(nbit_read_addr), .BITSIZE_din_value_aggregated(2*BRAM_BITSIZE), .BITSIZE_be(n_byte_on_databus*2), .BITSIZE_dout_a(BRAM_BITSIZE), .BITSIZE_dout_b(BRAM_BITSIZE), .BITSIZE_in1(BITSIZE_in1), .BITSIZE_in2(BITSIZE_in2), .BITSIZE_in3(BITSIZE_in3), .BITSIZE_out1(BITSIZE_out1), .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram), .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram), .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram), .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram), .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size), .address_space_begin(address_space_begin), .address_space_rangesize(address_space_rangesize), .BUS_PIPELINED(BUS_PIPELINED), .BRAM_BITSIZE(BRAM_BITSIZE), .PRIVATE_MEMORY(PRIVATE_MEMORY), .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY), .BITSIZE_proxy_in1(BITSIZE_proxy_in1), .BITSIZE_proxy_in2(BITSIZE_proxy_in2), .BITSIZE_proxy_in3(BITSIZE_proxy_in3), .BITSIZE_proxy_out1(BITSIZE_proxy_out1), .nbit_read_addr(nbit_read_addr), .n_byte_on_databus(n_byte_on_databus), .n_mem_elements(n_mem_elements), .n_bytes(n_bytes), .HIGH_LATENCY(HIGH_LATENCY)) ADDRESS_DECODING_LOGIC_instance (.out1(out1), .Sout_Rdata_ram(Sout_Rdata_ram), .Sout_DataRdy(Sout_DataRdy), .proxy_out1(proxy_out1), .clock(clock), .reset(reset), .in1(in1), .in2(in2), .in3(in3), .sel_LOAD(sel_LOAD), .sel_STORE(sel_STORE), .S_oe_ram(S_oe_ram), .S_we_ram(S_we_ram), .S_addr_ram(S_addr_ram), .S_Wdata_ram(S_Wdata_ram), .Sin_Rdata_ram(Sin_Rdata_ram), .S_data_ram_size(S_data_ram_size), .Sin_DataRdy(Sin_DataRdy), .proxy_in1(proxy_in1), .proxy_in2(proxy_in2), .proxy_in3(proxy_in3), .proxy_sel_LOAD(proxy_sel_LOAD), .proxy_sel_STORE(proxy_sel_STORE), .bram_write(bram_write), .memory_addr_a(memory_addr_a), .memory_addr_b(memory_addr_b), .din_value_aggregated(din_value_aggregated), .be(be), .dout_a(dout_a), .dout_b(dout_b));
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ARRAY_1D_STD_BRAM(clock,
  reset,
  in1,
  in2,
  in3,
  in4,
  sel_LOAD,
  sel_STORE,
  S_oe_ram,
  S_we_ram,
  S_addr_ram,
  S_Wdata_ram,
  Sin_Rdata_ram,
  S_data_ram_size,
  Sin_DataRdy,
  out1,
  Sout_Rdata_ram,
  Sout_DataRdy,
  proxy_in1,
  proxy_in2,
  proxy_in3,
  proxy_sel_LOAD,
  proxy_sel_STORE,
  proxy_out1);
  parameter BITSIZE_in1=1,
    BITSIZE_in2=1,
    BITSIZE_in3=1,
    BITSIZE_out1=1,
    BITSIZE_S_addr_ram=1,
    BITSIZE_S_Wdata_ram=8,
    BITSIZE_Sin_Rdata_ram=8,
    BITSIZE_Sout_Rdata_ram=8,
    BITSIZE_S_data_ram_size=1,
    MEMORY_INIT_file="array.mem",
    n_elements=1,
    data_size=32,
    address_space_begin=0,
    address_space_rangesize=4,
    BUS_PIPELINED=1,
    BRAM_BITSIZE=32,
    PRIVATE_MEMORY=0,
    USE_SPARSE_MEMORY=1,
    BITSIZE_proxy_in1=1,
    BITSIZE_proxy_in2=1,
    BITSIZE_proxy_in3=1,
    BITSIZE_proxy_out1=1;
  // IN
  input clock;
  input reset;
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  input [BITSIZE_in3-1:0] in3;
  input in4;
  input sel_LOAD;
  input sel_STORE;
  input S_oe_ram;
  input S_we_ram;
  input [BITSIZE_S_addr_ram-1:0] S_addr_ram;
  input [BITSIZE_S_Wdata_ram-1:0] S_Wdata_ram;
  input [BITSIZE_Sin_Rdata_ram-1:0] Sin_Rdata_ram;
  input [BITSIZE_S_data_ram_size-1:0] S_data_ram_size;
  input Sin_DataRdy;
  input [BITSIZE_proxy_in1-1:0] proxy_in1;
  input [BITSIZE_proxy_in2-1:0] proxy_in2;
  input [BITSIZE_proxy_in3-1:0] proxy_in3;
  input proxy_sel_LOAD;
  input proxy_sel_STORE;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  output [BITSIZE_Sout_Rdata_ram-1:0] Sout_Rdata_ram;
  output Sout_DataRdy;
  output [BITSIZE_proxy_out1-1:0] proxy_out1;
  ARRAY_1D_STD_BRAM_SP #(.BITSIZE_in1(BITSIZE_in1), .BITSIZE_in2(BITSIZE_in2), .BITSIZE_in3(BITSIZE_in3), .BITSIZE_out1(BITSIZE_out1), .BITSIZE_S_addr_ram(BITSIZE_S_addr_ram), .BITSIZE_S_Wdata_ram(BITSIZE_S_Wdata_ram), .BITSIZE_Sin_Rdata_ram(BITSIZE_Sin_Rdata_ram), .BITSIZE_Sout_Rdata_ram(BITSIZE_Sout_Rdata_ram), .BITSIZE_S_data_ram_size(BITSIZE_S_data_ram_size), .MEMORY_INIT_file(MEMORY_INIT_file), .n_elements(n_elements), .data_size(data_size), .address_space_begin(address_space_begin), .address_space_rangesize(address_space_rangesize), .BUS_PIPELINED(BUS_PIPELINED), .BRAM_BITSIZE(BRAM_BITSIZE), .PRIVATE_MEMORY(PRIVATE_MEMORY), .USE_SPARSE_MEMORY(USE_SPARSE_MEMORY), .BITSIZE_proxy_in1(BITSIZE_proxy_in1), .BITSIZE_proxy_in2(BITSIZE_proxy_in2), .BITSIZE_proxy_in3(BITSIZE_proxy_in3), .BITSIZE_proxy_out1(BITSIZE_proxy_out1), .HIGH_LATENCY(0)) ARRAY_1D_STD_BRAM_instance (.out1(out1), .Sout_Rdata_ram(Sout_Rdata_ram), .Sout_DataRdy(Sout_DataRdy), .proxy_out1(proxy_out1), .clock(clock), .reset(reset), .in1(in1), .in2(in2), .in3(in3), .sel_LOAD(sel_LOAD & in4), .sel_STORE(sel_STORE & in4), .S_oe_ram(S_oe_ram), .S_we_ram(S_we_ram), .S_addr_ram(S_addr_ram), .S_Wdata_ram(S_Wdata_ram), .Sin_Rdata_ram(Sin_Rdata_ram), .S_data_ram_size(S_data_ram_size), .Sin_DataRdy(Sin_DataRdy), .proxy_in1(proxy_in1), .proxy_in2(proxy_in2), .proxy_in3(proxy_in3), .proxy_sel_LOAD(proxy_sel_LOAD), .proxy_sel_STORE(proxy_sel_STORE));
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module addr_expr_FU(in1,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_view_convert_expr_FU(in1,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module read_cond_FU(in1,
  out1);
  parameter BITSIZE_in1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  // OUT
  output out1;
  assign out1 = in1 != {BITSIZE_in1{1'b0}};
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module BMEMORY_CTRL(clock,
  in1,
  in2,
  in3,
  in4,
  sel_LOAD,
  sel_STORE,
  out1,
  Min_oe_ram,
  Mout_oe_ram,
  Min_we_ram,
  Mout_we_ram,
  Min_addr_ram,
  Mout_addr_ram,
  M_Rdata_ram,
  Min_Wdata_ram,
  Mout_Wdata_ram,
  Min_data_ram_size,
  Mout_data_ram_size,
  M_DataRdy);
  parameter BITSIZE_in1=1,
    BITSIZE_in2=1,
    BITSIZE_in3=1,
    BITSIZE_out1=1,
    BITSIZE_Min_addr_ram=1,
    BITSIZE_Mout_addr_ram=1,
    BITSIZE_M_Rdata_ram=8,
    BITSIZE_Min_Wdata_ram=8,
    BITSIZE_Mout_Wdata_ram=8,
    BITSIZE_Min_data_ram_size=1,
    BITSIZE_Mout_data_ram_size=1;
  // IN
  input clock;
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  input [BITSIZE_in3-1:0] in3;
  input in4;
  input sel_LOAD;
  input sel_STORE;
  input Min_oe_ram;
  input Min_we_ram;
  input [BITSIZE_Min_addr_ram-1:0] Min_addr_ram;
  input [BITSIZE_M_Rdata_ram-1:0] M_Rdata_ram;
  input [BITSIZE_Min_Wdata_ram-1:0] Min_Wdata_ram;
  input [BITSIZE_Min_data_ram_size-1:0] Min_data_ram_size;
  input M_DataRdy;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  output Mout_oe_ram;
  output Mout_we_ram;
  output [BITSIZE_Mout_addr_ram-1:0] Mout_addr_ram;
  output [BITSIZE_Mout_Wdata_ram-1:0] Mout_Wdata_ram;
  output [BITSIZE_Mout_data_ram_size-1:0] Mout_data_ram_size;
  
  wire  [BITSIZE_in2-1:0] tmp_addr;
  wire int_sel_LOAD;
  wire int_sel_STORE;
  assign tmp_addr = in2;
  assign Mout_addr_ram = (int_sel_LOAD || int_sel_STORE) ? tmp_addr : Min_addr_ram;
  assign Mout_oe_ram = int_sel_LOAD ? 1'b1 : Min_oe_ram;
  assign Mout_we_ram = int_sel_STORE ? 1'b1 : Min_we_ram;
  assign out1 = M_Rdata_ram[BITSIZE_out1-1:0];
  assign Mout_Wdata_ram = int_sel_STORE ? in1 : Min_Wdata_ram;
  assign Mout_data_ram_size = int_sel_STORE || int_sel_LOAD ? in3[BITSIZE_in3-1:0] : Min_data_ram_size;
  assign int_sel_LOAD = sel_LOAD & in4;
  assign int_sel_STORE = sel_STORE & in4;
  // Add assertion here
  // psl default clock = (posedge clock);
  // psl ERROR_LOAD_Min_oe_ram: assert never {sel_LOAD && Min_oe_ram};
  // psl ERROR_STORE_Min_we_ram: assert never {sel_STORE && Min_we_ram};
  // psl ERROR_STORE_LOAD: assert never {sel_STORE && sel_LOAD};
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_bit_and_expr_FU(in1,
  in2,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_in2=1,
    BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 & in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_bit_xor_expr_FU(in1,
  in2,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_in2=1,
    BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 ^ in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_eq_expr_FU(in1,
  in2,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_in2=1,
    BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = in1 == in2;
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2021-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_fshl_expr_FU(in1,
  in2,
  in3,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_in2=1,
    BITSIZE_in3=1,
    BITSIZE_out1=1,
    PRECISION=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  input [BITSIZE_in3-1:0] in3;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  `ifndef _SIM_HAVE_CLOG2
    function integer log2;
       input integer value;
       integer temp_value;
      begin
        temp_value = value-1;
        for (log2=0; temp_value>0; log2=log2+1)
          temp_value = temp_value>>1;
      end
    endfunction
  `endif
  `ifdef _SIM_HAVE_CLOG2
    parameter arg_bitsize = $clog2(PRECISION);
  `else
    parameter arg_bitsize = log2(PRECISION);
  `endif
  parameter marg_bitsize = arg_bitsize < BITSIZE_in3 ? arg_bitsize : BITSIZE_in3;
  assign out1 = (in1 << (in3[marg_bitsize-1:0]))|(in2 >> (PRECISION-(in3[marg_bitsize-1:0])));
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_pointer_plus_expr_FU(in1,
  in2,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_in2=1,
    BITSIZE_out1=1,
    LSB_PARAMETER=-1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  wire [BITSIZE_out1-1:0] in1_tmp;
  wire [BITSIZE_out1-1:0] in2_tmp;
  assign in1_tmp = in1;
  assign in2_tmp = in2;generate if (BITSIZE_out1 > LSB_PARAMETER) assign out1[BITSIZE_out1-1:LSB_PARAMETER] = (in1_tmp[BITSIZE_out1-1:LSB_PARAMETER] + in2_tmp[BITSIZE_out1-1:LSB_PARAMETER]); else assign out1 = 0; endgenerate
  generate if (LSB_PARAMETER != 0 && BITSIZE_out1 > LSB_PARAMETER) assign out1[LSB_PARAMETER-1:0] = 0; endgenerate
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module ui_rshift_expr_FU(in1,
  in2,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_in2=1,
    BITSIZE_out1=1,
    PRECISION=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  `ifndef _SIM_HAVE_CLOG2
    function integer log2;
       input integer value;
       integer temp_value;
      begin
        temp_value = value-1;
        for (log2=0; temp_value>0; log2=log2+1)
          temp_value = temp_value>>1;
      end
    endfunction
  `endif
  `ifdef _SIM_HAVE_CLOG2
    parameter arg2_bitsize = $clog2(PRECISION);
  `else
    parameter arg2_bitsize = log2(PRECISION);
  `endif
  generate
    if(BITSIZE_in2 > arg2_bitsize)
      assign out1 = in1 >> (in2[arg2_bitsize-1:0]);
    else
      assign out1 = in1 >> in2;
  endgenerate

endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module UUdata_converter_FU(in1,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_out1=1;
  // IN
  input [BITSIZE_in1-1:0] in1;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  generate
  if (BITSIZE_out1 <= BITSIZE_in1)
  begin
    assign out1 = in1[BITSIZE_out1-1:0];
  end
  else
  begin
    assign out1 = {{(BITSIZE_out1-BITSIZE_in1){1'b0}},in1};
  end
  endgenerate
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Fabrizio Ferrandi <fabrizio.ferrandi@polimi.it>, Christian Pilato <christian.pilato@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module MUX_GATE(sel,
  in1,
  in2,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_in2=1,
    BITSIZE_out1=1;
  // IN
  input sel;
  input [BITSIZE_in1-1:0] in1;
  input [BITSIZE_in2-1:0] in2;
  // OUT
  output [BITSIZE_out1-1:0] out1;
  assign out1 = sel ? in1 : in2;
endmodule

// Datapath RTL description for keccak
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module datapath_keccak(clock,
  reset,
  in_port_Pd226,
  S_oe_ram,
  S_we_ram,
  S_addr_ram,
  S_Wdata_ram,
  S_data_ram_size,
  M_Rdata_ram,
  M_DataRdy,
  Sin_Rdata_ram,
  Sin_DataRdy,
  Sout_Rdata_ram,
  Sout_DataRdy,
  Min_oe_ram,
  Min_we_ram,
  Min_addr_ram,
  Min_Wdata_ram,
  Min_data_ram_size,
  Mout_oe_ram,
  Mout_we_ram,
  Mout_addr_ram,
  Mout_Wdata_ram,
  Mout_data_ram_size,
  fuselector_BMEMORY_CTRL_35_i0_LOAD,
  fuselector_BMEMORY_CTRL_35_i0_STORE,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1,
  selector_MUX_25_reg_24_0_0_0,
  selector_MUX_27_reg_26_0_0_0,
  selector_MUX_28_reg_27_0_0_0,
  selector_MUX_29_reg_28_0_0_0,
  selector_MUX_30_reg_29_0_0_0,
  selector_MUX_32_reg_30_0_0_0,
  selector_MUX_33_reg_31_0_0_0,
  selector_MUX_34_reg_32_0_0_0,
  selector_MUX_35_reg_33_0_0_0,
  selector_MUX_36_reg_34_0_0_0,
  selector_MUX_37_reg_35_0_0_0,
  selector_MUX_38_reg_36_0_0_0,
  selector_MUX_39_reg_37_0_0_0,
  selector_MUX_40_reg_38_0_0_0,
  selector_MUX_41_reg_39_0_0_0,
  selector_MUX_43_reg_40_0_0_0,
  selector_MUX_44_reg_41_0_0_0,
  selector_MUX_45_reg_42_0_0_0,
  selector_MUX_46_reg_43_0_0_0,
  selector_MUX_47_reg_44_0_0_0,
  selector_MUX_48_reg_45_0_0_0,
  selector_MUX_49_reg_46_0_0_0,
  selector_MUX_50_reg_47_0_0_0,
  selector_MUX_51_reg_48_0_0_0,
  selector_MUX_52_reg_49_0_0_0,
  selector_MUX_54_reg_50_0_0_0,
  wrenable_reg_0,
  wrenable_reg_1,
  wrenable_reg_10,
  wrenable_reg_11,
  wrenable_reg_12,
  wrenable_reg_13,
  wrenable_reg_14,
  wrenable_reg_15,
  wrenable_reg_16,
  wrenable_reg_17,
  wrenable_reg_18,
  wrenable_reg_19,
  wrenable_reg_2,
  wrenable_reg_20,
  wrenable_reg_21,
  wrenable_reg_22,
  wrenable_reg_23,
  wrenable_reg_24,
  wrenable_reg_25,
  wrenable_reg_26,
  wrenable_reg_27,
  wrenable_reg_28,
  wrenable_reg_29,
  wrenable_reg_3,
  wrenable_reg_30,
  wrenable_reg_31,
  wrenable_reg_32,
  wrenable_reg_33,
  wrenable_reg_34,
  wrenable_reg_35,
  wrenable_reg_36,
  wrenable_reg_37,
  wrenable_reg_38,
  wrenable_reg_39,
  wrenable_reg_4,
  wrenable_reg_40,
  wrenable_reg_41,
  wrenable_reg_42,
  wrenable_reg_43,
  wrenable_reg_44,
  wrenable_reg_45,
  wrenable_reg_46,
  wrenable_reg_47,
  wrenable_reg_48,
  wrenable_reg_49,
  wrenable_reg_5,
  wrenable_reg_50,
  wrenable_reg_51,
  wrenable_reg_52,
  wrenable_reg_53,
  wrenable_reg_54,
  wrenable_reg_55,
  wrenable_reg_56,
  wrenable_reg_57,
  wrenable_reg_58,
  wrenable_reg_59,
  wrenable_reg_6,
  wrenable_reg_60,
  wrenable_reg_61,
  wrenable_reg_62,
  wrenable_reg_63,
  wrenable_reg_64,
  wrenable_reg_65,
  wrenable_reg_66,
  wrenable_reg_67,
  wrenable_reg_68,
  wrenable_reg_69,
  wrenable_reg_7,
  wrenable_reg_70,
  wrenable_reg_71,
  wrenable_reg_72,
  wrenable_reg_73,
  wrenable_reg_74,
  wrenable_reg_75,
  wrenable_reg_76,
  wrenable_reg_77,
  wrenable_reg_78,
  wrenable_reg_8,
  wrenable_reg_9,
  OUT_CONDITION_keccak_423514_423900);
  parameter MEM_var_423955_423514=1024;
  // IN
  input clock;
  input reset;
  input [31:0] in_port_Pd226;
  input S_oe_ram;
  input S_we_ram;
  input [31:0] S_addr_ram;
  input [63:0] S_Wdata_ram;
  input [6:0] S_data_ram_size;
  input [63:0] M_Rdata_ram;
  input M_DataRdy;
  input [63:0] Sin_Rdata_ram;
  input Sin_DataRdy;
  input Min_oe_ram;
  input Min_we_ram;
  input [31:0] Min_addr_ram;
  input [63:0] Min_Wdata_ram;
  input [6:0] Min_data_ram_size;
  input fuselector_BMEMORY_CTRL_35_i0_LOAD;
  input fuselector_BMEMORY_CTRL_35_i0_STORE;
  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0;
  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1;
  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10;
  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11;
  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12;
  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2;
  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3;
  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4;
  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5;
  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6;
  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7;
  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8;
  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9;
  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0;
  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1;
  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2;
  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3;
  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4;
  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5;
  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0;
  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1;
  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2;
  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0;
  input selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1;
  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0;
  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1;
  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10;
  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11;
  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12;
  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2;
  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3;
  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4;
  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5;
  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6;
  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7;
  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8;
  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9;
  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0;
  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1;
  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2;
  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3;
  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4;
  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5;
  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6;
  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0;
  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1;
  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2;
  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0;
  input selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1;
  input selector_MUX_25_reg_24_0_0_0;
  input selector_MUX_27_reg_26_0_0_0;
  input selector_MUX_28_reg_27_0_0_0;
  input selector_MUX_29_reg_28_0_0_0;
  input selector_MUX_30_reg_29_0_0_0;
  input selector_MUX_32_reg_30_0_0_0;
  input selector_MUX_33_reg_31_0_0_0;
  input selector_MUX_34_reg_32_0_0_0;
  input selector_MUX_35_reg_33_0_0_0;
  input selector_MUX_36_reg_34_0_0_0;
  input selector_MUX_37_reg_35_0_0_0;
  input selector_MUX_38_reg_36_0_0_0;
  input selector_MUX_39_reg_37_0_0_0;
  input selector_MUX_40_reg_38_0_0_0;
  input selector_MUX_41_reg_39_0_0_0;
  input selector_MUX_43_reg_40_0_0_0;
  input selector_MUX_44_reg_41_0_0_0;
  input selector_MUX_45_reg_42_0_0_0;
  input selector_MUX_46_reg_43_0_0_0;
  input selector_MUX_47_reg_44_0_0_0;
  input selector_MUX_48_reg_45_0_0_0;
  input selector_MUX_49_reg_46_0_0_0;
  input selector_MUX_50_reg_47_0_0_0;
  input selector_MUX_51_reg_48_0_0_0;
  input selector_MUX_52_reg_49_0_0_0;
  input selector_MUX_54_reg_50_0_0_0;
  input wrenable_reg_0;
  input wrenable_reg_1;
  input wrenable_reg_10;
  input wrenable_reg_11;
  input wrenable_reg_12;
  input wrenable_reg_13;
  input wrenable_reg_14;
  input wrenable_reg_15;
  input wrenable_reg_16;
  input wrenable_reg_17;
  input wrenable_reg_18;
  input wrenable_reg_19;
  input wrenable_reg_2;
  input wrenable_reg_20;
  input wrenable_reg_21;
  input wrenable_reg_22;
  input wrenable_reg_23;
  input wrenable_reg_24;
  input wrenable_reg_25;
  input wrenable_reg_26;
  input wrenable_reg_27;
  input wrenable_reg_28;
  input wrenable_reg_29;
  input wrenable_reg_3;
  input wrenable_reg_30;
  input wrenable_reg_31;
  input wrenable_reg_32;
  input wrenable_reg_33;
  input wrenable_reg_34;
  input wrenable_reg_35;
  input wrenable_reg_36;
  input wrenable_reg_37;
  input wrenable_reg_38;
  input wrenable_reg_39;
  input wrenable_reg_4;
  input wrenable_reg_40;
  input wrenable_reg_41;
  input wrenable_reg_42;
  input wrenable_reg_43;
  input wrenable_reg_44;
  input wrenable_reg_45;
  input wrenable_reg_46;
  input wrenable_reg_47;
  input wrenable_reg_48;
  input wrenable_reg_49;
  input wrenable_reg_5;
  input wrenable_reg_50;
  input wrenable_reg_51;
  input wrenable_reg_52;
  input wrenable_reg_53;
  input wrenable_reg_54;
  input wrenable_reg_55;
  input wrenable_reg_56;
  input wrenable_reg_57;
  input wrenable_reg_58;
  input wrenable_reg_59;
  input wrenable_reg_6;
  input wrenable_reg_60;
  input wrenable_reg_61;
  input wrenable_reg_62;
  input wrenable_reg_63;
  input wrenable_reg_64;
  input wrenable_reg_65;
  input wrenable_reg_66;
  input wrenable_reg_67;
  input wrenable_reg_68;
  input wrenable_reg_69;
  input wrenable_reg_7;
  input wrenable_reg_70;
  input wrenable_reg_71;
  input wrenable_reg_72;
  input wrenable_reg_73;
  input wrenable_reg_74;
  input wrenable_reg_75;
  input wrenable_reg_76;
  input wrenable_reg_77;
  input wrenable_reg_78;
  input wrenable_reg_8;
  input wrenable_reg_9;
  // OUT
  output [63:0] Sout_Rdata_ram;
  output Sout_DataRdy;
  output Mout_oe_ram;
  output Mout_we_ram;
  output [31:0] Mout_addr_ram;
  output [63:0] Mout_Wdata_ram;
  output [6:0] Mout_data_ram_size;
  output OUT_CONDITION_keccak_423514_423900;
  // Component and signal declarations
  wire [63:0] out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0;
  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_0;
  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_1;
  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_10;
  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_11;
  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_12;
  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_2;
  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_3;
  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_4;
  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_5;
  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_6;
  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_7;
  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_8;
  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_0_9;
  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_1_0;
  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_1_1;
  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_1_2;
  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_1_3;
  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_1_4;
  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_1_5;
  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_2_0;
  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_2_1;
  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_2_2;
  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_3_0;
  wire [63:0] out_MUX_0_BMEMORY_CTRL_35_i0_0_3_1;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_0;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_1;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_10;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_11;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_12;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_2;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_3;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_4;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_5;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_6;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_7;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_8;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_0_9;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_1_0;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_1_1;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_1_2;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_1_3;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_1_4;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_1_5;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_1_6;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_2_0;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_2_1;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_2_2;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_3_0;
  wire [31:0] out_MUX_1_BMEMORY_CTRL_35_i0_1_3_1;
  wire [31:0] out_MUX_25_reg_24_0_0_0;
  wire [63:0] out_MUX_27_reg_26_0_0_0;
  wire [63:0] out_MUX_28_reg_27_0_0_0;
  wire [63:0] out_MUX_29_reg_28_0_0_0;
  wire [63:0] out_MUX_30_reg_29_0_0_0;
  wire [63:0] out_MUX_32_reg_30_0_0_0;
  wire [63:0] out_MUX_33_reg_31_0_0_0;
  wire [63:0] out_MUX_34_reg_32_0_0_0;
  wire [63:0] out_MUX_35_reg_33_0_0_0;
  wire [63:0] out_MUX_36_reg_34_0_0_0;
  wire [63:0] out_MUX_37_reg_35_0_0_0;
  wire [63:0] out_MUX_38_reg_36_0_0_0;
  wire [63:0] out_MUX_39_reg_37_0_0_0;
  wire [63:0] out_MUX_40_reg_38_0_0_0;
  wire [63:0] out_MUX_41_reg_39_0_0_0;
  wire [63:0] out_MUX_43_reg_40_0_0_0;
  wire [63:0] out_MUX_44_reg_41_0_0_0;
  wire [63:0] out_MUX_45_reg_42_0_0_0;
  wire [63:0] out_MUX_46_reg_43_0_0_0;
  wire [63:0] out_MUX_47_reg_44_0_0_0;
  wire [63:0] out_MUX_48_reg_45_0_0_0;
  wire [63:0] out_MUX_49_reg_46_0_0_0;
  wire [63:0] out_MUX_50_reg_47_0_0_0;
  wire [63:0] out_MUX_51_reg_48_0_0_0;
  wire [63:0] out_MUX_52_reg_49_0_0_0;
  wire [63:0] out_MUX_54_reg_50_0_0_0;
  wire [31:0] out_addr_expr_FU_3_i0_fu_keccak_423514_424612;
  wire [31:0] out_addr_expr_FU_5_i0_fu_keccak_423514_424627;
  wire [7:0] out_const_0;
  wire out_const_1;
  wire [5:0] out_const_10;
  wire [6:0] out_const_11;
  wire [7:0] out_const_12;
  wire [7:0] out_const_13;
  wire [5:0] out_const_14;
  wire [3:0] out_const_15;
  wire [4:0] out_const_16;
  wire [5:0] out_const_17;
  wire [6:0] out_const_18;
  wire [7:0] out_const_19;
  wire [1:0] out_const_2;
  wire [5:0] out_const_20;
  wire [4:0] out_const_21;
  wire [7:0] out_const_22;
  wire [5:0] out_const_23;
  wire [5:0] out_const_24;
  wire [6:0] out_const_25;
  wire [7:0] out_const_26;
  wire [5:0] out_const_27;
  wire [7:0] out_const_28;
  wire [31:0] out_const_29;
  wire [3:0] out_const_3;
  wire [1:0] out_const_30;
  wire [2:0] out_const_31;
  wire [4:0] out_const_32;
  wire [5:0] out_const_33;
  wire [6:0] out_const_34;
  wire [7:0] out_const_35;
  wire [4:0] out_const_36;
  wire [6:0] out_const_37;
  wire [4:0] out_const_38;
  wire [5:0] out_const_39;
  wire [4:0] out_const_4;
  wire [3:0] out_const_40;
  wire [4:0] out_const_41;
  wire [5:0] out_const_42;
  wire [6:0] out_const_43;
  wire [3:0] out_const_44;
  wire [6:0] out_const_45;
  wire [5:0] out_const_46;
  wire [5:0] out_const_47;
  wire [63:0] out_const_48;
  wire [5:0] out_const_5;
  wire [6:0] out_const_6;
  wire [7:0] out_const_7;
  wire [7:0] out_const_8;
  wire [4:0] out_const_9;
  wire [6:0] out_conv_out_const_0_8_7;
  wire out_read_cond_FU_33_i0_fu_keccak_423514_423900;
  wire [31:0] out_reg_0_reg_0;
  wire [31:0] out_reg_10_reg_10;
  wire [31:0] out_reg_11_reg_11;
  wire [31:0] out_reg_12_reg_12;
  wire [31:0] out_reg_13_reg_13;
  wire [31:0] out_reg_14_reg_14;
  wire [31:0] out_reg_15_reg_15;
  wire [31:0] out_reg_16_reg_16;
  wire [31:0] out_reg_17_reg_17;
  wire [31:0] out_reg_18_reg_18;
  wire [31:0] out_reg_19_reg_19;
  wire [31:0] out_reg_1_reg_1;
  wire [31:0] out_reg_20_reg_20;
  wire [31:0] out_reg_21_reg_21;
  wire [31:0] out_reg_22_reg_22;
  wire [31:0] out_reg_23_reg_23;
  wire [31:0] out_reg_24_reg_24;
  wire [28:0] out_reg_25_reg_25;
  wire [63:0] out_reg_26_reg_26;
  wire [63:0] out_reg_27_reg_27;
  wire [63:0] out_reg_28_reg_28;
  wire [63:0] out_reg_29_reg_29;
  wire [31:0] out_reg_2_reg_2;
  wire [63:0] out_reg_30_reg_30;
  wire [63:0] out_reg_31_reg_31;
  wire [63:0] out_reg_32_reg_32;
  wire [63:0] out_reg_33_reg_33;
  wire [63:0] out_reg_34_reg_34;
  wire [63:0] out_reg_35_reg_35;
  wire [63:0] out_reg_36_reg_36;
  wire [63:0] out_reg_37_reg_37;
  wire [63:0] out_reg_38_reg_38;
  wire [63:0] out_reg_39_reg_39;
  wire [31:0] out_reg_3_reg_3;
  wire [63:0] out_reg_40_reg_40;
  wire [63:0] out_reg_41_reg_41;
  wire [63:0] out_reg_42_reg_42;
  wire [63:0] out_reg_43_reg_43;
  wire [63:0] out_reg_44_reg_44;
  wire [63:0] out_reg_45_reg_45;
  wire [63:0] out_reg_46_reg_46;
  wire [63:0] out_reg_47_reg_47;
  wire [63:0] out_reg_48_reg_48;
  wire [63:0] out_reg_49_reg_49;
  wire [31:0] out_reg_4_reg_4;
  wire [63:0] out_reg_50_reg_50;
  wire [63:0] out_reg_51_reg_51;
  wire [63:0] out_reg_52_reg_52;
  wire [63:0] out_reg_53_reg_53;
  wire [63:0] out_reg_54_reg_54;
  wire [63:0] out_reg_55_reg_55;
  wire [63:0] out_reg_56_reg_56;
  wire [63:0] out_reg_57_reg_57;
  wire [63:0] out_reg_58_reg_58;
  wire [63:0] out_reg_59_reg_59;
  wire [31:0] out_reg_5_reg_5;
  wire [63:0] out_reg_60_reg_60;
  wire [63:0] out_reg_61_reg_61;
  wire [63:0] out_reg_62_reg_62;
  wire [63:0] out_reg_63_reg_63;
  wire [63:0] out_reg_64_reg_64;
  wire [63:0] out_reg_65_reg_65;
  wire [63:0] out_reg_66_reg_66;
  wire [63:0] out_reg_67_reg_67;
  wire [63:0] out_reg_68_reg_68;
  wire [63:0] out_reg_69_reg_69;
  wire [31:0] out_reg_6_reg_6;
  wire [63:0] out_reg_70_reg_70;
  wire [63:0] out_reg_71_reg_71;
  wire [63:0] out_reg_72_reg_72;
  wire [63:0] out_reg_73_reg_73;
  wire [31:0] out_reg_74_reg_74;
  wire [63:0] out_reg_75_reg_75;
  wire [63:0] out_reg_76_reg_76;
  wire out_reg_77_reg_77;
  wire [63:0] out_reg_78_reg_78;
  wire [31:0] out_reg_7_reg_7;
  wire [31:0] out_reg_8_reg_8;
  wire [31:0] out_reg_9_reg_9;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i0_fu_keccak_423514_423824;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i10_fu_keccak_423514_423853;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i11_fu_keccak_423514_423856;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i12_fu_keccak_423514_423859;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i13_fu_keccak_423514_423862;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i14_fu_keccak_423514_423865;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i15_fu_keccak_423514_423868;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i16_fu_keccak_423514_423871;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i17_fu_keccak_423514_423874;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i18_fu_keccak_423514_423877;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i19_fu_keccak_423514_423880;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i1_fu_keccak_423514_423826;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i20_fu_keccak_423514_423883;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i21_fu_keccak_423514_423886;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i22_fu_keccak_423514_423889;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i23_fu_keccak_423514_423892;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i24_fu_keccak_423514_423895;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i2_fu_keccak_423514_423829;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i3_fu_keccak_423514_423832;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i4_fu_keccak_423514_423835;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i5_fu_keccak_423514_423838;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i6_fu_keccak_423514_423841;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i7_fu_keccak_423514_423844;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i8_fu_keccak_423514_423847;
  wire [63:0] out_ui_bit_and_expr_FU_64_64_64_36_i9_fu_keccak_423514_423850;
  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i0_fu_keccak_423514_423823;
  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i10_fu_keccak_423514_423852;
  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i11_fu_keccak_423514_423855;
  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i12_fu_keccak_423514_423858;
  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i13_fu_keccak_423514_423861;
  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i14_fu_keccak_423514_423864;
  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i15_fu_keccak_423514_423867;
  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i16_fu_keccak_423514_423870;
  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i17_fu_keccak_423514_423873;
  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i18_fu_keccak_423514_423876;
  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i19_fu_keccak_423514_423879;
  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i1_fu_keccak_423514_423825;
  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i20_fu_keccak_423514_423882;
  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i21_fu_keccak_423514_423885;
  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i22_fu_keccak_423514_423888;
  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i23_fu_keccak_423514_423891;
  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i24_fu_keccak_423514_423894;
  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i2_fu_keccak_423514_423828;
  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i3_fu_keccak_423514_423831;
  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i4_fu_keccak_423514_423834;
  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i5_fu_keccak_423514_423837;
  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i6_fu_keccak_423514_423840;
  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i7_fu_keccak_423514_423843;
  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i8_fu_keccak_423514_423846;
  wire [63:0] out_ui_bit_xor_expr_FU_64_0_64_37_i9_fu_keccak_423514_423849;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i0_fu_keccak_423514_423744;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i10_fu_keccak_423514_423754;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i11_fu_keccak_423514_423755;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i12_fu_keccak_423514_423756;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i13_fu_keccak_423514_423757;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i14_fu_keccak_423514_423758;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i15_fu_keccak_423514_423759;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i16_fu_keccak_423514_423760;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i17_fu_keccak_423514_423761;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i18_fu_keccak_423514_423762;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i19_fu_keccak_423514_423763;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i1_fu_keccak_423514_423745;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i20_fu_keccak_423514_423765;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i21_fu_keccak_423514_423766;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i22_fu_keccak_423514_423767;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i23_fu_keccak_423514_423768;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i24_fu_keccak_423514_423769;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i25_fu_keccak_423514_423770;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i26_fu_keccak_423514_423772;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i27_fu_keccak_423514_423773;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i28_fu_keccak_423514_423774;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i29_fu_keccak_423514_423775;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i2_fu_keccak_423514_423746;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i30_fu_keccak_423514_423776;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i31_fu_keccak_423514_423777;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i32_fu_keccak_423514_423779;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i33_fu_keccak_423514_423780;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i34_fu_keccak_423514_423781;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i35_fu_keccak_423514_423782;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i36_fu_keccak_423514_423783;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i37_fu_keccak_423514_423784;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i38_fu_keccak_423514_423786;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i39_fu_keccak_423514_423787;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i3_fu_keccak_423514_423747;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i40_fu_keccak_423514_423788;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i41_fu_keccak_423514_423789;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i42_fu_keccak_423514_423790;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i43_fu_keccak_423514_423791;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i44_fu_keccak_423514_423793;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i45_fu_keccak_423514_423794;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i46_fu_keccak_423514_423795;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i47_fu_keccak_423514_423796;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i48_fu_keccak_423514_423797;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i49_fu_keccak_423514_423798;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i4_fu_keccak_423514_423748;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i50_fu_keccak_423514_423827;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i51_fu_keccak_423514_423830;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i52_fu_keccak_423514_423833;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i53_fu_keccak_423514_423836;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i54_fu_keccak_423514_423839;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i55_fu_keccak_423514_423842;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i56_fu_keccak_423514_423845;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i57_fu_keccak_423514_423848;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i58_fu_keccak_423514_423851;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i59_fu_keccak_423514_423854;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i5_fu_keccak_423514_423749;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i60_fu_keccak_423514_423857;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i61_fu_keccak_423514_423860;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i62_fu_keccak_423514_423863;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i63_fu_keccak_423514_423866;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i64_fu_keccak_423514_423869;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i65_fu_keccak_423514_423872;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i66_fu_keccak_423514_423875;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i67_fu_keccak_423514_423878;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i68_fu_keccak_423514_423881;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i69_fu_keccak_423514_423884;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i6_fu_keccak_423514_423750;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i70_fu_keccak_423514_423887;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i71_fu_keccak_423514_423890;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i72_fu_keccak_423514_423893;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i73_fu_keccak_423514_423896;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i74_fu_keccak_423514_423897;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i75_fu_keccak_423514_423898;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i7_fu_keccak_423514_423751;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i8_fu_keccak_423514_423752;
  wire [63:0] out_ui_bit_xor_expr_FU_64_64_64_38_i9_fu_keccak_423514_423753;
  wire out_ui_eq_expr_FU_32_32_32_39_i0_fu_keccak_423514_424616;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_40_i0_fu_keccak_423514_423764;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_40_i1_fu_keccak_423514_423771;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_40_i2_fu_keccak_423514_423778;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_40_i3_fu_keccak_423514_423785;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_40_i4_fu_keccak_423514_423792;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_40_i5_fu_keccak_423514_423799;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_41_i0_fu_keccak_423514_423800;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_42_i0_fu_keccak_423514_423801;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_43_i0_fu_keccak_423514_423802;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_44_i0_fu_keccak_423514_423803;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_45_i0_fu_keccak_423514_423804;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_46_i0_fu_keccak_423514_423805;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_47_i0_fu_keccak_423514_423806;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_48_i0_fu_keccak_423514_423807;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_49_i0_fu_keccak_423514_423808;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_50_i0_fu_keccak_423514_423809;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_51_i0_fu_keccak_423514_423810;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_52_i0_fu_keccak_423514_423811;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_53_i0_fu_keccak_423514_423812;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_54_i0_fu_keccak_423514_423813;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_55_i0_fu_keccak_423514_423814;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_56_i0_fu_keccak_423514_423815;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_57_i0_fu_keccak_423514_423816;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_58_i0_fu_keccak_423514_423817;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_59_i0_fu_keccak_423514_423818;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_60_i0_fu_keccak_423514_423819;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_61_i0_fu_keccak_423514_423820;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_62_i0_fu_keccak_423514_423821;
  wire [63:0] out_ui_fshl_expr_FU_64_64_0_64_63_i0_fu_keccak_423514_423822;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_64_i0_fu_keccak_423514_423531;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_65_i0_fu_keccak_423514_423532;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_66_i0_fu_keccak_423514_423533;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_67_i0_fu_keccak_423514_423534;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_68_i0_fu_keccak_423514_423535;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_68_i1_fu_keccak_423514_423743;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_69_i0_fu_keccak_423514_423536;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_70_i0_fu_keccak_423514_423537;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_71_i0_fu_keccak_423514_423538;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_72_i0_fu_keccak_423514_423539;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_73_i0_fu_keccak_423514_423540;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_74_i0_fu_keccak_423514_423541;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_75_i0_fu_keccak_423514_423542;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_76_i0_fu_keccak_423514_423543;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_77_i0_fu_keccak_423514_423544;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_78_i0_fu_keccak_423514_423545;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_79_i0_fu_keccak_423514_423546;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_80_i0_fu_keccak_423514_423547;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_81_i0_fu_keccak_423514_423548;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_82_i0_fu_keccak_423514_423549;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_83_i0_fu_keccak_423514_423550;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_84_i0_fu_keccak_423514_423551;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_85_i0_fu_keccak_423514_423552;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_86_i0_fu_keccak_423514_423553;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_87_i0_fu_keccak_423514_423554;
  wire [31:0] out_ui_pointer_plus_expr_FU_32_0_32_87_i1_fu_keccak_423514_424624;
  wire [28:0] out_ui_rshift_expr_FU_32_0_32_88_i0_fu_keccak_423514_424631;
  wire [28:0] out_ui_rshift_expr_FU_32_0_32_88_i1_fu_keccak_423514_424636;
  wire [31:0] out_ui_view_convert_expr_FU_4_i0_fu_keccak_423514_424602;
  wire [31:0] out_ui_view_convert_expr_FU_6_i0_fu_keccak_423514_424614;
  wire [63:0] out_uu_conv_conn_obj_0_UUdata_converter_FU_uu_conv_0;
  wire [63:0] out_uu_conv_conn_obj_10_UUdata_converter_FU_uu_conv_2;
  wire [63:0] out_uu_conv_conn_obj_11_UUdata_converter_FU_uu_conv_3;
  wire [63:0] out_uu_conv_conn_obj_12_UUdata_converter_FU_uu_conv_4;
  wire [63:0] out_uu_conv_conn_obj_13_UUdata_converter_FU_uu_conv_5;
  wire [63:0] out_uu_conv_conn_obj_14_UUdata_converter_FU_uu_conv_6;
  wire [63:0] out_uu_conv_conn_obj_15_UUdata_converter_FU_uu_conv_7;
  wire [63:0] out_uu_conv_conn_obj_16_UUdata_converter_FU_uu_conv_8;
  wire [63:0] out_uu_conv_conn_obj_17_UUdata_converter_FU_uu_conv_9;
  wire [63:0] out_uu_conv_conn_obj_18_UUdata_converter_FU_uu_conv_10;
  wire [63:0] out_uu_conv_conn_obj_19_UUdata_converter_FU_uu_conv_11;
  wire [63:0] out_uu_conv_conn_obj_1_UUdata_converter_FU_uu_conv_1;
  wire [63:0] out_uu_conv_conn_obj_20_UUdata_converter_FU_uu_conv_13;
  wire [63:0] out_uu_conv_conn_obj_21_UUdata_converter_FU_uu_conv_14;
  wire [63:0] out_uu_conv_conn_obj_22_UUdata_converter_FU_uu_conv_15;
  wire [63:0] out_uu_conv_conn_obj_23_UUdata_converter_FU_uu_conv_16;
  wire [63:0] out_uu_conv_conn_obj_24_UUdata_converter_FU_uu_conv_17;
  wire [63:0] out_uu_conv_conn_obj_2_UUdata_converter_FU_uu_conv_12;
  wire [63:0] out_uu_conv_conn_obj_3_UUdata_converter_FU_uu_conv_18;
  wire [63:0] out_uu_conv_conn_obj_4_UUdata_converter_FU_uu_conv_19;
  wire [63:0] out_uu_conv_conn_obj_5_UUdata_converter_FU_uu_conv_20;
  wire [63:0] out_uu_conv_conn_obj_6_UUdata_converter_FU_uu_conv_21;
  wire [63:0] out_uu_conv_conn_obj_7_UUdata_converter_FU_uu_conv_22;
  wire [63:0] out_uu_conv_conn_obj_8_UUdata_converter_FU_uu_conv_23;
  wire [63:0] out_uu_conv_conn_obj_9_UUdata_converter_FU_uu_conv_24;
  wire [63:0] sig_out_bus_mergerMout_Wdata_ram0_;
  wire [31:0] sig_out_bus_mergerMout_addr_ram1_;
  wire [6:0] sig_out_bus_mergerMout_data_ram_size2_;
  wire sig_out_bus_mergerMout_oe_ram3_;
  wire sig_out_bus_mergerMout_we_ram4_;
  wire sig_out_bus_mergerSout_DataRdy5_;
  wire [63:0] sig_out_bus_mergerSout_Rdata_ram6_;
  
  BMEMORY_CTRL #(.BITSIZE_in1(64),
    .BITSIZE_in2(32),
    .BITSIZE_in3(7),
    .BITSIZE_out1(64),
    .BITSIZE_Min_addr_ram(32),
    .BITSIZE_Mout_addr_ram(32),
    .BITSIZE_M_Rdata_ram(64),
    .BITSIZE_Min_Wdata_ram(64),
    .BITSIZE_Mout_Wdata_ram(64),
    .BITSIZE_Min_data_ram_size(7),
    .BITSIZE_Mout_data_ram_size(7)) BMEMORY_CTRL_35_i0 (.out1(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0),
    .Mout_oe_ram(sig_out_bus_mergerMout_oe_ram3_),
    .Mout_we_ram(sig_out_bus_mergerMout_we_ram4_),
    .Mout_addr_ram(sig_out_bus_mergerMout_addr_ram1_),
    .Mout_Wdata_ram(sig_out_bus_mergerMout_Wdata_ram0_),
    .Mout_data_ram_size(sig_out_bus_mergerMout_data_ram_size2_),
    .clock(clock),
    .in1(out_MUX_0_BMEMORY_CTRL_35_i0_0_3_1),
    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_3_1),
    .in3(out_conv_out_const_0_8_7),
    .in4(out_const_1),
    .sel_LOAD(fuselector_BMEMORY_CTRL_35_i0_LOAD),
    .sel_STORE(fuselector_BMEMORY_CTRL_35_i0_STORE),
    .Min_oe_ram(Min_oe_ram),
    .Min_we_ram(Min_we_ram),
    .Min_addr_ram(Min_addr_ram),
    .M_Rdata_ram(M_Rdata_ram),
    .Min_Wdata_ram(Min_Wdata_ram),
    .Min_data_ram_size(Min_data_ram_size),
    .M_DataRdy(M_DataRdy));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_0 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_0),
    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0),
    .in1(out_uu_conv_conn_obj_0_UUdata_converter_FU_uu_conv_0),
    .in2(out_uu_conv_conn_obj_1_UUdata_converter_FU_uu_conv_1));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_1 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_1),
    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1),
    .in1(out_uu_conv_conn_obj_10_UUdata_converter_FU_uu_conv_2),
    .in2(out_uu_conv_conn_obj_11_UUdata_converter_FU_uu_conv_3));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_10 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_10),
    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10),
    .in1(out_uu_conv_conn_obj_5_UUdata_converter_FU_uu_conv_20),
    .in2(out_uu_conv_conn_obj_6_UUdata_converter_FU_uu_conv_21));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_11 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_11),
    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11),
    .in1(out_uu_conv_conn_obj_7_UUdata_converter_FU_uu_conv_22),
    .in2(out_uu_conv_conn_obj_8_UUdata_converter_FU_uu_conv_23));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_12 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_12),
    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12),
    .in1(out_uu_conv_conn_obj_9_UUdata_converter_FU_uu_conv_24),
    .in2(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_0));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_2 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_2),
    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2),
    .in1(out_uu_conv_conn_obj_12_UUdata_converter_FU_uu_conv_4),
    .in2(out_uu_conv_conn_obj_13_UUdata_converter_FU_uu_conv_5));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_3 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_3),
    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3),
    .in1(out_uu_conv_conn_obj_14_UUdata_converter_FU_uu_conv_6),
    .in2(out_uu_conv_conn_obj_15_UUdata_converter_FU_uu_conv_7));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_4 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_4),
    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4),
    .in1(out_uu_conv_conn_obj_16_UUdata_converter_FU_uu_conv_8),
    .in2(out_uu_conv_conn_obj_17_UUdata_converter_FU_uu_conv_9));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_5 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_5),
    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5),
    .in1(out_uu_conv_conn_obj_18_UUdata_converter_FU_uu_conv_10),
    .in2(out_uu_conv_conn_obj_19_UUdata_converter_FU_uu_conv_11));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_6 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_6),
    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6),
    .in1(out_uu_conv_conn_obj_2_UUdata_converter_FU_uu_conv_12),
    .in2(out_uu_conv_conn_obj_20_UUdata_converter_FU_uu_conv_13));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_7 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_7),
    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7),
    .in1(out_uu_conv_conn_obj_21_UUdata_converter_FU_uu_conv_14),
    .in2(out_uu_conv_conn_obj_22_UUdata_converter_FU_uu_conv_15));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_8 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_8),
    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8),
    .in1(out_uu_conv_conn_obj_23_UUdata_converter_FU_uu_conv_16),
    .in2(out_uu_conv_conn_obj_24_UUdata_converter_FU_uu_conv_17));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_0_9 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_9),
    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9),
    .in1(out_uu_conv_conn_obj_3_UUdata_converter_FU_uu_conv_18),
    .in2(out_uu_conv_conn_obj_4_UUdata_converter_FU_uu_conv_19));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_1_0 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_1_0),
    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0),
    .in1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_1),
    .in2(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_2));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_1_1 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_1_1),
    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1),
    .in1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_3),
    .in2(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_4));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_1_2 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_1_2),
    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2),
    .in1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_5),
    .in2(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_6));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_1_3 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_1_3),
    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3),
    .in1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_7),
    .in2(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_8));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_1_4 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_1_4),
    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4),
    .in1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_9),
    .in2(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_10));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_1_5 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_1_5),
    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5),
    .in1(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_11),
    .in2(out_MUX_0_BMEMORY_CTRL_35_i0_0_0_12));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_2_0 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_2_0),
    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0),
    .in1(out_MUX_0_BMEMORY_CTRL_35_i0_0_1_0),
    .in2(out_MUX_0_BMEMORY_CTRL_35_i0_0_1_1));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_2_1 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_2_1),
    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1),
    .in1(out_MUX_0_BMEMORY_CTRL_35_i0_0_1_2),
    .in2(out_MUX_0_BMEMORY_CTRL_35_i0_0_1_3));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_2_2 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_2_2),
    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2),
    .in1(out_MUX_0_BMEMORY_CTRL_35_i0_0_1_4),
    .in2(out_MUX_0_BMEMORY_CTRL_35_i0_0_1_5));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_3_0 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_3_0),
    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0),
    .in1(out_MUX_0_BMEMORY_CTRL_35_i0_0_2_0),
    .in2(out_MUX_0_BMEMORY_CTRL_35_i0_0_2_1));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_0_BMEMORY_CTRL_35_i0_0_3_1 (.out1(out_MUX_0_BMEMORY_CTRL_35_i0_0_3_1),
    .sel(selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1),
    .in1(out_MUX_0_BMEMORY_CTRL_35_i0_0_2_2),
    .in2(out_MUX_0_BMEMORY_CTRL_35_i0_0_3_0));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_0 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_0),
    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0),
    .in1(out_reg_9_reg_9),
    .in2(out_reg_8_reg_8));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_1 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_1),
    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1),
    .in1(out_reg_7_reg_7),
    .in2(out_reg_6_reg_6));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_10 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_10),
    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10),
    .in1(out_reg_12_reg_12),
    .in2(out_reg_11_reg_11));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_11 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_11),
    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11),
    .in1(out_reg_10_reg_10),
    .in2(out_reg_1_reg_1));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_12 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_12),
    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12),
    .in1(out_reg_0_reg_0),
    .in2(in_port_Pd226));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_2 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_2),
    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2),
    .in1(out_reg_5_reg_5),
    .in2(out_reg_4_reg_4));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_3 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_3),
    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3),
    .in1(out_reg_3_reg_3),
    .in2(out_reg_24_reg_24));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_4 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_4),
    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4),
    .in1(out_reg_23_reg_23),
    .in2(out_reg_22_reg_22));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_5 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_5),
    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5),
    .in1(out_reg_21_reg_21),
    .in2(out_reg_20_reg_20));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_6 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_6),
    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6),
    .in1(out_reg_2_reg_2),
    .in2(out_reg_19_reg_19));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_7 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_7),
    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7),
    .in1(out_reg_18_reg_18),
    .in2(out_reg_17_reg_17));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_8 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_8),
    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8),
    .in1(out_reg_16_reg_16),
    .in2(out_reg_15_reg_15));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_0_9 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_9),
    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9),
    .in1(out_reg_14_reg_14),
    .in2(out_reg_13_reg_13));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_1_0 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_0),
    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0),
    .in1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_0),
    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_1));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_1_1 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_1),
    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1),
    .in1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_2),
    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_3));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_1_2 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_2),
    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2),
    .in1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_4),
    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_5));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_1_3 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_3),
    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3),
    .in1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_6),
    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_7));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_1_4 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_4),
    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4),
    .in1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_8),
    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_9));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_1_5 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_5),
    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5),
    .in1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_10),
    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_11));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_1_6 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_6),
    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6),
    .in1(out_MUX_1_BMEMORY_CTRL_35_i0_1_0_12),
    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_0));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_2_0 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_2_0),
    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0),
    .in1(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_1),
    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_2));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_2_1 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_2_1),
    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1),
    .in1(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_3),
    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_4));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_2_2 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_2_2),
    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2),
    .in1(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_5),
    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_1_6));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_3_0 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_3_0),
    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0),
    .in1(out_MUX_1_BMEMORY_CTRL_35_i0_1_2_0),
    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_2_1));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_1_BMEMORY_CTRL_35_i0_1_3_1 (.out1(out_MUX_1_BMEMORY_CTRL_35_i0_1_3_1),
    .sel(selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1),
    .in1(out_MUX_1_BMEMORY_CTRL_35_i0_1_2_2),
    .in2(out_MUX_1_BMEMORY_CTRL_35_i0_1_3_0));
  MUX_GATE #(.BITSIZE_in1(32),
    .BITSIZE_in2(32),
    .BITSIZE_out1(32)) MUX_25_reg_24_0_0_0 (.out1(out_MUX_25_reg_24_0_0_0),
    .sel(selector_MUX_25_reg_24_0_0_0),
    .in1(out_reg_74_reg_74),
    .in2(out_ui_view_convert_expr_FU_4_i0_fu_keccak_423514_424602));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_27_reg_26_0_0_0 (.out1(out_MUX_27_reg_26_0_0_0),
    .sel(selector_MUX_27_reg_26_0_0_0),
    .in1(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i75_fu_keccak_423514_423898));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_28_reg_27_0_0_0 (.out1(out_MUX_28_reg_27_0_0_0),
    .sel(selector_MUX_28_reg_27_0_0_0),
    .in1(out_reg_73_reg_73),
    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_29_reg_28_0_0_0 (.out1(out_MUX_29_reg_28_0_0_0),
    .sel(selector_MUX_29_reg_28_0_0_0),
    .in1(out_reg_72_reg_72),
    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_30_reg_29_0_0_0 (.out1(out_MUX_30_reg_29_0_0_0),
    .sel(selector_MUX_30_reg_29_0_0_0),
    .in1(out_reg_71_reg_71),
    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_32_reg_30_0_0_0 (.out1(out_MUX_32_reg_30_0_0_0),
    .sel(selector_MUX_32_reg_30_0_0_0),
    .in1(out_reg_70_reg_70),
    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_33_reg_31_0_0_0 (.out1(out_MUX_33_reg_31_0_0_0),
    .sel(selector_MUX_33_reg_31_0_0_0),
    .in1(out_reg_69_reg_69),
    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_34_reg_32_0_0_0 (.out1(out_MUX_34_reg_32_0_0_0),
    .sel(selector_MUX_34_reg_32_0_0_0),
    .in1(out_reg_68_reg_68),
    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_35_reg_33_0_0_0 (.out1(out_MUX_35_reg_33_0_0_0),
    .sel(selector_MUX_35_reg_33_0_0_0),
    .in1(out_reg_67_reg_67),
    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_36_reg_34_0_0_0 (.out1(out_MUX_36_reg_34_0_0_0),
    .sel(selector_MUX_36_reg_34_0_0_0),
    .in1(out_reg_66_reg_66),
    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_37_reg_35_0_0_0 (.out1(out_MUX_37_reg_35_0_0_0),
    .sel(selector_MUX_37_reg_35_0_0_0),
    .in1(out_reg_65_reg_65),
    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_38_reg_36_0_0_0 (.out1(out_MUX_38_reg_36_0_0_0),
    .sel(selector_MUX_38_reg_36_0_0_0),
    .in1(out_reg_64_reg_64),
    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_39_reg_37_0_0_0 (.out1(out_MUX_39_reg_37_0_0_0),
    .sel(selector_MUX_39_reg_37_0_0_0),
    .in1(out_reg_63_reg_63),
    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_40_reg_38_0_0_0 (.out1(out_MUX_40_reg_38_0_0_0),
    .sel(selector_MUX_40_reg_38_0_0_0),
    .in1(out_reg_62_reg_62),
    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_41_reg_39_0_0_0 (.out1(out_MUX_41_reg_39_0_0_0),
    .sel(selector_MUX_41_reg_39_0_0_0),
    .in1(out_reg_61_reg_61),
    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_43_reg_40_0_0_0 (.out1(out_MUX_43_reg_40_0_0_0),
    .sel(selector_MUX_43_reg_40_0_0_0),
    .in1(out_reg_60_reg_60),
    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_44_reg_41_0_0_0 (.out1(out_MUX_44_reg_41_0_0_0),
    .sel(selector_MUX_44_reg_41_0_0_0),
    .in1(out_reg_59_reg_59),
    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_45_reg_42_0_0_0 (.out1(out_MUX_45_reg_42_0_0_0),
    .sel(selector_MUX_45_reg_42_0_0_0),
    .in1(out_reg_58_reg_58),
    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_46_reg_43_0_0_0 (.out1(out_MUX_46_reg_43_0_0_0),
    .sel(selector_MUX_46_reg_43_0_0_0),
    .in1(out_reg_57_reg_57),
    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_47_reg_44_0_0_0 (.out1(out_MUX_47_reg_44_0_0_0),
    .sel(selector_MUX_47_reg_44_0_0_0),
    .in1(out_reg_56_reg_56),
    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_48_reg_45_0_0_0 (.out1(out_MUX_48_reg_45_0_0_0),
    .sel(selector_MUX_48_reg_45_0_0_0),
    .in1(out_reg_55_reg_55),
    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_49_reg_46_0_0_0 (.out1(out_MUX_49_reg_46_0_0_0),
    .sel(selector_MUX_49_reg_46_0_0_0),
    .in1(out_reg_54_reg_54),
    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_50_reg_47_0_0_0 (.out1(out_MUX_50_reg_47_0_0_0),
    .sel(selector_MUX_50_reg_47_0_0_0),
    .in1(out_reg_53_reg_53),
    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_51_reg_48_0_0_0 (.out1(out_MUX_51_reg_48_0_0_0),
    .sel(selector_MUX_51_reg_48_0_0_0),
    .in1(out_reg_52_reg_52),
    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_52_reg_49_0_0_0 (.out1(out_MUX_52_reg_49_0_0_0),
    .sel(selector_MUX_52_reg_49_0_0_0),
    .in1(out_reg_51_reg_51),
    .in2(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0));
  MUX_GATE #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) MUX_54_reg_50_0_0_0 (.out1(out_MUX_54_reg_50_0_0_0),
    .sel(selector_MUX_54_reg_50_0_0_0),
    .in1(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i73_fu_keccak_423514_423896));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_0 (.out1(out_uu_conv_conn_obj_0_UUdata_converter_FU_uu_conv_0),
    .in1(out_reg_78_reg_78));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_1 (.out1(out_uu_conv_conn_obj_1_UUdata_converter_FU_uu_conv_1),
    .in1(out_reg_73_reg_73));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_10 (.out1(out_uu_conv_conn_obj_18_UUdata_converter_FU_uu_conv_10),
    .in1(out_reg_56_reg_56));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_11 (.out1(out_uu_conv_conn_obj_19_UUdata_converter_FU_uu_conv_11),
    .in1(out_reg_55_reg_55));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_12 (.out1(out_uu_conv_conn_obj_2_UUdata_converter_FU_uu_conv_12),
    .in1(out_reg_72_reg_72));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_13 (.out1(out_uu_conv_conn_obj_20_UUdata_converter_FU_uu_conv_13),
    .in1(out_reg_54_reg_54));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_14 (.out1(out_uu_conv_conn_obj_21_UUdata_converter_FU_uu_conv_14),
    .in1(out_reg_53_reg_53));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_15 (.out1(out_uu_conv_conn_obj_22_UUdata_converter_FU_uu_conv_15),
    .in1(out_reg_52_reg_52));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_16 (.out1(out_uu_conv_conn_obj_23_UUdata_converter_FU_uu_conv_16),
    .in1(out_reg_51_reg_51));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_17 (.out1(out_uu_conv_conn_obj_24_UUdata_converter_FU_uu_conv_17),
    .in1(out_reg_50_reg_50));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_18 (.out1(out_uu_conv_conn_obj_3_UUdata_converter_FU_uu_conv_18),
    .in1(out_reg_71_reg_71));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_19 (.out1(out_uu_conv_conn_obj_4_UUdata_converter_FU_uu_conv_19),
    .in1(out_reg_70_reg_70));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_2 (.out1(out_uu_conv_conn_obj_10_UUdata_converter_FU_uu_conv_2),
    .in1(out_reg_64_reg_64));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_20 (.out1(out_uu_conv_conn_obj_5_UUdata_converter_FU_uu_conv_20),
    .in1(out_reg_69_reg_69));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_21 (.out1(out_uu_conv_conn_obj_6_UUdata_converter_FU_uu_conv_21),
    .in1(out_reg_68_reg_68));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_22 (.out1(out_uu_conv_conn_obj_7_UUdata_converter_FU_uu_conv_22),
    .in1(out_reg_67_reg_67));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_23 (.out1(out_uu_conv_conn_obj_8_UUdata_converter_FU_uu_conv_23),
    .in1(out_reg_66_reg_66));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_24 (.out1(out_uu_conv_conn_obj_9_UUdata_converter_FU_uu_conv_24),
    .in1(out_reg_65_reg_65));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_3 (.out1(out_uu_conv_conn_obj_11_UUdata_converter_FU_uu_conv_3),
    .in1(out_reg_63_reg_63));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_4 (.out1(out_uu_conv_conn_obj_12_UUdata_converter_FU_uu_conv_4),
    .in1(out_reg_62_reg_62));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_5 (.out1(out_uu_conv_conn_obj_13_UUdata_converter_FU_uu_conv_5),
    .in1(out_reg_61_reg_61));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_6 (.out1(out_uu_conv_conn_obj_14_UUdata_converter_FU_uu_conv_6),
    .in1(out_reg_60_reg_60));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_7 (.out1(out_uu_conv_conn_obj_15_UUdata_converter_FU_uu_conv_7),
    .in1(out_reg_59_reg_59));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_8 (.out1(out_uu_conv_conn_obj_16_UUdata_converter_FU_uu_conv_8),
    .in1(out_reg_58_reg_58));
  UUdata_converter_FU #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) UUdata_converter_FU_uu_conv_9 (.out1(out_uu_conv_conn_obj_17_UUdata_converter_FU_uu_conv_9),
    .in1(out_reg_57_reg_57));
  ARRAY_1D_STD_BRAM #(.BITSIZE_in1(8),
    .BITSIZE_in2(32),
    .BITSIZE_in3(7),
    .BITSIZE_out1(8),
    .BITSIZE_S_addr_ram(32),
    .BITSIZE_S_Wdata_ram(64),
    .BITSIZE_Sin_Rdata_ram(64),
    .BITSIZE_Sout_Rdata_ram(64),
    .BITSIZE_S_data_ram_size(7),
    .MEMORY_INIT_file("/home/lennart/.cache/rust-hls/a0f02b6d218bcf7a60d0b2b295928582-h0CFkeWMHp/array_ref_423955.mem"),
    .n_elements(192),
    .data_size(8),
    .address_space_begin(MEM_var_423955_423514),
    .address_space_rangesize(1024),
    .BUS_PIPELINED(1),
    .BRAM_BITSIZE(64),
    .PRIVATE_MEMORY(0),
    .USE_SPARSE_MEMORY(1),
    .BITSIZE_proxy_in1(64),
    .BITSIZE_proxy_in2(32),
    .BITSIZE_proxy_in3(7),
    .BITSIZE_proxy_out1(64)) array_423955_0 (.Sout_Rdata_ram(sig_out_bus_mergerSout_Rdata_ram6_),
    .Sout_DataRdy(sig_out_bus_mergerSout_DataRdy5_),
    .clock(clock),
    .reset(reset),
    .in1(8'b00000000),
    .in2(32'b00000000000000000000000000000000),
    .in3(7'b0000000),
    .in4(1'b0),
    .sel_LOAD(1'b0),
    .sel_STORE(1'b0),
    .S_oe_ram(S_oe_ram),
    .S_we_ram(S_we_ram),
    .S_addr_ram(S_addr_ram),
    .S_Wdata_ram(S_Wdata_ram),
    .Sin_Rdata_ram(Sin_Rdata_ram),
    .S_data_ram_size(S_data_ram_size),
    .Sin_DataRdy(Sin_DataRdy),
    .proxy_in1(64'b0000000000000000000000000000000000000000000000000000000000000000),
    .proxy_in2(32'b00000000000000000000000000000000),
    .proxy_in3(7'b0000000),
    .proxy_sel_LOAD(1'b0),
    .proxy_sel_STORE(1'b0));
  constant_value #(.BITSIZE_out1(8),
    .value(8'b01000000)) const_0 (.out1(out_const_0));
  constant_value #(.BITSIZE_out1(1),
    .value(1'b1)) const_1 (.out1(out_const_1));
  constant_value #(.BITSIZE_out1(6),
    .value(6'b100100)) const_10 (.out1(out_const_10));
  constant_value #(.BITSIZE_out1(7),
    .value(7'b1001000)) const_11 (.out1(out_const_11));
  constant_value #(.BITSIZE_out1(8),
    .value(8'b10010000)) const_12 (.out1(out_const_12));
  constant_value #(.BITSIZE_out1(8),
    .value(8'b10011000)) const_13 (.out1(out_const_13));
  constant_value #(.BITSIZE_out1(6),
    .value(6'b100111)) const_14 (.out1(out_const_14));
  constant_value #(.BITSIZE_out1(4),
    .value(4'b1010)) const_15 (.out1(out_const_15));
  constant_value #(.BITSIZE_out1(5),
    .value(5'b10100)) const_16 (.out1(out_const_16));
  constant_value #(.BITSIZE_out1(6),
    .value(6'b101000)) const_17 (.out1(out_const_17));
  constant_value #(.BITSIZE_out1(7),
    .value(7'b1010000)) const_18 (.out1(out_const_18));
  constant_value #(.BITSIZE_out1(8),
    .value(8'b10100000)) const_19 (.out1(out_const_19));
  constant_value #(.BITSIZE_out1(2),
    .value(2'b10)) const_2 (.out1(out_const_2));
  constant_value #(.BITSIZE_out1(6),
    .value(6'b101001)) const_20 (.out1(out_const_20));
  constant_value #(.BITSIZE_out1(5),
    .value(5'b10101)) const_21 (.out1(out_const_21));
  constant_value #(.BITSIZE_out1(8),
    .value(8'b10101000)) const_22 (.out1(out_const_22));
  constant_value #(.BITSIZE_out1(6),
    .value(6'b101011)) const_23 (.out1(out_const_23));
  constant_value #(.BITSIZE_out1(6),
    .value(6'b101100)) const_24 (.out1(out_const_24));
  constant_value #(.BITSIZE_out1(7),
    .value(7'b1011000)) const_25 (.out1(out_const_25));
  constant_value #(.BITSIZE_out1(8),
    .value(8'b10110000)) const_26 (.out1(out_const_26));
  constant_value #(.BITSIZE_out1(6),
    .value(6'b101101)) const_27 (.out1(out_const_27));
  constant_value #(.BITSIZE_out1(8),
    .value(8'b10111000)) const_28 (.out1(out_const_28));
  constant_value #(.BITSIZE_out1(32),
    .value(MEM_var_423955_423514)) const_29 (.out1(out_const_29));
  constant_value #(.BITSIZE_out1(4),
    .value(4'b1000)) const_3 (.out1(out_const_3));
  constant_value #(.BITSIZE_out1(2),
    .value(2'b11)) const_30 (.out1(out_const_30));
  constant_value #(.BITSIZE_out1(3),
    .value(3'b110)) const_31 (.out1(out_const_31));
  constant_value #(.BITSIZE_out1(5),
    .value(5'b11000)) const_32 (.out1(out_const_32));
  constant_value #(.BITSIZE_out1(6),
    .value(6'b110000)) const_33 (.out1(out_const_33));
  constant_value #(.BITSIZE_out1(7),
    .value(7'b1100000)) const_34 (.out1(out_const_34));
  constant_value #(.BITSIZE_out1(8),
    .value(8'b11000000)) const_35 (.out1(out_const_35));
  constant_value #(.BITSIZE_out1(5),
    .value(5'b11001)) const_36 (.out1(out_const_36));
  constant_value #(.BITSIZE_out1(7),
    .value(7'b1101000)) const_37 (.out1(out_const_37));
  constant_value #(.BITSIZE_out1(5),
    .value(5'b11011)) const_38 (.out1(out_const_38));
  constant_value #(.BITSIZE_out1(6),
    .value(6'b110111)) const_39 (.out1(out_const_39));
  constant_value #(.BITSIZE_out1(5),
    .value(5'b10000)) const_4 (.out1(out_const_4));
  constant_value #(.BITSIZE_out1(4),
    .value(4'b1110)) const_40 (.out1(out_const_40));
  constant_value #(.BITSIZE_out1(5),
    .value(5'b11100)) const_41 (.out1(out_const_41));
  constant_value #(.BITSIZE_out1(6),
    .value(6'b111000)) const_42 (.out1(out_const_42));
  constant_value #(.BITSIZE_out1(7),
    .value(7'b1110000)) const_43 (.out1(out_const_43));
  constant_value #(.BITSIZE_out1(4),
    .value(4'b1111)) const_44 (.out1(out_const_44));
  constant_value #(.BITSIZE_out1(7),
    .value(7'b1111000)) const_45 (.out1(out_const_45));
  constant_value #(.BITSIZE_out1(6),
    .value(6'b111101)) const_46 (.out1(out_const_46));
  constant_value #(.BITSIZE_out1(6),
    .value(6'b111110)) const_47 (.out1(out_const_47));
  constant_value #(.BITSIZE_out1(64),
    .value(64'b1111111111111111111111111111111111111111111111111111111111111111)) const_48 (.out1(out_const_48));
  constant_value #(.BITSIZE_out1(6),
    .value(6'b100000)) const_5 (.out1(out_const_5));
  constant_value #(.BITSIZE_out1(7),
    .value(7'b1000000)) const_6 (.out1(out_const_6));
  constant_value #(.BITSIZE_out1(8),
    .value(8'b10000000)) const_7 (.out1(out_const_7));
  constant_value #(.BITSIZE_out1(8),
    .value(8'b10001000)) const_8 (.out1(out_const_8));
  constant_value #(.BITSIZE_out1(5),
    .value(5'b10010)) const_9 (.out1(out_const_9));
  UUdata_converter_FU #(.BITSIZE_in1(8),
    .BITSIZE_out1(7)) conv_out_const_0_8_7 (.out1(out_conv_out_const_0_8_7),
    .in1(out_const_0));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(6),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_423531 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_64_i0_fu_keccak_423514_423531),
    .in1(in_port_Pd226),
    .in2(out_const_17));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(7),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_423532 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_65_i0_fu_keccak_423514_423532),
    .in1(in_port_Pd226),
    .in2(out_const_18));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(7),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_423533 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_66_i0_fu_keccak_423514_423533),
    .in1(in_port_Pd226),
    .in2(out_const_45));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(8),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_423534 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_67_i0_fu_keccak_423514_423534),
    .in1(in_port_Pd226),
    .in2(out_const_19));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(4),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_423535 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_68_i0_fu_keccak_423514_423535),
    .in1(in_port_Pd226),
    .in2(out_const_3));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(6),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_423536 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_69_i0_fu_keccak_423514_423536),
    .in1(in_port_Pd226),
    .in2(out_const_33));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(7),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_423537 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_70_i0_fu_keccak_423514_423537),
    .in1(in_port_Pd226),
    .in2(out_const_25));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(8),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_423538 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_71_i0_fu_keccak_423514_423538),
    .in1(in_port_Pd226),
    .in2(out_const_7));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(8),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_423539 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_72_i0_fu_keccak_423514_423539),
    .in1(in_port_Pd226),
    .in2(out_const_22));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(5),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_423540 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_73_i0_fu_keccak_423514_423540),
    .in1(in_port_Pd226),
    .in2(out_const_4));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(6),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_423541 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_74_i0_fu_keccak_423514_423541),
    .in1(in_port_Pd226),
    .in2(out_const_42));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(7),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_423542 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_75_i0_fu_keccak_423514_423542),
    .in1(in_port_Pd226),
    .in2(out_const_34));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(8),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_423543 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_76_i0_fu_keccak_423514_423543),
    .in1(in_port_Pd226),
    .in2(out_const_8));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(8),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_423544 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_77_i0_fu_keccak_423514_423544),
    .in1(in_port_Pd226),
    .in2(out_const_26));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(5),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_423545 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_78_i0_fu_keccak_423514_423545),
    .in1(in_port_Pd226),
    .in2(out_const_32));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(7),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_423546 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_79_i0_fu_keccak_423514_423546),
    .in1(in_port_Pd226),
    .in2(out_const_6));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(7),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_423547 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_80_i0_fu_keccak_423514_423547),
    .in1(in_port_Pd226),
    .in2(out_const_37));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(8),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_423548 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_81_i0_fu_keccak_423514_423548),
    .in1(in_port_Pd226),
    .in2(out_const_12));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(8),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_423549 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_82_i0_fu_keccak_423514_423549),
    .in1(in_port_Pd226),
    .in2(out_const_28));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(6),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_423550 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_83_i0_fu_keccak_423514_423550),
    .in1(in_port_Pd226),
    .in2(out_const_5));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(7),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_423551 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_84_i0_fu_keccak_423514_423551),
    .in1(in_port_Pd226),
    .in2(out_const_11));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(7),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_423552 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_85_i0_fu_keccak_423514_423552),
    .in1(in_port_Pd226),
    .in2(out_const_43));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(8),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_423553 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_86_i0_fu_keccak_423514_423553),
    .in1(in_port_Pd226),
    .in2(out_const_13));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(8),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_423554 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_87_i0_fu_keccak_423514_423554),
    .in1(in_port_Pd226),
    .in2(out_const_35));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(4),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_423743 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_68_i1_fu_keccak_423514_423743),
    .in1(out_reg_24_reg_24),
    .in2(out_const_3));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423744 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i0_fu_keccak_423514_423744),
    .in1(out_reg_29_reg_29),
    .in2(out_reg_30_reg_30));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423745 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i1_fu_keccak_423514_423745),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i0_fu_keccak_423514_423744),
    .in2(out_reg_28_reg_28));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423746 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i2_fu_keccak_423514_423746),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i1_fu_keccak_423514_423745),
    .in2(out_reg_27_reg_27));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423747 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i3_fu_keccak_423514_423747),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i2_fu_keccak_423514_423746),
    .in2(out_reg_26_reg_26));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423748 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i4_fu_keccak_423514_423748),
    .in1(out_reg_34_reg_34),
    .in2(out_reg_35_reg_35));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423749 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i5_fu_keccak_423514_423749),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i4_fu_keccak_423514_423748),
    .in2(out_reg_33_reg_33));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423750 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i6_fu_keccak_423514_423750),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i5_fu_keccak_423514_423749),
    .in2(out_reg_32_reg_32));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423751 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i7_fu_keccak_423514_423751),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i6_fu_keccak_423514_423750),
    .in2(out_reg_31_reg_31));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423752 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i8_fu_keccak_423514_423752),
    .in1(out_reg_39_reg_39),
    .in2(out_reg_40_reg_40));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423753 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i9_fu_keccak_423514_423753),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i8_fu_keccak_423514_423752),
    .in2(out_reg_38_reg_38));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423754 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i10_fu_keccak_423514_423754),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i9_fu_keccak_423514_423753),
    .in2(out_reg_37_reg_37));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423755 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i11_fu_keccak_423514_423755),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i10_fu_keccak_423514_423754),
    .in2(out_reg_36_reg_36));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423756 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i12_fu_keccak_423514_423756),
    .in1(out_reg_44_reg_44),
    .in2(out_reg_45_reg_45));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423757 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i13_fu_keccak_423514_423757),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i12_fu_keccak_423514_423756),
    .in2(out_reg_43_reg_43));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423758 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i14_fu_keccak_423514_423758),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i13_fu_keccak_423514_423757),
    .in2(out_reg_42_reg_42));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423759 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i15_fu_keccak_423514_423759),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i14_fu_keccak_423514_423758),
    .in2(out_reg_41_reg_41));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423760 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i16_fu_keccak_423514_423760),
    .in1(out_reg_49_reg_49),
    .in2(out_reg_50_reg_50));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423761 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i17_fu_keccak_423514_423761),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i16_fu_keccak_423514_423760),
    .in2(out_reg_48_reg_48));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423762 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i18_fu_keccak_423514_423762),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i17_fu_keccak_423514_423761),
    .in2(out_reg_47_reg_47));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423763 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i19_fu_keccak_423514_423763),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i18_fu_keccak_423514_423762),
    .in2(out_reg_46_reg_46));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(1),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423764 (.out1(out_ui_fshl_expr_FU_64_64_0_64_40_i0_fu_keccak_423514_423764),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i7_fu_keccak_423514_423751),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i7_fu_keccak_423514_423751),
    .in3(out_const_1));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423765 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i20_fu_keccak_423514_423765),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_40_i0_fu_keccak_423514_423764),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i19_fu_keccak_423514_423763));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423766 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i21_fu_keccak_423514_423766),
    .in1(out_reg_26_reg_26),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i20_fu_keccak_423514_423765));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423767 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i22_fu_keccak_423514_423767),
    .in1(out_reg_27_reg_27),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i20_fu_keccak_423514_423765));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423768 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i23_fu_keccak_423514_423768),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i20_fu_keccak_423514_423765),
    .in2(out_reg_28_reg_28));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423769 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i24_fu_keccak_423514_423769),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i20_fu_keccak_423514_423765),
    .in2(out_reg_29_reg_29));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423770 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i25_fu_keccak_423514_423770),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i20_fu_keccak_423514_423765),
    .in2(out_reg_30_reg_30));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(1),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423771 (.out1(out_ui_fshl_expr_FU_64_64_0_64_40_i1_fu_keccak_423514_423771),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i11_fu_keccak_423514_423755),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i11_fu_keccak_423514_423755),
    .in3(out_const_1));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423772 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i26_fu_keccak_423514_423772),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i3_fu_keccak_423514_423747),
    .in2(out_ui_fshl_expr_FU_64_64_0_64_40_i1_fu_keccak_423514_423771));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423773 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i27_fu_keccak_423514_423773),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i26_fu_keccak_423514_423772),
    .in2(out_reg_31_reg_31));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423774 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i28_fu_keccak_423514_423774),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i26_fu_keccak_423514_423772),
    .in2(out_reg_32_reg_32));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423775 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i29_fu_keccak_423514_423775),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i26_fu_keccak_423514_423772),
    .in2(out_reg_33_reg_33));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423776 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i30_fu_keccak_423514_423776),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i26_fu_keccak_423514_423772),
    .in2(out_reg_34_reg_34));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423777 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i31_fu_keccak_423514_423777),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i26_fu_keccak_423514_423772),
    .in2(out_reg_35_reg_35));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(1),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423778 (.out1(out_ui_fshl_expr_FU_64_64_0_64_40_i2_fu_keccak_423514_423778),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i15_fu_keccak_423514_423759),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i15_fu_keccak_423514_423759),
    .in3(out_const_1));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423779 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i32_fu_keccak_423514_423779),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i7_fu_keccak_423514_423751),
    .in2(out_ui_fshl_expr_FU_64_64_0_64_40_i2_fu_keccak_423514_423778));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423780 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i33_fu_keccak_423514_423780),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i32_fu_keccak_423514_423779),
    .in2(out_reg_36_reg_36));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423781 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i34_fu_keccak_423514_423781),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i32_fu_keccak_423514_423779),
    .in2(out_reg_37_reg_37));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423782 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i35_fu_keccak_423514_423782),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i32_fu_keccak_423514_423779),
    .in2(out_reg_38_reg_38));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423783 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i36_fu_keccak_423514_423783),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i32_fu_keccak_423514_423779),
    .in2(out_reg_39_reg_39));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423784 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i37_fu_keccak_423514_423784),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i32_fu_keccak_423514_423779),
    .in2(out_reg_40_reg_40));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(1),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423785 (.out1(out_ui_fshl_expr_FU_64_64_0_64_40_i3_fu_keccak_423514_423785),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i19_fu_keccak_423514_423763),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i19_fu_keccak_423514_423763),
    .in3(out_const_1));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423786 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i38_fu_keccak_423514_423786),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i11_fu_keccak_423514_423755),
    .in2(out_ui_fshl_expr_FU_64_64_0_64_40_i3_fu_keccak_423514_423785));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423787 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i39_fu_keccak_423514_423787),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i38_fu_keccak_423514_423786),
    .in2(out_reg_41_reg_41));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423788 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i40_fu_keccak_423514_423788),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i38_fu_keccak_423514_423786),
    .in2(out_reg_42_reg_42));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423789 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i41_fu_keccak_423514_423789),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i38_fu_keccak_423514_423786),
    .in2(out_reg_43_reg_43));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423790 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i42_fu_keccak_423514_423790),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i38_fu_keccak_423514_423786),
    .in2(out_reg_44_reg_44));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423791 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i43_fu_keccak_423514_423791),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i38_fu_keccak_423514_423786),
    .in2(out_reg_45_reg_45));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(1),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423792 (.out1(out_ui_fshl_expr_FU_64_64_0_64_40_i4_fu_keccak_423514_423792),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i3_fu_keccak_423514_423747),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i3_fu_keccak_423514_423747),
    .in3(out_const_1));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423793 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i44_fu_keccak_423514_423793),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_40_i4_fu_keccak_423514_423792),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i15_fu_keccak_423514_423759));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423794 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i45_fu_keccak_423514_423794),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i44_fu_keccak_423514_423793),
    .in2(out_reg_46_reg_46));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423795 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i46_fu_keccak_423514_423795),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i44_fu_keccak_423514_423793),
    .in2(out_reg_47_reg_47));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423796 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i47_fu_keccak_423514_423796),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i44_fu_keccak_423514_423793),
    .in2(out_reg_48_reg_48));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423797 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i48_fu_keccak_423514_423797),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i44_fu_keccak_423514_423793),
    .in2(out_reg_49_reg_49));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423798 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i49_fu_keccak_423514_423798),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i44_fu_keccak_423514_423793),
    .in2(out_reg_50_reg_50));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(1),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423799 (.out1(out_ui_fshl_expr_FU_64_64_0_64_40_i5_fu_keccak_423514_423799),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i27_fu_keccak_423514_423773),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i27_fu_keccak_423514_423773),
    .in3(out_const_1));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(2),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423800 (.out1(out_ui_fshl_expr_FU_64_64_0_64_41_i0_fu_keccak_423514_423800),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i23_fu_keccak_423514_423768),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i23_fu_keccak_423514_423768),
    .in3(out_const_30));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(3),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423801 (.out1(out_ui_fshl_expr_FU_64_64_0_64_42_i0_fu_keccak_423514_423801),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i34_fu_keccak_423514_423781),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i34_fu_keccak_423514_423781),
    .in3(out_const_31));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(4),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423802 (.out1(out_ui_fshl_expr_FU_64_64_0_64_43_i0_fu_keccak_423514_423802),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i29_fu_keccak_423514_423775),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i29_fu_keccak_423514_423775),
    .in3(out_const_15));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(4),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423803 (.out1(out_ui_fshl_expr_FU_64_64_0_64_44_i0_fu_keccak_423514_423803),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i36_fu_keccak_423514_423783),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i36_fu_keccak_423514_423783),
    .in3(out_const_44));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(5),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423804 (.out1(out_ui_fshl_expr_FU_64_64_0_64_45_i0_fu_keccak_423514_423804),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i42_fu_keccak_423514_423790),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i42_fu_keccak_423514_423790),
    .in3(out_const_21));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(5),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423805 (.out1(out_ui_fshl_expr_FU_64_64_0_64_46_i0_fu_keccak_423514_423805),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i39_fu_keccak_423514_423787),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i39_fu_keccak_423514_423787),
    .in3(out_const_41));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(6),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423806 (.out1(out_ui_fshl_expr_FU_64_64_0_64_47_i0_fu_keccak_423514_423806),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i22_fu_keccak_423514_423767),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i22_fu_keccak_423514_423767),
    .in3(out_const_10));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(6),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423807 (.out1(out_ui_fshl_expr_FU_64_64_0_64_48_i0_fu_keccak_423514_423807),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i30_fu_keccak_423514_423776),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i30_fu_keccak_423514_423776),
    .in3(out_const_27));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(6),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423808 (.out1(out_ui_fshl_expr_FU_64_64_0_64_49_i0_fu_keccak_423514_423808),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i40_fu_keccak_423514_423788),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i40_fu_keccak_423514_423788),
    .in3(out_const_39));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(2),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423809 (.out1(out_ui_fshl_expr_FU_64_64_0_64_50_i0_fu_keccak_423514_423809),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i31_fu_keccak_423514_423777),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i31_fu_keccak_423514_423777),
    .in3(out_const_2));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(4),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423810 (.out1(out_ui_fshl_expr_FU_64_64_0_64_51_i0_fu_keccak_423514_423810),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i49_fu_keccak_423514_423798),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i49_fu_keccak_423514_423798),
    .in3(out_const_40));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(5),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423811 (.out1(out_ui_fshl_expr_FU_64_64_0_64_52_i0_fu_keccak_423514_423811),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i45_fu_keccak_423514_423794),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i45_fu_keccak_423514_423794),
    .in3(out_const_38));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(6),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423812 (.out1(out_ui_fshl_expr_FU_64_64_0_64_53_i0_fu_keccak_423514_423812),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i24_fu_keccak_423514_423769),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i24_fu_keccak_423514_423769),
    .in3(out_const_20));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(6),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423813 (.out1(out_ui_fshl_expr_FU_64_64_0_64_54_i0_fu_keccak_423514_423813),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i43_fu_keccak_423514_423791),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i43_fu_keccak_423514_423791),
    .in3(out_const_42));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(4),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423814 (.out1(out_ui_fshl_expr_FU_64_64_0_64_55_i0_fu_keccak_423514_423814),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i48_fu_keccak_423514_423797),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i48_fu_keccak_423514_423797),
    .in3(out_const_3));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(5),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423815 (.out1(out_ui_fshl_expr_FU_64_64_0_64_56_i0_fu_keccak_423514_423815),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i41_fu_keccak_423514_423789),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i41_fu_keccak_423514_423789),
    .in3(out_const_36));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(6),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423816 (.out1(out_ui_fshl_expr_FU_64_64_0_64_57_i0_fu_keccak_423514_423816),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i35_fu_keccak_423514_423782),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i35_fu_keccak_423514_423782),
    .in3(out_const_23));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(6),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423817 (.out1(out_ui_fshl_expr_FU_64_64_0_64_58_i0_fu_keccak_423514_423817),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i33_fu_keccak_423514_423780),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i33_fu_keccak_423514_423780),
    .in3(out_const_47));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(5),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423818 (.out1(out_ui_fshl_expr_FU_64_64_0_64_59_i0_fu_keccak_423514_423818),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i25_fu_keccak_423514_423770),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i25_fu_keccak_423514_423770),
    .in3(out_const_9));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(6),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423819 (.out1(out_ui_fshl_expr_FU_64_64_0_64_60_i0_fu_keccak_423514_423819),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i47_fu_keccak_423514_423796),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i47_fu_keccak_423514_423796),
    .in3(out_const_14));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(6),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423820 (.out1(out_ui_fshl_expr_FU_64_64_0_64_61_i0_fu_keccak_423514_423820),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i37_fu_keccak_423514_423784),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i37_fu_keccak_423514_423784),
    .in3(out_const_46));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(5),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423821 (.out1(out_ui_fshl_expr_FU_64_64_0_64_62_i0_fu_keccak_423514_423821),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i46_fu_keccak_423514_423795),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i46_fu_keccak_423514_423795),
    .in3(out_const_16));
  ui_fshl_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_in3(6),
    .BITSIZE_out1(64),
    .PRECISION(64)) fu_keccak_423514_423822 (.out1(out_ui_fshl_expr_FU_64_64_0_64_63_i0_fu_keccak_423514_423822),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i28_fu_keccak_423514_423774),
    .in2(out_ui_bit_xor_expr_FU_64_64_64_38_i28_fu_keccak_423514_423774),
    .in3(out_const_24));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423823 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i0_fu_keccak_423514_423823),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_63_i0_fu_keccak_423514_423822),
    .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423824 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i0_fu_keccak_423514_423824),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_57_i0_fu_keccak_423514_423816),
    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i0_fu_keccak_423514_423823));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423825 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i1_fu_keccak_423514_423825),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_57_i0_fu_keccak_423514_423816),
    .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423826 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i1_fu_keccak_423514_423826),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_45_i0_fu_keccak_423514_423804),
    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i1_fu_keccak_423514_423825));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423827 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i50_fu_keccak_423514_423827),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_63_i0_fu_keccak_423514_423822),
    .in2(out_ui_bit_and_expr_FU_64_64_64_36_i1_fu_keccak_423514_423826));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423828 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i2_fu_keccak_423514_423828),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_45_i0_fu_keccak_423514_423804),
    .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423829 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i2_fu_keccak_423514_423829),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_51_i0_fu_keccak_423514_423810),
    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i2_fu_keccak_423514_423828));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423830 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i51_fu_keccak_423514_423830),
    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i2_fu_keccak_423514_423829),
    .in2(out_ui_fshl_expr_FU_64_64_0_64_57_i0_fu_keccak_423514_423816));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423831 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i3_fu_keccak_423514_423831),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_51_i0_fu_keccak_423514_423810),
    .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423832 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i3_fu_keccak_423514_423832),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i21_fu_keccak_423514_423766),
    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i3_fu_keccak_423514_423831));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423833 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i52_fu_keccak_423514_423833),
    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i3_fu_keccak_423514_423832),
    .in2(out_ui_fshl_expr_FU_64_64_0_64_45_i0_fu_keccak_423514_423804));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423834 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i4_fu_keccak_423514_423834),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i21_fu_keccak_423514_423766),
    .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423835 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i4_fu_keccak_423514_423835),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_63_i0_fu_keccak_423514_423822),
    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i4_fu_keccak_423514_423834));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423836 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i53_fu_keccak_423514_423836),
    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i4_fu_keccak_423514_423835),
    .in2(out_ui_fshl_expr_FU_64_64_0_64_51_i0_fu_keccak_423514_423810));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423837 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i5_fu_keccak_423514_423837),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_62_i0_fu_keccak_423514_423821),
    .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423838 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i5_fu_keccak_423514_423838),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_41_i0_fu_keccak_423514_423800),
    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i5_fu_keccak_423514_423837));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423839 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i54_fu_keccak_423514_423839),
    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i5_fu_keccak_423514_423838),
    .in2(out_ui_fshl_expr_FU_64_64_0_64_46_i0_fu_keccak_423514_423805));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423840 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i6_fu_keccak_423514_423840),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_41_i0_fu_keccak_423514_423800),
    .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423841 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i6_fu_keccak_423514_423841),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_48_i0_fu_keccak_423514_423807),
    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i6_fu_keccak_423514_423840));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423842 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i55_fu_keccak_423514_423842),
    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i6_fu_keccak_423514_423841),
    .in2(out_ui_fshl_expr_FU_64_64_0_64_62_i0_fu_keccak_423514_423821));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423843 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i7_fu_keccak_423514_423843),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_48_i0_fu_keccak_423514_423807),
    .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423844 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i7_fu_keccak_423514_423844),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_61_i0_fu_keccak_423514_423820),
    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i7_fu_keccak_423514_423843));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423845 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i56_fu_keccak_423514_423845),
    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i7_fu_keccak_423514_423844),
    .in2(out_ui_fshl_expr_FU_64_64_0_64_41_i0_fu_keccak_423514_423800));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423846 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i8_fu_keccak_423514_423846),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_61_i0_fu_keccak_423514_423820),
    .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423847 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i8_fu_keccak_423514_423847),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_46_i0_fu_keccak_423514_423805),
    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i8_fu_keccak_423514_423846));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423848 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i57_fu_keccak_423514_423848),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_48_i0_fu_keccak_423514_423807),
    .in2(out_ui_bit_and_expr_FU_64_64_64_36_i8_fu_keccak_423514_423847));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423849 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i9_fu_keccak_423514_423849),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_46_i0_fu_keccak_423514_423805),
    .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423850 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i9_fu_keccak_423514_423850),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_62_i0_fu_keccak_423514_423821),
    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i9_fu_keccak_423514_423849));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423851 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i58_fu_keccak_423514_423851),
    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i9_fu_keccak_423514_423850),
    .in2(out_ui_fshl_expr_FU_64_64_0_64_61_i0_fu_keccak_423514_423820));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423852 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i10_fu_keccak_423514_423852),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_42_i0_fu_keccak_423514_423801),
    .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423853 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i10_fu_keccak_423514_423853),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_56_i0_fu_keccak_423514_423815),
    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i10_fu_keccak_423514_423852));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423854 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i59_fu_keccak_423514_423854),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_40_i5_fu_keccak_423514_423799),
    .in2(out_ui_bit_and_expr_FU_64_64_64_36_i10_fu_keccak_423514_423853));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423855 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i11_fu_keccak_423514_423855),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_56_i0_fu_keccak_423514_423815),
    .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423856 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i11_fu_keccak_423514_423856),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_55_i0_fu_keccak_423514_423814),
    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i11_fu_keccak_423514_423855));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423857 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i60_fu_keccak_423514_423857),
    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i11_fu_keccak_423514_423856),
    .in2(out_ui_fshl_expr_FU_64_64_0_64_42_i0_fu_keccak_423514_423801));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423858 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i12_fu_keccak_423514_423858),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_55_i0_fu_keccak_423514_423814),
    .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423859 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i12_fu_keccak_423514_423859),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_59_i0_fu_keccak_423514_423818),
    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i12_fu_keccak_423514_423858));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423860 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i61_fu_keccak_423514_423860),
    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i12_fu_keccak_423514_423859),
    .in2(out_ui_fshl_expr_FU_64_64_0_64_56_i0_fu_keccak_423514_423815));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423861 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i13_fu_keccak_423514_423861),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_59_i0_fu_keccak_423514_423818),
    .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423862 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i13_fu_keccak_423514_423862),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_40_i5_fu_keccak_423514_423799),
    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i13_fu_keccak_423514_423861));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423863 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i62_fu_keccak_423514_423863),
    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i13_fu_keccak_423514_423862),
    .in2(out_ui_fshl_expr_FU_64_64_0_64_55_i0_fu_keccak_423514_423814));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423864 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i14_fu_keccak_423514_423864),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_40_i5_fu_keccak_423514_423799),
    .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423865 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i14_fu_keccak_423514_423865),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_42_i0_fu_keccak_423514_423801),
    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i14_fu_keccak_423514_423864));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423866 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i63_fu_keccak_423514_423866),
    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i14_fu_keccak_423514_423865),
    .in2(out_ui_fshl_expr_FU_64_64_0_64_59_i0_fu_keccak_423514_423818));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423867 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i15_fu_keccak_423514_423867),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_47_i0_fu_keccak_423514_423806),
    .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423868 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i15_fu_keccak_423514_423868),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_43_i0_fu_keccak_423514_423802),
    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i15_fu_keccak_423514_423867));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423869 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i64_fu_keccak_423514_423869),
    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i15_fu_keccak_423514_423868),
    .in2(out_ui_fshl_expr_FU_64_64_0_64_52_i0_fu_keccak_423514_423811));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423870 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i16_fu_keccak_423514_423870),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_43_i0_fu_keccak_423514_423802),
    .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423871 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i16_fu_keccak_423514_423871),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_44_i0_fu_keccak_423514_423803),
    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i16_fu_keccak_423514_423870));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423872 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i65_fu_keccak_423514_423872),
    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i16_fu_keccak_423514_423871),
    .in2(out_ui_fshl_expr_FU_64_64_0_64_47_i0_fu_keccak_423514_423806));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423873 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i17_fu_keccak_423514_423873),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_44_i0_fu_keccak_423514_423803),
    .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423874 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i17_fu_keccak_423514_423874),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_54_i0_fu_keccak_423514_423813),
    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i17_fu_keccak_423514_423873));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423875 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i66_fu_keccak_423514_423875),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_43_i0_fu_keccak_423514_423802),
    .in2(out_ui_bit_and_expr_FU_64_64_64_36_i17_fu_keccak_423514_423874));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423876 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i18_fu_keccak_423514_423876),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_54_i0_fu_keccak_423514_423813),
    .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423877 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i18_fu_keccak_423514_423877),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_52_i0_fu_keccak_423514_423811),
    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i18_fu_keccak_423514_423876));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423878 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i67_fu_keccak_423514_423878),
    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i18_fu_keccak_423514_423877),
    .in2(out_ui_fshl_expr_FU_64_64_0_64_44_i0_fu_keccak_423514_423803));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423879 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i19_fu_keccak_423514_423879),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_52_i0_fu_keccak_423514_423811),
    .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423880 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i19_fu_keccak_423514_423880),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_47_i0_fu_keccak_423514_423806),
    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i19_fu_keccak_423514_423879));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423881 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i68_fu_keccak_423514_423881),
    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i19_fu_keccak_423514_423880),
    .in2(out_ui_fshl_expr_FU_64_64_0_64_54_i0_fu_keccak_423514_423813));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423882 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i20_fu_keccak_423514_423882),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_49_i0_fu_keccak_423514_423808),
    .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423883 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i20_fu_keccak_423514_423883),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_60_i0_fu_keccak_423514_423819),
    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i20_fu_keccak_423514_423882));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423884 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i69_fu_keccak_423514_423884),
    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i20_fu_keccak_423514_423883),
    .in2(out_ui_fshl_expr_FU_64_64_0_64_58_i0_fu_keccak_423514_423817));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423885 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i21_fu_keccak_423514_423885),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_60_i0_fu_keccak_423514_423819),
    .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423886 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i21_fu_keccak_423514_423886),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_53_i0_fu_keccak_423514_423812),
    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i21_fu_keccak_423514_423885));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423887 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i70_fu_keccak_423514_423887),
    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i21_fu_keccak_423514_423886),
    .in2(out_ui_fshl_expr_FU_64_64_0_64_49_i0_fu_keccak_423514_423808));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423888 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i22_fu_keccak_423514_423888),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_53_i0_fu_keccak_423514_423812),
    .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423889 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i22_fu_keccak_423514_423889),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_50_i0_fu_keccak_423514_423809),
    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i22_fu_keccak_423514_423888));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423890 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i71_fu_keccak_423514_423890),
    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i22_fu_keccak_423514_423889),
    .in2(out_ui_fshl_expr_FU_64_64_0_64_60_i0_fu_keccak_423514_423819));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423891 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i23_fu_keccak_423514_423891),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_50_i0_fu_keccak_423514_423809),
    .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423892 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i23_fu_keccak_423514_423892),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_58_i0_fu_keccak_423514_423817),
    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i23_fu_keccak_423514_423891));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423893 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i72_fu_keccak_423514_423893),
    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i23_fu_keccak_423514_423892),
    .in2(out_ui_fshl_expr_FU_64_64_0_64_53_i0_fu_keccak_423514_423812));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423894 (.out1(out_ui_bit_xor_expr_FU_64_0_64_37_i24_fu_keccak_423514_423894),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_58_i0_fu_keccak_423514_423817),
    .in2(out_const_48));
  ui_bit_and_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423895 (.out1(out_ui_bit_and_expr_FU_64_64_64_36_i24_fu_keccak_423514_423895),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_49_i0_fu_keccak_423514_423808),
    .in2(out_ui_bit_xor_expr_FU_64_0_64_37_i24_fu_keccak_423514_423894));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423896 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i73_fu_keccak_423514_423896),
    .in1(out_ui_fshl_expr_FU_64_64_0_64_50_i0_fu_keccak_423514_423809),
    .in2(out_ui_bit_and_expr_FU_64_64_64_36_i24_fu_keccak_423514_423895));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423897 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i74_fu_keccak_423514_423897),
    .in1(out_BMEMORY_CTRL_35_i0_BMEMORY_CTRL_35_i0),
    .in2(out_reg_76_reg_76));
  ui_bit_xor_expr_FU #(.BITSIZE_in1(64),
    .BITSIZE_in2(64),
    .BITSIZE_out1(64)) fu_keccak_423514_423898 (.out1(out_ui_bit_xor_expr_FU_64_64_64_38_i75_fu_keccak_423514_423898),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i74_fu_keccak_423514_423897),
    .in2(out_reg_75_reg_75));
  read_cond_FU #(.BITSIZE_in1(1)) fu_keccak_423514_423900 (.out1(out_read_cond_FU_33_i0_fu_keccak_423514_423900),
    .in1(out_reg_77_reg_77));
  ui_view_convert_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) fu_keccak_423514_424602 (.out1(out_ui_view_convert_expr_FU_4_i0_fu_keccak_423514_424602),
    .in1(out_addr_expr_FU_3_i0_fu_keccak_423514_424612));
  addr_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) fu_keccak_423514_424612 (.out1(out_addr_expr_FU_3_i0_fu_keccak_423514_424612),
    .in1(out_const_29));
  ui_view_convert_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) fu_keccak_423514_424614 (.out1(out_ui_view_convert_expr_FU_6_i0_fu_keccak_423514_424614),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_87_i1_fu_keccak_423514_424624));
  ui_eq_expr_FU #(.BITSIZE_in1(29),
    .BITSIZE_in2(29),
    .BITSIZE_out1(1)) fu_keccak_423514_424616 (.out1(out_ui_eq_expr_FU_32_32_32_39_i0_fu_keccak_423514_424616),
    .in1(out_ui_rshift_expr_FU_32_0_32_88_i0_fu_keccak_423514_424631),
    .in2(out_reg_25_reg_25));
  ui_pointer_plus_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(8),
    .BITSIZE_out1(32),
    .LSB_PARAMETER(0)) fu_keccak_423514_424624 (.out1(out_ui_pointer_plus_expr_FU_32_0_32_87_i1_fu_keccak_423514_424624),
    .in1(out_addr_expr_FU_5_i0_fu_keccak_423514_424627),
    .in2(out_const_35));
  addr_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) fu_keccak_423514_424627 (.out1(out_addr_expr_FU_5_i0_fu_keccak_423514_424627),
    .in1(out_const_29));
  ui_rshift_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(2),
    .BITSIZE_out1(29),
    .PRECISION(32)) fu_keccak_423514_424631 (.out1(out_ui_rshift_expr_FU_32_0_32_88_i0_fu_keccak_423514_424631),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_68_i1_fu_keccak_423514_423743),
    .in2(out_const_30));
  ui_rshift_expr_FU #(.BITSIZE_in1(32),
    .BITSIZE_in2(2),
    .BITSIZE_out1(29),
    .PRECISION(32)) fu_keccak_423514_424636 (.out1(out_ui_rshift_expr_FU_32_0_32_88_i1_fu_keccak_423514_424636),
    .in1(out_ui_view_convert_expr_FU_6_i0_fu_keccak_423514_424614),
    .in2(out_const_30));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_0 (.out1(out_reg_0_reg_0),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_64_i0_fu_keccak_423514_423531),
    .wenable(wrenable_reg_0));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_1 (.out1(out_reg_1_reg_1),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_65_i0_fu_keccak_423514_423532),
    .wenable(wrenable_reg_1));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_10 (.out1(out_reg_10_reg_10),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_74_i0_fu_keccak_423514_423541),
    .wenable(wrenable_reg_10));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_11 (.out1(out_reg_11_reg_11),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_75_i0_fu_keccak_423514_423542),
    .wenable(wrenable_reg_11));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_12 (.out1(out_reg_12_reg_12),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_76_i0_fu_keccak_423514_423543),
    .wenable(wrenable_reg_12));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_13 (.out1(out_reg_13_reg_13),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_77_i0_fu_keccak_423514_423544),
    .wenable(wrenable_reg_13));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_14 (.out1(out_reg_14_reg_14),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_78_i0_fu_keccak_423514_423545),
    .wenable(wrenable_reg_14));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_15 (.out1(out_reg_15_reg_15),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_79_i0_fu_keccak_423514_423546),
    .wenable(wrenable_reg_15));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_16 (.out1(out_reg_16_reg_16),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_80_i0_fu_keccak_423514_423547),
    .wenable(wrenable_reg_16));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_17 (.out1(out_reg_17_reg_17),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_81_i0_fu_keccak_423514_423548),
    .wenable(wrenable_reg_17));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_18 (.out1(out_reg_18_reg_18),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_82_i0_fu_keccak_423514_423549),
    .wenable(wrenable_reg_18));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_19 (.out1(out_reg_19_reg_19),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_83_i0_fu_keccak_423514_423550),
    .wenable(wrenable_reg_19));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_2 (.out1(out_reg_2_reg_2),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_66_i0_fu_keccak_423514_423533),
    .wenable(wrenable_reg_2));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_20 (.out1(out_reg_20_reg_20),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_84_i0_fu_keccak_423514_423551),
    .wenable(wrenable_reg_20));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_21 (.out1(out_reg_21_reg_21),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_85_i0_fu_keccak_423514_423552),
    .wenable(wrenable_reg_21));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_22 (.out1(out_reg_22_reg_22),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_86_i0_fu_keccak_423514_423553),
    .wenable(wrenable_reg_22));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_23 (.out1(out_reg_23_reg_23),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_87_i0_fu_keccak_423514_423554),
    .wenable(wrenable_reg_23));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_24 (.out1(out_reg_24_reg_24),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_25_reg_24_0_0_0),
    .wenable(wrenable_reg_24));
  register_SE #(.BITSIZE_in1(29),
    .BITSIZE_out1(29)) reg_25 (.out1(out_reg_25_reg_25),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_rshift_expr_FU_32_0_32_88_i1_fu_keccak_423514_424636),
    .wenable(wrenable_reg_25));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_26 (.out1(out_reg_26_reg_26),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_27_reg_26_0_0_0),
    .wenable(wrenable_reg_26));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_27 (.out1(out_reg_27_reg_27),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_28_reg_27_0_0_0),
    .wenable(wrenable_reg_27));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_28 (.out1(out_reg_28_reg_28),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_29_reg_28_0_0_0),
    .wenable(wrenable_reg_28));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_29 (.out1(out_reg_29_reg_29),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_30_reg_29_0_0_0),
    .wenable(wrenable_reg_29));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_3 (.out1(out_reg_3_reg_3),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_67_i0_fu_keccak_423514_423534),
    .wenable(wrenable_reg_3));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_30 (.out1(out_reg_30_reg_30),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_32_reg_30_0_0_0),
    .wenable(wrenable_reg_30));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_31 (.out1(out_reg_31_reg_31),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_33_reg_31_0_0_0),
    .wenable(wrenable_reg_31));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_32 (.out1(out_reg_32_reg_32),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_34_reg_32_0_0_0),
    .wenable(wrenable_reg_32));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_33 (.out1(out_reg_33_reg_33),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_35_reg_33_0_0_0),
    .wenable(wrenable_reg_33));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_34 (.out1(out_reg_34_reg_34),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_36_reg_34_0_0_0),
    .wenable(wrenable_reg_34));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_35 (.out1(out_reg_35_reg_35),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_37_reg_35_0_0_0),
    .wenable(wrenable_reg_35));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_36 (.out1(out_reg_36_reg_36),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_38_reg_36_0_0_0),
    .wenable(wrenable_reg_36));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_37 (.out1(out_reg_37_reg_37),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_39_reg_37_0_0_0),
    .wenable(wrenable_reg_37));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_38 (.out1(out_reg_38_reg_38),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_40_reg_38_0_0_0),
    .wenable(wrenable_reg_38));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_39 (.out1(out_reg_39_reg_39),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_41_reg_39_0_0_0),
    .wenable(wrenable_reg_39));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_4 (.out1(out_reg_4_reg_4),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_68_i0_fu_keccak_423514_423535),
    .wenable(wrenable_reg_4));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_40 (.out1(out_reg_40_reg_40),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_43_reg_40_0_0_0),
    .wenable(wrenable_reg_40));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_41 (.out1(out_reg_41_reg_41),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_44_reg_41_0_0_0),
    .wenable(wrenable_reg_41));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_42 (.out1(out_reg_42_reg_42),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_45_reg_42_0_0_0),
    .wenable(wrenable_reg_42));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_43 (.out1(out_reg_43_reg_43),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_46_reg_43_0_0_0),
    .wenable(wrenable_reg_43));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_44 (.out1(out_reg_44_reg_44),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_47_reg_44_0_0_0),
    .wenable(wrenable_reg_44));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_45 (.out1(out_reg_45_reg_45),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_48_reg_45_0_0_0),
    .wenable(wrenable_reg_45));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_46 (.out1(out_reg_46_reg_46),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_49_reg_46_0_0_0),
    .wenable(wrenable_reg_46));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_47 (.out1(out_reg_47_reg_47),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_50_reg_47_0_0_0),
    .wenable(wrenable_reg_47));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_48 (.out1(out_reg_48_reg_48),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_51_reg_48_0_0_0),
    .wenable(wrenable_reg_48));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_49 (.out1(out_reg_49_reg_49),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_52_reg_49_0_0_0),
    .wenable(wrenable_reg_49));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_5 (.out1(out_reg_5_reg_5),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_69_i0_fu_keccak_423514_423536),
    .wenable(wrenable_reg_5));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_50 (.out1(out_reg_50_reg_50),
    .clock(clock),
    .reset(reset),
    .in1(out_MUX_54_reg_50_0_0_0),
    .wenable(wrenable_reg_50));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_51 (.out1(out_reg_51_reg_51),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i68_fu_keccak_423514_423881),
    .wenable(wrenable_reg_51));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_52 (.out1(out_reg_52_reg_52),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i63_fu_keccak_423514_423866),
    .wenable(wrenable_reg_52));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_53 (.out1(out_reg_53_reg_53),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i58_fu_keccak_423514_423851),
    .wenable(wrenable_reg_53));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_54 (.out1(out_reg_54_reg_54),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i53_fu_keccak_423514_423836),
    .wenable(wrenable_reg_54));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_55 (.out1(out_reg_55_reg_55),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i72_fu_keccak_423514_423893),
    .wenable(wrenable_reg_55));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_56 (.out1(out_reg_56_reg_56),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i67_fu_keccak_423514_423878),
    .wenable(wrenable_reg_56));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_57 (.out1(out_reg_57_reg_57),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i62_fu_keccak_423514_423863),
    .wenable(wrenable_reg_57));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_58 (.out1(out_reg_58_reg_58),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i57_fu_keccak_423514_423848),
    .wenable(wrenable_reg_58));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_59 (.out1(out_reg_59_reg_59),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i52_fu_keccak_423514_423833),
    .wenable(wrenable_reg_59));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_6 (.out1(out_reg_6_reg_6),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_70_i0_fu_keccak_423514_423537),
    .wenable(wrenable_reg_6));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_60 (.out1(out_reg_60_reg_60),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i71_fu_keccak_423514_423890),
    .wenable(wrenable_reg_60));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_61 (.out1(out_reg_61_reg_61),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i66_fu_keccak_423514_423875),
    .wenable(wrenable_reg_61));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_62 (.out1(out_reg_62_reg_62),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i61_fu_keccak_423514_423860),
    .wenable(wrenable_reg_62));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_63 (.out1(out_reg_63_reg_63),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i56_fu_keccak_423514_423845),
    .wenable(wrenable_reg_63));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_64 (.out1(out_reg_64_reg_64),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i51_fu_keccak_423514_423830),
    .wenable(wrenable_reg_64));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_65 (.out1(out_reg_65_reg_65),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i70_fu_keccak_423514_423887),
    .wenable(wrenable_reg_65));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_66 (.out1(out_reg_66_reg_66),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i65_fu_keccak_423514_423872),
    .wenable(wrenable_reg_66));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_67 (.out1(out_reg_67_reg_67),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i60_fu_keccak_423514_423857),
    .wenable(wrenable_reg_67));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_68 (.out1(out_reg_68_reg_68),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i55_fu_keccak_423514_423842),
    .wenable(wrenable_reg_68));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_69 (.out1(out_reg_69_reg_69),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i50_fu_keccak_423514_423827),
    .wenable(wrenable_reg_69));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_7 (.out1(out_reg_7_reg_7),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_71_i0_fu_keccak_423514_423538),
    .wenable(wrenable_reg_7));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_70 (.out1(out_reg_70_reg_70),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i69_fu_keccak_423514_423884),
    .wenable(wrenable_reg_70));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_71 (.out1(out_reg_71_reg_71),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i64_fu_keccak_423514_423869),
    .wenable(wrenable_reg_71));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_72 (.out1(out_reg_72_reg_72),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i59_fu_keccak_423514_423854),
    .wenable(wrenable_reg_72));
  register_SE #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_73 (.out1(out_reg_73_reg_73),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i54_fu_keccak_423514_423839),
    .wenable(wrenable_reg_73));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_74 (.out1(out_reg_74_reg_74),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_68_i1_fu_keccak_423514_423743),
    .wenable(wrenable_reg_74));
  register_STD #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_75 (.out1(out_reg_75_reg_75),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i21_fu_keccak_423514_423766),
    .wenable(wrenable_reg_75));
  register_STD #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_76 (.out1(out_reg_76_reg_76),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_and_expr_FU_64_64_64_36_i0_fu_keccak_423514_423824),
    .wenable(wrenable_reg_76));
  register_STD #(.BITSIZE_in1(1),
    .BITSIZE_out1(1)) reg_77 (.out1(out_reg_77_reg_77),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_eq_expr_FU_32_32_32_39_i0_fu_keccak_423514_424616),
    .wenable(wrenable_reg_77));
  register_STD #(.BITSIZE_in1(64),
    .BITSIZE_out1(64)) reg_78 (.out1(out_reg_78_reg_78),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_bit_xor_expr_FU_64_64_64_38_i75_fu_keccak_423514_423898),
    .wenable(wrenable_reg_78));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_8 (.out1(out_reg_8_reg_8),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_72_i0_fu_keccak_423514_423539),
    .wenable(wrenable_reg_8));
  register_SE #(.BITSIZE_in1(32),
    .BITSIZE_out1(32)) reg_9 (.out1(out_reg_9_reg_9),
    .clock(clock),
    .reset(reset),
    .in1(out_ui_pointer_plus_expr_FU_32_0_32_73_i0_fu_keccak_423514_423540),
    .wenable(wrenable_reg_9));
  // io-signal post fix
  assign Sout_Rdata_ram = sig_out_bus_mergerSout_Rdata_ram6_;
  assign Sout_DataRdy = sig_out_bus_mergerSout_DataRdy5_;
  assign Mout_oe_ram = sig_out_bus_mergerMout_oe_ram3_;
  assign Mout_we_ram = sig_out_bus_mergerMout_we_ram4_;
  assign Mout_addr_ram = sig_out_bus_mergerMout_addr_ram1_;
  assign Mout_Wdata_ram = sig_out_bus_mergerMout_Wdata_ram0_;
  assign Mout_data_ram_size = sig_out_bus_mergerMout_data_ram_size2_;
  assign OUT_CONDITION_keccak_423514_423900 = out_read_cond_FU_33_i0_fu_keccak_423514_423900;

endmodule

// FSM based controller description for keccak
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module controller_keccak(done_port,
  fuselector_BMEMORY_CTRL_35_i0_LOAD,
  fuselector_BMEMORY_CTRL_35_i0_STORE,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0,
  selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0,
  selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1,
  selector_MUX_25_reg_24_0_0_0,
  selector_MUX_27_reg_26_0_0_0,
  selector_MUX_28_reg_27_0_0_0,
  selector_MUX_29_reg_28_0_0_0,
  selector_MUX_30_reg_29_0_0_0,
  selector_MUX_32_reg_30_0_0_0,
  selector_MUX_33_reg_31_0_0_0,
  selector_MUX_34_reg_32_0_0_0,
  selector_MUX_35_reg_33_0_0_0,
  selector_MUX_36_reg_34_0_0_0,
  selector_MUX_37_reg_35_0_0_0,
  selector_MUX_38_reg_36_0_0_0,
  selector_MUX_39_reg_37_0_0_0,
  selector_MUX_40_reg_38_0_0_0,
  selector_MUX_41_reg_39_0_0_0,
  selector_MUX_43_reg_40_0_0_0,
  selector_MUX_44_reg_41_0_0_0,
  selector_MUX_45_reg_42_0_0_0,
  selector_MUX_46_reg_43_0_0_0,
  selector_MUX_47_reg_44_0_0_0,
  selector_MUX_48_reg_45_0_0_0,
  selector_MUX_49_reg_46_0_0_0,
  selector_MUX_50_reg_47_0_0_0,
  selector_MUX_51_reg_48_0_0_0,
  selector_MUX_52_reg_49_0_0_0,
  selector_MUX_54_reg_50_0_0_0,
  wrenable_reg_0,
  wrenable_reg_1,
  wrenable_reg_10,
  wrenable_reg_11,
  wrenable_reg_12,
  wrenable_reg_13,
  wrenable_reg_14,
  wrenable_reg_15,
  wrenable_reg_16,
  wrenable_reg_17,
  wrenable_reg_18,
  wrenable_reg_19,
  wrenable_reg_2,
  wrenable_reg_20,
  wrenable_reg_21,
  wrenable_reg_22,
  wrenable_reg_23,
  wrenable_reg_24,
  wrenable_reg_25,
  wrenable_reg_26,
  wrenable_reg_27,
  wrenable_reg_28,
  wrenable_reg_29,
  wrenable_reg_3,
  wrenable_reg_30,
  wrenable_reg_31,
  wrenable_reg_32,
  wrenable_reg_33,
  wrenable_reg_34,
  wrenable_reg_35,
  wrenable_reg_36,
  wrenable_reg_37,
  wrenable_reg_38,
  wrenable_reg_39,
  wrenable_reg_4,
  wrenable_reg_40,
  wrenable_reg_41,
  wrenable_reg_42,
  wrenable_reg_43,
  wrenable_reg_44,
  wrenable_reg_45,
  wrenable_reg_46,
  wrenable_reg_47,
  wrenable_reg_48,
  wrenable_reg_49,
  wrenable_reg_5,
  wrenable_reg_50,
  wrenable_reg_51,
  wrenable_reg_52,
  wrenable_reg_53,
  wrenable_reg_54,
  wrenable_reg_55,
  wrenable_reg_56,
  wrenable_reg_57,
  wrenable_reg_58,
  wrenable_reg_59,
  wrenable_reg_6,
  wrenable_reg_60,
  wrenable_reg_61,
  wrenable_reg_62,
  wrenable_reg_63,
  wrenable_reg_64,
  wrenable_reg_65,
  wrenable_reg_66,
  wrenable_reg_67,
  wrenable_reg_68,
  wrenable_reg_69,
  wrenable_reg_7,
  wrenable_reg_70,
  wrenable_reg_71,
  wrenable_reg_72,
  wrenable_reg_73,
  wrenable_reg_74,
  wrenable_reg_75,
  wrenable_reg_76,
  wrenable_reg_77,
  wrenable_reg_78,
  wrenable_reg_8,
  wrenable_reg_9,
  OUT_CONDITION_keccak_423514_423900,
  clock,
  reset,
  start_port);
  // IN
  input OUT_CONDITION_keccak_423514_423900;
  input clock;
  input reset;
  input start_port;
  // OUT
  output done_port;
  output fuselector_BMEMORY_CTRL_35_i0_LOAD;
  output fuselector_BMEMORY_CTRL_35_i0_STORE;
  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0;
  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1;
  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10;
  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11;
  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12;
  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2;
  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3;
  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4;
  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5;
  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6;
  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7;
  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8;
  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9;
  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0;
  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1;
  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2;
  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3;
  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4;
  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5;
  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0;
  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1;
  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2;
  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0;
  output selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1;
  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0;
  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1;
  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10;
  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11;
  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12;
  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2;
  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3;
  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4;
  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5;
  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6;
  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7;
  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8;
  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9;
  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0;
  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1;
  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2;
  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3;
  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4;
  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5;
  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6;
  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0;
  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1;
  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2;
  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0;
  output selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1;
  output selector_MUX_25_reg_24_0_0_0;
  output selector_MUX_27_reg_26_0_0_0;
  output selector_MUX_28_reg_27_0_0_0;
  output selector_MUX_29_reg_28_0_0_0;
  output selector_MUX_30_reg_29_0_0_0;
  output selector_MUX_32_reg_30_0_0_0;
  output selector_MUX_33_reg_31_0_0_0;
  output selector_MUX_34_reg_32_0_0_0;
  output selector_MUX_35_reg_33_0_0_0;
  output selector_MUX_36_reg_34_0_0_0;
  output selector_MUX_37_reg_35_0_0_0;
  output selector_MUX_38_reg_36_0_0_0;
  output selector_MUX_39_reg_37_0_0_0;
  output selector_MUX_40_reg_38_0_0_0;
  output selector_MUX_41_reg_39_0_0_0;
  output selector_MUX_43_reg_40_0_0_0;
  output selector_MUX_44_reg_41_0_0_0;
  output selector_MUX_45_reg_42_0_0_0;
  output selector_MUX_46_reg_43_0_0_0;
  output selector_MUX_47_reg_44_0_0_0;
  output selector_MUX_48_reg_45_0_0_0;
  output selector_MUX_49_reg_46_0_0_0;
  output selector_MUX_50_reg_47_0_0_0;
  output selector_MUX_51_reg_48_0_0_0;
  output selector_MUX_52_reg_49_0_0_0;
  output selector_MUX_54_reg_50_0_0_0;
  output wrenable_reg_0;
  output wrenable_reg_1;
  output wrenable_reg_10;
  output wrenable_reg_11;
  output wrenable_reg_12;
  output wrenable_reg_13;
  output wrenable_reg_14;
  output wrenable_reg_15;
  output wrenable_reg_16;
  output wrenable_reg_17;
  output wrenable_reg_18;
  output wrenable_reg_19;
  output wrenable_reg_2;
  output wrenable_reg_20;
  output wrenable_reg_21;
  output wrenable_reg_22;
  output wrenable_reg_23;
  output wrenable_reg_24;
  output wrenable_reg_25;
  output wrenable_reg_26;
  output wrenable_reg_27;
  output wrenable_reg_28;
  output wrenable_reg_29;
  output wrenable_reg_3;
  output wrenable_reg_30;
  output wrenable_reg_31;
  output wrenable_reg_32;
  output wrenable_reg_33;
  output wrenable_reg_34;
  output wrenable_reg_35;
  output wrenable_reg_36;
  output wrenable_reg_37;
  output wrenable_reg_38;
  output wrenable_reg_39;
  output wrenable_reg_4;
  output wrenable_reg_40;
  output wrenable_reg_41;
  output wrenable_reg_42;
  output wrenable_reg_43;
  output wrenable_reg_44;
  output wrenable_reg_45;
  output wrenable_reg_46;
  output wrenable_reg_47;
  output wrenable_reg_48;
  output wrenable_reg_49;
  output wrenable_reg_5;
  output wrenable_reg_50;
  output wrenable_reg_51;
  output wrenable_reg_52;
  output wrenable_reg_53;
  output wrenable_reg_54;
  output wrenable_reg_55;
  output wrenable_reg_56;
  output wrenable_reg_57;
  output wrenable_reg_58;
  output wrenable_reg_59;
  output wrenable_reg_6;
  output wrenable_reg_60;
  output wrenable_reg_61;
  output wrenable_reg_62;
  output wrenable_reg_63;
  output wrenable_reg_64;
  output wrenable_reg_65;
  output wrenable_reg_66;
  output wrenable_reg_67;
  output wrenable_reg_68;
  output wrenable_reg_69;
  output wrenable_reg_7;
  output wrenable_reg_70;
  output wrenable_reg_71;
  output wrenable_reg_72;
  output wrenable_reg_73;
  output wrenable_reg_74;
  output wrenable_reg_75;
  output wrenable_reg_76;
  output wrenable_reg_77;
  output wrenable_reg_78;
  output wrenable_reg_8;
  output wrenable_reg_9;
  parameter [53:0] S_0 = 54'b000000000000000000000000000000000000000000000000000001,
    S_1 = 54'b000000000000000000000000000000000000000000000000000010,
    S_2 = 54'b000000000000000000000000000000000000000000000000000100,
    S_3 = 54'b000000000000000000000000000000000000000000000000001000,
    S_4 = 54'b000000000000000000000000000000000000000000000000010000,
    S_5 = 54'b000000000000000000000000000000000000000000000000100000,
    S_6 = 54'b000000000000000000000000000000000000000000000001000000,
    S_7 = 54'b000000000000000000000000000000000000000000000010000000,
    S_8 = 54'b000000000000000000000000000000000000000000000100000000,
    S_9 = 54'b000000000000000000000000000000000000000000001000000000,
    S_10 = 54'b000000000000000000000000000000000000000000010000000000,
    S_11 = 54'b000000000000000000000000000000000000000000100000000000,
    S_12 = 54'b000000000000000000000000000000000000000001000000000000,
    S_13 = 54'b000000000000000000000000000000000000000010000000000000,
    S_14 = 54'b000000000000000000000000000000000000000100000000000000,
    S_15 = 54'b000000000000000000000000000000000000001000000000000000,
    S_16 = 54'b000000000000000000000000000000000000010000000000000000,
    S_17 = 54'b000000000000000000000000000000000000100000000000000000,
    S_18 = 54'b000000000000000000000000000000000001000000000000000000,
    S_19 = 54'b000000000000000000000000000000000010000000000000000000,
    S_20 = 54'b000000000000000000000000000000000100000000000000000000,
    S_21 = 54'b000000000000000000000000000000001000000000000000000000,
    S_22 = 54'b000000000000000000000000000000010000000000000000000000,
    S_23 = 54'b000000000000000000000000000000100000000000000000000000,
    S_24 = 54'b000000000000000000000000000001000000000000000000000000,
    S_25 = 54'b000000000000000000000000000010000000000000000000000000,
    S_26 = 54'b000000000000000000000000000100000000000000000000000000,
    S_27 = 54'b000000000000000000000000001000000000000000000000000000,
    S_28 = 54'b000000000000000000000000010000000000000000000000000000,
    S_29 = 54'b000000000000000000000000100000000000000000000000000000,
    S_30 = 54'b000000000000000000000001000000000000000000000000000000,
    S_31 = 54'b000000000000000000000010000000000000000000000000000000,
    S_32 = 54'b000000000000000000000100000000000000000000000000000000,
    S_33 = 54'b000000000000000000001000000000000000000000000000000000,
    S_34 = 54'b000000000000000000010000000000000000000000000000000000,
    S_35 = 54'b000000000000000000100000000000000000000000000000000000,
    S_36 = 54'b000000000000000001000000000000000000000000000000000000,
    S_37 = 54'b000000000000000010000000000000000000000000000000000000,
    S_38 = 54'b000000000000000100000000000000000000000000000000000000,
    S_39 = 54'b000000000000001000000000000000000000000000000000000000,
    S_40 = 54'b000000000000010000000000000000000000000000000000000000,
    S_41 = 54'b000000000000100000000000000000000000000000000000000000,
    S_42 = 54'b000000000001000000000000000000000000000000000000000000,
    S_43 = 54'b000000000010000000000000000000000000000000000000000000,
    S_44 = 54'b000000000100000000000000000000000000000000000000000000,
    S_45 = 54'b000000001000000000000000000000000000000000000000000000,
    S_46 = 54'b000000010000000000000000000000000000000000000000000000,
    S_47 = 54'b000000100000000000000000000000000000000000000000000000,
    S_48 = 54'b000001000000000000000000000000000000000000000000000000,
    S_49 = 54'b000010000000000000000000000000000000000000000000000000,
    S_50 = 54'b000100000000000000000000000000000000000000000000000000,
    S_51 = 54'b001000000000000000000000000000000000000000000000000000,
    S_52 = 54'b010000000000000000000000000000000000000000000000000000,
    S_53 = 54'b100000000000000000000000000000000000000000000000000000;
  reg [53:0] _present_state=S_0, _next_state;
  reg done_port;
  reg fuselector_BMEMORY_CTRL_35_i0_LOAD;
  reg fuselector_BMEMORY_CTRL_35_i0_STORE;
  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0;
  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1;
  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10;
  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11;
  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12;
  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2;
  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3;
  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4;
  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5;
  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6;
  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7;
  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8;
  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9;
  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0;
  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1;
  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2;
  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3;
  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4;
  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5;
  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0;
  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1;
  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2;
  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0;
  reg selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1;
  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0;
  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1;
  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10;
  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11;
  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12;
  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2;
  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3;
  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4;
  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5;
  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6;
  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7;
  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8;
  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9;
  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0;
  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1;
  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2;
  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3;
  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4;
  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5;
  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6;
  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0;
  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1;
  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2;
  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0;
  reg selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1;
  reg selector_MUX_25_reg_24_0_0_0;
  reg selector_MUX_27_reg_26_0_0_0;
  reg selector_MUX_28_reg_27_0_0_0;
  reg selector_MUX_29_reg_28_0_0_0;
  reg selector_MUX_30_reg_29_0_0_0;
  reg selector_MUX_32_reg_30_0_0_0;
  reg selector_MUX_33_reg_31_0_0_0;
  reg selector_MUX_34_reg_32_0_0_0;
  reg selector_MUX_35_reg_33_0_0_0;
  reg selector_MUX_36_reg_34_0_0_0;
  reg selector_MUX_37_reg_35_0_0_0;
  reg selector_MUX_38_reg_36_0_0_0;
  reg selector_MUX_39_reg_37_0_0_0;
  reg selector_MUX_40_reg_38_0_0_0;
  reg selector_MUX_41_reg_39_0_0_0;
  reg selector_MUX_43_reg_40_0_0_0;
  reg selector_MUX_44_reg_41_0_0_0;
  reg selector_MUX_45_reg_42_0_0_0;
  reg selector_MUX_46_reg_43_0_0_0;
  reg selector_MUX_47_reg_44_0_0_0;
  reg selector_MUX_48_reg_45_0_0_0;
  reg selector_MUX_49_reg_46_0_0_0;
  reg selector_MUX_50_reg_47_0_0_0;
  reg selector_MUX_51_reg_48_0_0_0;
  reg selector_MUX_52_reg_49_0_0_0;
  reg selector_MUX_54_reg_50_0_0_0;
  reg wrenable_reg_0;
  reg wrenable_reg_1;
  reg wrenable_reg_10;
  reg wrenable_reg_11;
  reg wrenable_reg_12;
  reg wrenable_reg_13;
  reg wrenable_reg_14;
  reg wrenable_reg_15;
  reg wrenable_reg_16;
  reg wrenable_reg_17;
  reg wrenable_reg_18;
  reg wrenable_reg_19;
  reg wrenable_reg_2;
  reg wrenable_reg_20;
  reg wrenable_reg_21;
  reg wrenable_reg_22;
  reg wrenable_reg_23;
  reg wrenable_reg_24;
  reg wrenable_reg_25;
  reg wrenable_reg_26;
  reg wrenable_reg_27;
  reg wrenable_reg_28;
  reg wrenable_reg_29;
  reg wrenable_reg_3;
  reg wrenable_reg_30;
  reg wrenable_reg_31;
  reg wrenable_reg_32;
  reg wrenable_reg_33;
  reg wrenable_reg_34;
  reg wrenable_reg_35;
  reg wrenable_reg_36;
  reg wrenable_reg_37;
  reg wrenable_reg_38;
  reg wrenable_reg_39;
  reg wrenable_reg_4;
  reg wrenable_reg_40;
  reg wrenable_reg_41;
  reg wrenable_reg_42;
  reg wrenable_reg_43;
  reg wrenable_reg_44;
  reg wrenable_reg_45;
  reg wrenable_reg_46;
  reg wrenable_reg_47;
  reg wrenable_reg_48;
  reg wrenable_reg_49;
  reg wrenable_reg_5;
  reg wrenable_reg_50;
  reg wrenable_reg_51;
  reg wrenable_reg_52;
  reg wrenable_reg_53;
  reg wrenable_reg_54;
  reg wrenable_reg_55;
  reg wrenable_reg_56;
  reg wrenable_reg_57;
  reg wrenable_reg_58;
  reg wrenable_reg_59;
  reg wrenable_reg_6;
  reg wrenable_reg_60;
  reg wrenable_reg_61;
  reg wrenable_reg_62;
  reg wrenable_reg_63;
  reg wrenable_reg_64;
  reg wrenable_reg_65;
  reg wrenable_reg_66;
  reg wrenable_reg_67;
  reg wrenable_reg_68;
  reg wrenable_reg_69;
  reg wrenable_reg_7;
  reg wrenable_reg_70;
  reg wrenable_reg_71;
  reg wrenable_reg_72;
  reg wrenable_reg_73;
  reg wrenable_reg_74;
  reg wrenable_reg_75;
  reg wrenable_reg_76;
  reg wrenable_reg_77;
  reg wrenable_reg_78;
  reg wrenable_reg_8;
  reg wrenable_reg_9;
  
  always @(posedge clock)
    if (reset == 1'b0) _present_state <= S_0;
    else _present_state <= _next_state;
  
  always @(*)
  begin
    done_port = 1'b0;
    fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b0;
    fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b0;
    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0 = 1'b0;
    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1 = 1'b0;
    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10 = 1'b0;
    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11 = 1'b0;
    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12 = 1'b0;
    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2 = 1'b0;
    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3 = 1'b0;
    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4 = 1'b0;
    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5 = 1'b0;
    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6 = 1'b0;
    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7 = 1'b0;
    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8 = 1'b0;
    selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9 = 1'b0;
    selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0 = 1'b0;
    selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1 = 1'b0;
    selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2 = 1'b0;
    selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3 = 1'b0;
    selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4 = 1'b0;
    selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5 = 1'b0;
    selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0 = 1'b0;
    selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1 = 1'b0;
    selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2 = 1'b0;
    selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0 = 1'b0;
    selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b0;
    selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b0;
    selector_MUX_25_reg_24_0_0_0 = 1'b0;
    selector_MUX_27_reg_26_0_0_0 = 1'b0;
    selector_MUX_28_reg_27_0_0_0 = 1'b0;
    selector_MUX_29_reg_28_0_0_0 = 1'b0;
    selector_MUX_30_reg_29_0_0_0 = 1'b0;
    selector_MUX_32_reg_30_0_0_0 = 1'b0;
    selector_MUX_33_reg_31_0_0_0 = 1'b0;
    selector_MUX_34_reg_32_0_0_0 = 1'b0;
    selector_MUX_35_reg_33_0_0_0 = 1'b0;
    selector_MUX_36_reg_34_0_0_0 = 1'b0;
    selector_MUX_37_reg_35_0_0_0 = 1'b0;
    selector_MUX_38_reg_36_0_0_0 = 1'b0;
    selector_MUX_39_reg_37_0_0_0 = 1'b0;
    selector_MUX_40_reg_38_0_0_0 = 1'b0;
    selector_MUX_41_reg_39_0_0_0 = 1'b0;
    selector_MUX_43_reg_40_0_0_0 = 1'b0;
    selector_MUX_44_reg_41_0_0_0 = 1'b0;
    selector_MUX_45_reg_42_0_0_0 = 1'b0;
    selector_MUX_46_reg_43_0_0_0 = 1'b0;
    selector_MUX_47_reg_44_0_0_0 = 1'b0;
    selector_MUX_48_reg_45_0_0_0 = 1'b0;
    selector_MUX_49_reg_46_0_0_0 = 1'b0;
    selector_MUX_50_reg_47_0_0_0 = 1'b0;
    selector_MUX_51_reg_48_0_0_0 = 1'b0;
    selector_MUX_52_reg_49_0_0_0 = 1'b0;
    selector_MUX_54_reg_50_0_0_0 = 1'b0;
    wrenable_reg_0 = 1'b0;
    wrenable_reg_1 = 1'b0;
    wrenable_reg_10 = 1'b0;
    wrenable_reg_11 = 1'b0;
    wrenable_reg_12 = 1'b0;
    wrenable_reg_13 = 1'b0;
    wrenable_reg_14 = 1'b0;
    wrenable_reg_15 = 1'b0;
    wrenable_reg_16 = 1'b0;
    wrenable_reg_17 = 1'b0;
    wrenable_reg_18 = 1'b0;
    wrenable_reg_19 = 1'b0;
    wrenable_reg_2 = 1'b0;
    wrenable_reg_20 = 1'b0;
    wrenable_reg_21 = 1'b0;
    wrenable_reg_22 = 1'b0;
    wrenable_reg_23 = 1'b0;
    wrenable_reg_24 = 1'b0;
    wrenable_reg_25 = 1'b0;
    wrenable_reg_26 = 1'b0;
    wrenable_reg_27 = 1'b0;
    wrenable_reg_28 = 1'b0;
    wrenable_reg_29 = 1'b0;
    wrenable_reg_3 = 1'b0;
    wrenable_reg_30 = 1'b0;
    wrenable_reg_31 = 1'b0;
    wrenable_reg_32 = 1'b0;
    wrenable_reg_33 = 1'b0;
    wrenable_reg_34 = 1'b0;
    wrenable_reg_35 = 1'b0;
    wrenable_reg_36 = 1'b0;
    wrenable_reg_37 = 1'b0;
    wrenable_reg_38 = 1'b0;
    wrenable_reg_39 = 1'b0;
    wrenable_reg_4 = 1'b0;
    wrenable_reg_40 = 1'b0;
    wrenable_reg_41 = 1'b0;
    wrenable_reg_42 = 1'b0;
    wrenable_reg_43 = 1'b0;
    wrenable_reg_44 = 1'b0;
    wrenable_reg_45 = 1'b0;
    wrenable_reg_46 = 1'b0;
    wrenable_reg_47 = 1'b0;
    wrenable_reg_48 = 1'b0;
    wrenable_reg_49 = 1'b0;
    wrenable_reg_5 = 1'b0;
    wrenable_reg_50 = 1'b0;
    wrenable_reg_51 = 1'b0;
    wrenable_reg_52 = 1'b0;
    wrenable_reg_53 = 1'b0;
    wrenable_reg_54 = 1'b0;
    wrenable_reg_55 = 1'b0;
    wrenable_reg_56 = 1'b0;
    wrenable_reg_57 = 1'b0;
    wrenable_reg_58 = 1'b0;
    wrenable_reg_59 = 1'b0;
    wrenable_reg_6 = 1'b0;
    wrenable_reg_60 = 1'b0;
    wrenable_reg_61 = 1'b0;
    wrenable_reg_62 = 1'b0;
    wrenable_reg_63 = 1'b0;
    wrenable_reg_64 = 1'b0;
    wrenable_reg_65 = 1'b0;
    wrenable_reg_66 = 1'b0;
    wrenable_reg_67 = 1'b0;
    wrenable_reg_68 = 1'b0;
    wrenable_reg_69 = 1'b0;
    wrenable_reg_7 = 1'b0;
    wrenable_reg_70 = 1'b0;
    wrenable_reg_71 = 1'b0;
    wrenable_reg_72 = 1'b0;
    wrenable_reg_73 = 1'b0;
    wrenable_reg_74 = 1'b0;
    wrenable_reg_75 = 1'b0;
    wrenable_reg_76 = 1'b0;
    wrenable_reg_77 = 1'b0;
    wrenable_reg_78 = 1'b0;
    wrenable_reg_8 = 1'b0;
    wrenable_reg_9 = 1'b0;
    case (_present_state)
      S_0 :
        if(start_port == 1'b1)
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;
          wrenable_reg_0 = 1'b1;
          wrenable_reg_1 = 1'b1;
          wrenable_reg_10 = 1'b1;
          wrenable_reg_11 = 1'b1;
          wrenable_reg_12 = 1'b1;
          wrenable_reg_13 = 1'b1;
          wrenable_reg_14 = 1'b1;
          wrenable_reg_15 = 1'b1;
          wrenable_reg_16 = 1'b1;
          wrenable_reg_17 = 1'b1;
          wrenable_reg_18 = 1'b1;
          wrenable_reg_19 = 1'b1;
          wrenable_reg_2 = 1'b1;
          wrenable_reg_20 = 1'b1;
          wrenable_reg_21 = 1'b1;
          wrenable_reg_22 = 1'b1;
          wrenable_reg_23 = 1'b1;
          wrenable_reg_24 = 1'b1;
          wrenable_reg_25 = 1'b1;
          wrenable_reg_3 = 1'b1;
          wrenable_reg_4 = 1'b1;
          wrenable_reg_5 = 1'b1;
          wrenable_reg_6 = 1'b1;
          wrenable_reg_7 = 1'b1;
          wrenable_reg_8 = 1'b1;
          wrenable_reg_9 = 1'b1;
          _next_state = S_1;
        end
        else
        begin
          _next_state = S_0;
        end
      S_1 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;
          selector_MUX_27_reg_26_0_0_0 = 1'b1;
          wrenable_reg_26 = 1'b1;
          _next_state = S_2;
        end
      S_2 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;
          wrenable_reg_27 = 1'b1;
          _next_state = S_3;
        end
      S_3 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1 = 1'b1;
          wrenable_reg_28 = 1'b1;
          _next_state = S_4;
        end
      S_4 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;
          wrenable_reg_29 = 1'b1;
          _next_state = S_5;
        end
      S_5 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;
          wrenable_reg_30 = 1'b1;
          _next_state = S_6;
        end
      S_6 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;
          wrenable_reg_31 = 1'b1;
          _next_state = S_7;
        end
      S_7 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;
          wrenable_reg_32 = 1'b1;
          _next_state = S_8;
        end
      S_8 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;
          wrenable_reg_33 = 1'b1;
          _next_state = S_9;
        end
      S_9 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;
          wrenable_reg_34 = 1'b1;
          _next_state = S_10;
        end
      S_10 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;
          wrenable_reg_35 = 1'b1;
          _next_state = S_11;
        end
      S_11 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;
          wrenable_reg_36 = 1'b1;
          _next_state = S_12;
        end
      S_12 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;
          wrenable_reg_37 = 1'b1;
          _next_state = S_13;
        end
      S_13 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;
          wrenable_reg_38 = 1'b1;
          _next_state = S_14;
        end
      S_14 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          wrenable_reg_39 = 1'b1;
          _next_state = S_15;
        end
      S_15 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9 = 1'b1;
          wrenable_reg_40 = 1'b1;
          _next_state = S_16;
        end
      S_16 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4 = 1'b1;
          wrenable_reg_41 = 1'b1;
          _next_state = S_17;
        end
      S_17 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4 = 1'b1;
          wrenable_reg_42 = 1'b1;
          _next_state = S_18;
        end
      S_18 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1 = 1'b1;
          wrenable_reg_43 = 1'b1;
          _next_state = S_19;
        end
      S_19 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1 = 1'b1;
          wrenable_reg_44 = 1'b1;
          _next_state = S_20;
        end
      S_20 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1 = 1'b1;
          wrenable_reg_45 = 1'b1;
          _next_state = S_21;
        end
      S_21 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;
          wrenable_reg_46 = 1'b1;
          _next_state = S_22;
        end
      S_22 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;
          wrenable_reg_47 = 1'b1;
          _next_state = S_23;
        end
      S_23 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;
          wrenable_reg_48 = 1'b1;
          _next_state = S_24;
        end
      S_24 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;
          wrenable_reg_49 = 1'b1;
          _next_state = S_25;
        end
      S_25 :
        begin
          selector_MUX_54_reg_50_0_0_0 = 1'b1;
          wrenable_reg_50 = 1'b1;
          _next_state = S_26;
        end
      S_26 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_LOAD = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;
          wrenable_reg_50 = 1'b1;
          wrenable_reg_51 = 1'b1;
          wrenable_reg_52 = 1'b1;
          wrenable_reg_53 = 1'b1;
          wrenable_reg_54 = 1'b1;
          wrenable_reg_55 = 1'b1;
          wrenable_reg_56 = 1'b1;
          wrenable_reg_57 = 1'b1;
          wrenable_reg_58 = 1'b1;
          wrenable_reg_59 = 1'b1;
          wrenable_reg_60 = 1'b1;
          wrenable_reg_61 = 1'b1;
          wrenable_reg_62 = 1'b1;
          wrenable_reg_63 = 1'b1;
          wrenable_reg_64 = 1'b1;
          wrenable_reg_65 = 1'b1;
          wrenable_reg_66 = 1'b1;
          wrenable_reg_67 = 1'b1;
          wrenable_reg_68 = 1'b1;
          wrenable_reg_69 = 1'b1;
          wrenable_reg_70 = 1'b1;
          wrenable_reg_71 = 1'b1;
          wrenable_reg_72 = 1'b1;
          wrenable_reg_73 = 1'b1;
          wrenable_reg_74 = 1'b1;
          wrenable_reg_75 = 1'b1;
          wrenable_reg_76 = 1'b1;
          wrenable_reg_77 = 1'b1;
          _next_state = S_27;
        end
      S_27 :
        begin
          selector_MUX_25_reg_24_0_0_0 = 1'b1;
          selector_MUX_28_reg_27_0_0_0 = 1'b1;
          selector_MUX_29_reg_28_0_0_0 = 1'b1;
          selector_MUX_30_reg_29_0_0_0 = 1'b1;
          selector_MUX_32_reg_30_0_0_0 = 1'b1;
          selector_MUX_33_reg_31_0_0_0 = 1'b1;
          selector_MUX_34_reg_32_0_0_0 = 1'b1;
          selector_MUX_35_reg_33_0_0_0 = 1'b1;
          selector_MUX_36_reg_34_0_0_0 = 1'b1;
          selector_MUX_37_reg_35_0_0_0 = 1'b1;
          selector_MUX_38_reg_36_0_0_0 = 1'b1;
          selector_MUX_39_reg_37_0_0_0 = 1'b1;
          selector_MUX_40_reg_38_0_0_0 = 1'b1;
          selector_MUX_41_reg_39_0_0_0 = 1'b1;
          selector_MUX_43_reg_40_0_0_0 = 1'b1;
          selector_MUX_44_reg_41_0_0_0 = 1'b1;
          selector_MUX_45_reg_42_0_0_0 = 1'b1;
          selector_MUX_46_reg_43_0_0_0 = 1'b1;
          selector_MUX_47_reg_44_0_0_0 = 1'b1;
          selector_MUX_48_reg_45_0_0_0 = 1'b1;
          selector_MUX_49_reg_46_0_0_0 = 1'b1;
          selector_MUX_50_reg_47_0_0_0 = 1'b1;
          selector_MUX_51_reg_48_0_0_0 = 1'b1;
          selector_MUX_52_reg_49_0_0_0 = 1'b1;
          wrenable_reg_24 = 1'b1;
          wrenable_reg_26 = 1'b1;
          wrenable_reg_27 = 1'b1;
          wrenable_reg_28 = 1'b1;
          wrenable_reg_29 = 1'b1;
          wrenable_reg_30 = 1'b1;
          wrenable_reg_31 = 1'b1;
          wrenable_reg_32 = 1'b1;
          wrenable_reg_33 = 1'b1;
          wrenable_reg_34 = 1'b1;
          wrenable_reg_35 = 1'b1;
          wrenable_reg_36 = 1'b1;
          wrenable_reg_37 = 1'b1;
          wrenable_reg_38 = 1'b1;
          wrenable_reg_39 = 1'b1;
          wrenable_reg_40 = 1'b1;
          wrenable_reg_41 = 1'b1;
          wrenable_reg_42 = 1'b1;
          wrenable_reg_43 = 1'b1;
          wrenable_reg_44 = 1'b1;
          wrenable_reg_45 = 1'b1;
          wrenable_reg_46 = 1'b1;
          wrenable_reg_47 = 1'b1;
          wrenable_reg_48 = 1'b1;
          wrenable_reg_49 = 1'b1;
          wrenable_reg_78 = 1'b1;
          if (OUT_CONDITION_keccak_423514_423900 == 1'b1)
            begin
              _next_state = S_28;
              selector_MUX_25_reg_24_0_0_0 = 1'b0;
              selector_MUX_28_reg_27_0_0_0 = 1'b0;
              selector_MUX_29_reg_28_0_0_0 = 1'b0;
              selector_MUX_30_reg_29_0_0_0 = 1'b0;
              selector_MUX_32_reg_30_0_0_0 = 1'b0;
              selector_MUX_33_reg_31_0_0_0 = 1'b0;
              selector_MUX_34_reg_32_0_0_0 = 1'b0;
              selector_MUX_35_reg_33_0_0_0 = 1'b0;
              selector_MUX_36_reg_34_0_0_0 = 1'b0;
              selector_MUX_37_reg_35_0_0_0 = 1'b0;
              selector_MUX_38_reg_36_0_0_0 = 1'b0;
              selector_MUX_39_reg_37_0_0_0 = 1'b0;
              selector_MUX_40_reg_38_0_0_0 = 1'b0;
              selector_MUX_41_reg_39_0_0_0 = 1'b0;
              selector_MUX_43_reg_40_0_0_0 = 1'b0;
              selector_MUX_44_reg_41_0_0_0 = 1'b0;
              selector_MUX_45_reg_42_0_0_0 = 1'b0;
              selector_MUX_46_reg_43_0_0_0 = 1'b0;
              selector_MUX_47_reg_44_0_0_0 = 1'b0;
              selector_MUX_48_reg_45_0_0_0 = 1'b0;
              selector_MUX_49_reg_46_0_0_0 = 1'b0;
              selector_MUX_50_reg_47_0_0_0 = 1'b0;
              selector_MUX_51_reg_48_0_0_0 = 1'b0;
              selector_MUX_52_reg_49_0_0_0 = 1'b0;
              wrenable_reg_24 = 1'b0;
              wrenable_reg_26 = 1'b0;
              wrenable_reg_27 = 1'b0;
              wrenable_reg_28 = 1'b0;
              wrenable_reg_29 = 1'b0;
              wrenable_reg_30 = 1'b0;
              wrenable_reg_31 = 1'b0;
              wrenable_reg_32 = 1'b0;
              wrenable_reg_33 = 1'b0;
              wrenable_reg_34 = 1'b0;
              wrenable_reg_35 = 1'b0;
              wrenable_reg_36 = 1'b0;
              wrenable_reg_37 = 1'b0;
              wrenable_reg_38 = 1'b0;
              wrenable_reg_39 = 1'b0;
              wrenable_reg_40 = 1'b0;
              wrenable_reg_41 = 1'b0;
              wrenable_reg_42 = 1'b0;
              wrenable_reg_43 = 1'b0;
              wrenable_reg_44 = 1'b0;
              wrenable_reg_45 = 1'b0;
              wrenable_reg_46 = 1'b0;
              wrenable_reg_47 = 1'b0;
              wrenable_reg_48 = 1'b0;
              wrenable_reg_49 = 1'b0;
            end
          else
            begin
              _next_state = S_26;
              wrenable_reg_78 = 1'b0;
            end
        end
      S_28 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;
          _next_state = S_29;
        end
      S_29 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;
          _next_state = S_30;
        end
      S_30 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;
          _next_state = S_31;
        end
      S_31 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1 = 1'b1;
          _next_state = S_32;
        end
      S_32 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;
          _next_state = S_33;
        end
      S_33 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;
          _next_state = S_34;
        end
      S_34 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;
          _next_state = S_35;
        end
      S_35 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;
          _next_state = S_36;
        end
      S_36 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;
          _next_state = S_37;
        end
      S_37 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;
          _next_state = S_38;
        end
      S_38 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;
          _next_state = S_39;
        end
      S_39 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;
          _next_state = S_40;
        end
      S_40 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;
          _next_state = S_41;
        end
      S_41 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1 = 1'b1;
          _next_state = S_42;
        end
      S_42 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0 = 1'b1;
          _next_state = S_43;
        end
      S_43 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9 = 1'b1;
          _next_state = S_44;
        end
      S_44 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4 = 1'b1;
          _next_state = S_45;
        end
      S_45 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4 = 1'b1;
          _next_state = S_46;
        end
      S_46 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1 = 1'b1;
          _next_state = S_47;
        end
      S_47 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1 = 1'b1;
          _next_state = S_48;
        end
      S_48 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1 = 1'b1;
          _next_state = S_49;
        end
      S_49 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7 = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;
          _next_state = S_50;
        end
      S_50 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;
          _next_state = S_51;
        end
      S_51 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;
          selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;
          _next_state = S_52;
        end
      S_52 :
        begin
          fuselector_BMEMORY_CTRL_35_i0_STORE = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2 = 1'b1;
          selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0 = 1'b1;
          _next_state = S_53;
          done_port = 1'b1;
        end
      S_53 :
        begin
          _next_state = S_0;
        end
      default :
        begin
          _next_state = S_0;
        end
    endcase
  end
endmodule

// This component is part of the BAMBU/PANDA IP LIBRARY
// Copyright (C) 2004-2023 Politecnico di Milano
// Author(s): Marco Lattuada <marco.lattuada@polimi.it>
// License: PANDA_LGPLv3
`timescale 1ns / 1ps
module flipflop_AR(clock,
  reset,
  in1,
  out1);
  parameter BITSIZE_in1=1,
    BITSIZE_out1=1;
  // IN
  input clock;
  input reset;
  input in1;
  // OUT
  output out1;
  
  reg reg_out1 =0;
  assign out1 = reg_out1;
  always @(posedge clock )
    if (reset == 1'b0)
      reg_out1 <= {BITSIZE_out1{1'b0}};
    else
      reg_out1 <= in1;
endmodule

// Top component for keccak
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module _keccak(clock,
  reset,
  start_port,
  done_port,
  Pd226,
  S_oe_ram,
  S_we_ram,
  S_addr_ram,
  S_Wdata_ram,
  S_data_ram_size,
  M_Rdata_ram,
  M_DataRdy,
  Sin_Rdata_ram,
  Sin_DataRdy,
  Min_oe_ram,
  Min_we_ram,
  Min_addr_ram,
  Min_Wdata_ram,
  Min_data_ram_size,
  Sout_Rdata_ram,
  Sout_DataRdy,
  Mout_oe_ram,
  Mout_we_ram,
  Mout_addr_ram,
  Mout_Wdata_ram,
  Mout_data_ram_size);
  // IN
  input clock;
  input reset;
  input start_port;
  input [31:0] Pd226;
  input S_oe_ram;
  input S_we_ram;
  input [31:0] S_addr_ram;
  input [63:0] S_Wdata_ram;
  input [6:0] S_data_ram_size;
  input [63:0] M_Rdata_ram;
  input M_DataRdy;
  input [63:0] Sin_Rdata_ram;
  input Sin_DataRdy;
  input Min_oe_ram;
  input Min_we_ram;
  input [31:0] Min_addr_ram;
  input [63:0] Min_Wdata_ram;
  input [6:0] Min_data_ram_size;
  // OUT
  output done_port;
  output [63:0] Sout_Rdata_ram;
  output Sout_DataRdy;
  output Mout_oe_ram;
  output Mout_we_ram;
  output [31:0] Mout_addr_ram;
  output [63:0] Mout_Wdata_ram;
  output [6:0] Mout_data_ram_size;
  // Component and signal declarations
  wire OUT_CONDITION_keccak_423514_423900;
  wire done_delayed_REG_signal_in;
  wire done_delayed_REG_signal_out;
  wire fuselector_BMEMORY_CTRL_35_i0_LOAD;
  wire fuselector_BMEMORY_CTRL_35_i0_STORE;
  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0;
  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1;
  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10;
  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11;
  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12;
  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2;
  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3;
  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4;
  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5;
  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6;
  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7;
  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8;
  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9;
  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0;
  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1;
  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2;
  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3;
  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4;
  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5;
  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0;
  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1;
  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2;
  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0;
  wire selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1;
  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0;
  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1;
  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10;
  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11;
  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12;
  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2;
  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3;
  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4;
  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5;
  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6;
  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7;
  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8;
  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9;
  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0;
  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1;
  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2;
  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3;
  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4;
  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5;
  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6;
  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0;
  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1;
  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2;
  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0;
  wire selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1;
  wire selector_MUX_25_reg_24_0_0_0;
  wire selector_MUX_27_reg_26_0_0_0;
  wire selector_MUX_28_reg_27_0_0_0;
  wire selector_MUX_29_reg_28_0_0_0;
  wire selector_MUX_30_reg_29_0_0_0;
  wire selector_MUX_32_reg_30_0_0_0;
  wire selector_MUX_33_reg_31_0_0_0;
  wire selector_MUX_34_reg_32_0_0_0;
  wire selector_MUX_35_reg_33_0_0_0;
  wire selector_MUX_36_reg_34_0_0_0;
  wire selector_MUX_37_reg_35_0_0_0;
  wire selector_MUX_38_reg_36_0_0_0;
  wire selector_MUX_39_reg_37_0_0_0;
  wire selector_MUX_40_reg_38_0_0_0;
  wire selector_MUX_41_reg_39_0_0_0;
  wire selector_MUX_43_reg_40_0_0_0;
  wire selector_MUX_44_reg_41_0_0_0;
  wire selector_MUX_45_reg_42_0_0_0;
  wire selector_MUX_46_reg_43_0_0_0;
  wire selector_MUX_47_reg_44_0_0_0;
  wire selector_MUX_48_reg_45_0_0_0;
  wire selector_MUX_49_reg_46_0_0_0;
  wire selector_MUX_50_reg_47_0_0_0;
  wire selector_MUX_51_reg_48_0_0_0;
  wire selector_MUX_52_reg_49_0_0_0;
  wire selector_MUX_54_reg_50_0_0_0;
  wire wrenable_reg_0;
  wire wrenable_reg_1;
  wire wrenable_reg_10;
  wire wrenable_reg_11;
  wire wrenable_reg_12;
  wire wrenable_reg_13;
  wire wrenable_reg_14;
  wire wrenable_reg_15;
  wire wrenable_reg_16;
  wire wrenable_reg_17;
  wire wrenable_reg_18;
  wire wrenable_reg_19;
  wire wrenable_reg_2;
  wire wrenable_reg_20;
  wire wrenable_reg_21;
  wire wrenable_reg_22;
  wire wrenable_reg_23;
  wire wrenable_reg_24;
  wire wrenable_reg_25;
  wire wrenable_reg_26;
  wire wrenable_reg_27;
  wire wrenable_reg_28;
  wire wrenable_reg_29;
  wire wrenable_reg_3;
  wire wrenable_reg_30;
  wire wrenable_reg_31;
  wire wrenable_reg_32;
  wire wrenable_reg_33;
  wire wrenable_reg_34;
  wire wrenable_reg_35;
  wire wrenable_reg_36;
  wire wrenable_reg_37;
  wire wrenable_reg_38;
  wire wrenable_reg_39;
  wire wrenable_reg_4;
  wire wrenable_reg_40;
  wire wrenable_reg_41;
  wire wrenable_reg_42;
  wire wrenable_reg_43;
  wire wrenable_reg_44;
  wire wrenable_reg_45;
  wire wrenable_reg_46;
  wire wrenable_reg_47;
  wire wrenable_reg_48;
  wire wrenable_reg_49;
  wire wrenable_reg_5;
  wire wrenable_reg_50;
  wire wrenable_reg_51;
  wire wrenable_reg_52;
  wire wrenable_reg_53;
  wire wrenable_reg_54;
  wire wrenable_reg_55;
  wire wrenable_reg_56;
  wire wrenable_reg_57;
  wire wrenable_reg_58;
  wire wrenable_reg_59;
  wire wrenable_reg_6;
  wire wrenable_reg_60;
  wire wrenable_reg_61;
  wire wrenable_reg_62;
  wire wrenable_reg_63;
  wire wrenable_reg_64;
  wire wrenable_reg_65;
  wire wrenable_reg_66;
  wire wrenable_reg_67;
  wire wrenable_reg_68;
  wire wrenable_reg_69;
  wire wrenable_reg_7;
  wire wrenable_reg_70;
  wire wrenable_reg_71;
  wire wrenable_reg_72;
  wire wrenable_reg_73;
  wire wrenable_reg_74;
  wire wrenable_reg_75;
  wire wrenable_reg_76;
  wire wrenable_reg_77;
  wire wrenable_reg_78;
  wire wrenable_reg_8;
  wire wrenable_reg_9;
  
  controller_keccak Controller_i (.done_port(done_delayed_REG_signal_in),
    .fuselector_BMEMORY_CTRL_35_i0_LOAD(fuselector_BMEMORY_CTRL_35_i0_LOAD),
    .fuselector_BMEMORY_CTRL_35_i0_STORE(fuselector_BMEMORY_CTRL_35_i0_STORE),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0(selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1(selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2(selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0(selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1(selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0(selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1(selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2(selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0(selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1(selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1),
    .selector_MUX_25_reg_24_0_0_0(selector_MUX_25_reg_24_0_0_0),
    .selector_MUX_27_reg_26_0_0_0(selector_MUX_27_reg_26_0_0_0),
    .selector_MUX_28_reg_27_0_0_0(selector_MUX_28_reg_27_0_0_0),
    .selector_MUX_29_reg_28_0_0_0(selector_MUX_29_reg_28_0_0_0),
    .selector_MUX_30_reg_29_0_0_0(selector_MUX_30_reg_29_0_0_0),
    .selector_MUX_32_reg_30_0_0_0(selector_MUX_32_reg_30_0_0_0),
    .selector_MUX_33_reg_31_0_0_0(selector_MUX_33_reg_31_0_0_0),
    .selector_MUX_34_reg_32_0_0_0(selector_MUX_34_reg_32_0_0_0),
    .selector_MUX_35_reg_33_0_0_0(selector_MUX_35_reg_33_0_0_0),
    .selector_MUX_36_reg_34_0_0_0(selector_MUX_36_reg_34_0_0_0),
    .selector_MUX_37_reg_35_0_0_0(selector_MUX_37_reg_35_0_0_0),
    .selector_MUX_38_reg_36_0_0_0(selector_MUX_38_reg_36_0_0_0),
    .selector_MUX_39_reg_37_0_0_0(selector_MUX_39_reg_37_0_0_0),
    .selector_MUX_40_reg_38_0_0_0(selector_MUX_40_reg_38_0_0_0),
    .selector_MUX_41_reg_39_0_0_0(selector_MUX_41_reg_39_0_0_0),
    .selector_MUX_43_reg_40_0_0_0(selector_MUX_43_reg_40_0_0_0),
    .selector_MUX_44_reg_41_0_0_0(selector_MUX_44_reg_41_0_0_0),
    .selector_MUX_45_reg_42_0_0_0(selector_MUX_45_reg_42_0_0_0),
    .selector_MUX_46_reg_43_0_0_0(selector_MUX_46_reg_43_0_0_0),
    .selector_MUX_47_reg_44_0_0_0(selector_MUX_47_reg_44_0_0_0),
    .selector_MUX_48_reg_45_0_0_0(selector_MUX_48_reg_45_0_0_0),
    .selector_MUX_49_reg_46_0_0_0(selector_MUX_49_reg_46_0_0_0),
    .selector_MUX_50_reg_47_0_0_0(selector_MUX_50_reg_47_0_0_0),
    .selector_MUX_51_reg_48_0_0_0(selector_MUX_51_reg_48_0_0_0),
    .selector_MUX_52_reg_49_0_0_0(selector_MUX_52_reg_49_0_0_0),
    .selector_MUX_54_reg_50_0_0_0(selector_MUX_54_reg_50_0_0_0),
    .wrenable_reg_0(wrenable_reg_0),
    .wrenable_reg_1(wrenable_reg_1),
    .wrenable_reg_10(wrenable_reg_10),
    .wrenable_reg_11(wrenable_reg_11),
    .wrenable_reg_12(wrenable_reg_12),
    .wrenable_reg_13(wrenable_reg_13),
    .wrenable_reg_14(wrenable_reg_14),
    .wrenable_reg_15(wrenable_reg_15),
    .wrenable_reg_16(wrenable_reg_16),
    .wrenable_reg_17(wrenable_reg_17),
    .wrenable_reg_18(wrenable_reg_18),
    .wrenable_reg_19(wrenable_reg_19),
    .wrenable_reg_2(wrenable_reg_2),
    .wrenable_reg_20(wrenable_reg_20),
    .wrenable_reg_21(wrenable_reg_21),
    .wrenable_reg_22(wrenable_reg_22),
    .wrenable_reg_23(wrenable_reg_23),
    .wrenable_reg_24(wrenable_reg_24),
    .wrenable_reg_25(wrenable_reg_25),
    .wrenable_reg_26(wrenable_reg_26),
    .wrenable_reg_27(wrenable_reg_27),
    .wrenable_reg_28(wrenable_reg_28),
    .wrenable_reg_29(wrenable_reg_29),
    .wrenable_reg_3(wrenable_reg_3),
    .wrenable_reg_30(wrenable_reg_30),
    .wrenable_reg_31(wrenable_reg_31),
    .wrenable_reg_32(wrenable_reg_32),
    .wrenable_reg_33(wrenable_reg_33),
    .wrenable_reg_34(wrenable_reg_34),
    .wrenable_reg_35(wrenable_reg_35),
    .wrenable_reg_36(wrenable_reg_36),
    .wrenable_reg_37(wrenable_reg_37),
    .wrenable_reg_38(wrenable_reg_38),
    .wrenable_reg_39(wrenable_reg_39),
    .wrenable_reg_4(wrenable_reg_4),
    .wrenable_reg_40(wrenable_reg_40),
    .wrenable_reg_41(wrenable_reg_41),
    .wrenable_reg_42(wrenable_reg_42),
    .wrenable_reg_43(wrenable_reg_43),
    .wrenable_reg_44(wrenable_reg_44),
    .wrenable_reg_45(wrenable_reg_45),
    .wrenable_reg_46(wrenable_reg_46),
    .wrenable_reg_47(wrenable_reg_47),
    .wrenable_reg_48(wrenable_reg_48),
    .wrenable_reg_49(wrenable_reg_49),
    .wrenable_reg_5(wrenable_reg_5),
    .wrenable_reg_50(wrenable_reg_50),
    .wrenable_reg_51(wrenable_reg_51),
    .wrenable_reg_52(wrenable_reg_52),
    .wrenable_reg_53(wrenable_reg_53),
    .wrenable_reg_54(wrenable_reg_54),
    .wrenable_reg_55(wrenable_reg_55),
    .wrenable_reg_56(wrenable_reg_56),
    .wrenable_reg_57(wrenable_reg_57),
    .wrenable_reg_58(wrenable_reg_58),
    .wrenable_reg_59(wrenable_reg_59),
    .wrenable_reg_6(wrenable_reg_6),
    .wrenable_reg_60(wrenable_reg_60),
    .wrenable_reg_61(wrenable_reg_61),
    .wrenable_reg_62(wrenable_reg_62),
    .wrenable_reg_63(wrenable_reg_63),
    .wrenable_reg_64(wrenable_reg_64),
    .wrenable_reg_65(wrenable_reg_65),
    .wrenable_reg_66(wrenable_reg_66),
    .wrenable_reg_67(wrenable_reg_67),
    .wrenable_reg_68(wrenable_reg_68),
    .wrenable_reg_69(wrenable_reg_69),
    .wrenable_reg_7(wrenable_reg_7),
    .wrenable_reg_70(wrenable_reg_70),
    .wrenable_reg_71(wrenable_reg_71),
    .wrenable_reg_72(wrenable_reg_72),
    .wrenable_reg_73(wrenable_reg_73),
    .wrenable_reg_74(wrenable_reg_74),
    .wrenable_reg_75(wrenable_reg_75),
    .wrenable_reg_76(wrenable_reg_76),
    .wrenable_reg_77(wrenable_reg_77),
    .wrenable_reg_78(wrenable_reg_78),
    .wrenable_reg_8(wrenable_reg_8),
    .wrenable_reg_9(wrenable_reg_9),
    .OUT_CONDITION_keccak_423514_423900(OUT_CONDITION_keccak_423514_423900),
    .clock(clock),
    .reset(reset),
    .start_port(start_port));
  datapath_keccak #(.MEM_var_423955_423514(1024)) Datapath_i (.Sout_Rdata_ram(Sout_Rdata_ram),
    .Sout_DataRdy(Sout_DataRdy),
    .Mout_oe_ram(Mout_oe_ram),
    .Mout_we_ram(Mout_we_ram),
    .Mout_addr_ram(Mout_addr_ram),
    .Mout_Wdata_ram(Mout_Wdata_ram),
    .Mout_data_ram_size(Mout_data_ram_size),
    .OUT_CONDITION_keccak_423514_423900(OUT_CONDITION_keccak_423514_423900),
    .clock(clock),
    .reset(reset),
    .in_port_Pd226(Pd226),
    .S_oe_ram(S_oe_ram),
    .S_we_ram(S_we_ram),
    .S_addr_ram(S_addr_ram),
    .S_Wdata_ram(S_Wdata_ram),
    .S_data_ram_size(S_data_ram_size),
    .M_Rdata_ram(M_Rdata_ram),
    .M_DataRdy(M_DataRdy),
    .Sin_Rdata_ram(Sin_Rdata_ram),
    .Sin_DataRdy(Sin_DataRdy),
    .Min_oe_ram(Min_oe_ram),
    .Min_we_ram(Min_we_ram),
    .Min_addr_ram(Min_addr_ram),
    .Min_Wdata_ram(Min_Wdata_ram),
    .Min_data_ram_size(Min_data_ram_size),
    .fuselector_BMEMORY_CTRL_35_i0_LOAD(fuselector_BMEMORY_CTRL_35_i0_LOAD),
    .fuselector_BMEMORY_CTRL_35_i0_STORE(fuselector_BMEMORY_CTRL_35_i0_STORE),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_0),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_1),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_10),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_11),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_12),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_2),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_3),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_4),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_5),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_6),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_7),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_8),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9(selector_MUX_0_BMEMORY_CTRL_35_i0_0_0_9),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_0),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_1),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_2),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_3),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_4),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5(selector_MUX_0_BMEMORY_CTRL_35_i0_0_1_5),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0(selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_0),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1(selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_1),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2(selector_MUX_0_BMEMORY_CTRL_35_i0_0_2_2),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0(selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_0),
    .selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1(selector_MUX_0_BMEMORY_CTRL_35_i0_0_3_1),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_0),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_1),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_10),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_11),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_12),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_2),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_3),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_4),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_5),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_6),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_7),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_8),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9(selector_MUX_1_BMEMORY_CTRL_35_i0_1_0_9),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_0),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_1),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_2),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_3),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_4),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_5),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6(selector_MUX_1_BMEMORY_CTRL_35_i0_1_1_6),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0(selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_0),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1(selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_1),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2(selector_MUX_1_BMEMORY_CTRL_35_i0_1_2_2),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0(selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_0),
    .selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1(selector_MUX_1_BMEMORY_CTRL_35_i0_1_3_1),
    .selector_MUX_25_reg_24_0_0_0(selector_MUX_25_reg_24_0_0_0),
    .selector_MUX_27_reg_26_0_0_0(selector_MUX_27_reg_26_0_0_0),
    .selector_MUX_28_reg_27_0_0_0(selector_MUX_28_reg_27_0_0_0),
    .selector_MUX_29_reg_28_0_0_0(selector_MUX_29_reg_28_0_0_0),
    .selector_MUX_30_reg_29_0_0_0(selector_MUX_30_reg_29_0_0_0),
    .selector_MUX_32_reg_30_0_0_0(selector_MUX_32_reg_30_0_0_0),
    .selector_MUX_33_reg_31_0_0_0(selector_MUX_33_reg_31_0_0_0),
    .selector_MUX_34_reg_32_0_0_0(selector_MUX_34_reg_32_0_0_0),
    .selector_MUX_35_reg_33_0_0_0(selector_MUX_35_reg_33_0_0_0),
    .selector_MUX_36_reg_34_0_0_0(selector_MUX_36_reg_34_0_0_0),
    .selector_MUX_37_reg_35_0_0_0(selector_MUX_37_reg_35_0_0_0),
    .selector_MUX_38_reg_36_0_0_0(selector_MUX_38_reg_36_0_0_0),
    .selector_MUX_39_reg_37_0_0_0(selector_MUX_39_reg_37_0_0_0),
    .selector_MUX_40_reg_38_0_0_0(selector_MUX_40_reg_38_0_0_0),
    .selector_MUX_41_reg_39_0_0_0(selector_MUX_41_reg_39_0_0_0),
    .selector_MUX_43_reg_40_0_0_0(selector_MUX_43_reg_40_0_0_0),
    .selector_MUX_44_reg_41_0_0_0(selector_MUX_44_reg_41_0_0_0),
    .selector_MUX_45_reg_42_0_0_0(selector_MUX_45_reg_42_0_0_0),
    .selector_MUX_46_reg_43_0_0_0(selector_MUX_46_reg_43_0_0_0),
    .selector_MUX_47_reg_44_0_0_0(selector_MUX_47_reg_44_0_0_0),
    .selector_MUX_48_reg_45_0_0_0(selector_MUX_48_reg_45_0_0_0),
    .selector_MUX_49_reg_46_0_0_0(selector_MUX_49_reg_46_0_0_0),
    .selector_MUX_50_reg_47_0_0_0(selector_MUX_50_reg_47_0_0_0),
    .selector_MUX_51_reg_48_0_0_0(selector_MUX_51_reg_48_0_0_0),
    .selector_MUX_52_reg_49_0_0_0(selector_MUX_52_reg_49_0_0_0),
    .selector_MUX_54_reg_50_0_0_0(selector_MUX_54_reg_50_0_0_0),
    .wrenable_reg_0(wrenable_reg_0),
    .wrenable_reg_1(wrenable_reg_1),
    .wrenable_reg_10(wrenable_reg_10),
    .wrenable_reg_11(wrenable_reg_11),
    .wrenable_reg_12(wrenable_reg_12),
    .wrenable_reg_13(wrenable_reg_13),
    .wrenable_reg_14(wrenable_reg_14),
    .wrenable_reg_15(wrenable_reg_15),
    .wrenable_reg_16(wrenable_reg_16),
    .wrenable_reg_17(wrenable_reg_17),
    .wrenable_reg_18(wrenable_reg_18),
    .wrenable_reg_19(wrenable_reg_19),
    .wrenable_reg_2(wrenable_reg_2),
    .wrenable_reg_20(wrenable_reg_20),
    .wrenable_reg_21(wrenable_reg_21),
    .wrenable_reg_22(wrenable_reg_22),
    .wrenable_reg_23(wrenable_reg_23),
    .wrenable_reg_24(wrenable_reg_24),
    .wrenable_reg_25(wrenable_reg_25),
    .wrenable_reg_26(wrenable_reg_26),
    .wrenable_reg_27(wrenable_reg_27),
    .wrenable_reg_28(wrenable_reg_28),
    .wrenable_reg_29(wrenable_reg_29),
    .wrenable_reg_3(wrenable_reg_3),
    .wrenable_reg_30(wrenable_reg_30),
    .wrenable_reg_31(wrenable_reg_31),
    .wrenable_reg_32(wrenable_reg_32),
    .wrenable_reg_33(wrenable_reg_33),
    .wrenable_reg_34(wrenable_reg_34),
    .wrenable_reg_35(wrenable_reg_35),
    .wrenable_reg_36(wrenable_reg_36),
    .wrenable_reg_37(wrenable_reg_37),
    .wrenable_reg_38(wrenable_reg_38),
    .wrenable_reg_39(wrenable_reg_39),
    .wrenable_reg_4(wrenable_reg_4),
    .wrenable_reg_40(wrenable_reg_40),
    .wrenable_reg_41(wrenable_reg_41),
    .wrenable_reg_42(wrenable_reg_42),
    .wrenable_reg_43(wrenable_reg_43),
    .wrenable_reg_44(wrenable_reg_44),
    .wrenable_reg_45(wrenable_reg_45),
    .wrenable_reg_46(wrenable_reg_46),
    .wrenable_reg_47(wrenable_reg_47),
    .wrenable_reg_48(wrenable_reg_48),
    .wrenable_reg_49(wrenable_reg_49),
    .wrenable_reg_5(wrenable_reg_5),
    .wrenable_reg_50(wrenable_reg_50),
    .wrenable_reg_51(wrenable_reg_51),
    .wrenable_reg_52(wrenable_reg_52),
    .wrenable_reg_53(wrenable_reg_53),
    .wrenable_reg_54(wrenable_reg_54),
    .wrenable_reg_55(wrenable_reg_55),
    .wrenable_reg_56(wrenable_reg_56),
    .wrenable_reg_57(wrenable_reg_57),
    .wrenable_reg_58(wrenable_reg_58),
    .wrenable_reg_59(wrenable_reg_59),
    .wrenable_reg_6(wrenable_reg_6),
    .wrenable_reg_60(wrenable_reg_60),
    .wrenable_reg_61(wrenable_reg_61),
    .wrenable_reg_62(wrenable_reg_62),
    .wrenable_reg_63(wrenable_reg_63),
    .wrenable_reg_64(wrenable_reg_64),
    .wrenable_reg_65(wrenable_reg_65),
    .wrenable_reg_66(wrenable_reg_66),
    .wrenable_reg_67(wrenable_reg_67),
    .wrenable_reg_68(wrenable_reg_68),
    .wrenable_reg_69(wrenable_reg_69),
    .wrenable_reg_7(wrenable_reg_7),
    .wrenable_reg_70(wrenable_reg_70),
    .wrenable_reg_71(wrenable_reg_71),
    .wrenable_reg_72(wrenable_reg_72),
    .wrenable_reg_73(wrenable_reg_73),
    .wrenable_reg_74(wrenable_reg_74),
    .wrenable_reg_75(wrenable_reg_75),
    .wrenable_reg_76(wrenable_reg_76),
    .wrenable_reg_77(wrenable_reg_77),
    .wrenable_reg_78(wrenable_reg_78),
    .wrenable_reg_8(wrenable_reg_8),
    .wrenable_reg_9(wrenable_reg_9));
  flipflop_AR #(.BITSIZE_in1(1),
    .BITSIZE_out1(1)) done_delayed_REG (.out1(done_delayed_REG_signal_out),
    .clock(clock),
    .reset(reset),
    .in1(done_delayed_REG_signal_in));
  // io-signal post fix
  assign done_port = done_delayed_REG_signal_out;

endmodule

// Minimal interface for function: keccak
// This component has been derived from the input source code and so it does not fall under the copyright of PandA framework, but it follows the input source code copyright, and may be aggregated with components of the BAMBU/PANDA IP LIBRARY.
// Author(s): Component automatically generated by bambu
// License: THIS COMPONENT IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
`timescale 1ns / 1ps
module keccak(clk,
  reset,
  start_port,
  Pd226,
  M_Rdata_ram,
  M_DataRdy,
  done_port,
  Mout_oe_ram,
  Mout_we_ram,
  Mout_addr_ram,
  Mout_Wdata_ram,
  Mout_data_ram_size);
  // IN
  input clk;
  input reset;
  input start_port;
  input [31:0] Pd226;
  input [63:0] M_Rdata_ram;
  input M_DataRdy;
  // OUT
  output done_port;
  output Mout_oe_ram;
  output Mout_we_ram;
  output [31:0] Mout_addr_ram;
  output [63:0] Mout_Wdata_ram;
  output [6:0] Mout_data_ram_size;
  // Component and signal declarations
  wire M_DataRdy_INT;
  wire [63:0] M_Rdata_ram_INT;
  wire [63:0] Mout_Wdata_ram_INT;
  wire [31:0] Mout_addr_ram_INT;
  wire [6:0] Mout_data_ram_size_INT;
  wire Mout_oe_ram_INT;
  wire Mout_we_ram_INT;
  wire Sout_DataRdy_INT;
  wire [63:0] Sout_Rdata_ram_INT;
  
  _keccak _keccak_i0 (.done_port(done_port),
    .Sout_Rdata_ram(Sout_Rdata_ram_INT),
    .Sout_DataRdy(Sout_DataRdy_INT),
    .Mout_oe_ram(Mout_oe_ram_INT),
    .Mout_we_ram(Mout_we_ram_INT),
    .Mout_addr_ram(Mout_addr_ram_INT),
    .Mout_Wdata_ram(Mout_Wdata_ram_INT),
    .Mout_data_ram_size(Mout_data_ram_size_INT),
    .clock(clk),
    .reset(reset),
    .start_port(start_port),
    .Pd226(Pd226),
    .S_oe_ram(Mout_oe_ram_INT),
    .S_we_ram(Mout_we_ram_INT),
    .S_addr_ram(Mout_addr_ram_INT),
    .S_Wdata_ram(Mout_Wdata_ram_INT),
    .S_data_ram_size(Mout_data_ram_size_INT),
    .M_Rdata_ram(Sout_Rdata_ram_INT),
    .M_DataRdy(Sout_DataRdy_INT),
    .Sin_Rdata_ram(M_Rdata_ram_INT),
    .Sin_DataRdy(M_DataRdy_INT),
    .Min_oe_ram(1'b0),
    .Min_we_ram(1'b0),
    .Min_addr_ram(32'b00000000000000000000000000000000),
    .Min_Wdata_ram(64'b0000000000000000000000000000000000000000000000000000000000000000),
    .Min_data_ram_size(7'b0000000));
  // io-signal post fix
  assign M_Rdata_ram_INT = M_Rdata_ram;
  assign M_DataRdy_INT = M_DataRdy;
  assign Mout_oe_ram = Mout_oe_ram_INT;
  assign Mout_we_ram = Mout_we_ram_INT;
  assign Mout_addr_ram = Mout_addr_ram_INT;
  assign Mout_Wdata_ram = Mout_Wdata_ram_INT;
  assign Mout_data_ram_size = Mout_data_ram_size_INT;

endmodule


"#;